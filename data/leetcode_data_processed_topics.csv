id,name,content,difficulty
1171,Shortest Path in Binary Matrix,"['in', 'n', 'n', 'square', 'cell', 'either', 'empty', 'blocked', 'length', 'k', 'composed', 'cells', 'adjacent', 'cells', 'connected', 'different', 'edge', 'location', 'value', 'location', 'value', 'if', 'located', 'empty', 'return', 'length', 'shortest', 'clear', 'path', 'if', 'path', 'return', 'breadth-first search']",2
1170,Shortest Common Supersequence,"['given', 'two', 'strings', 'shortest', 'string', 'multiple', 'answers', 'may', 'return', 'string', 's', 'subsequence', 'string', 't', 'deleting', 'number', 'characters', 't', 'characters', 'chosen', 'anywhere', 'results', 'string', 'substring', 'delete', 'first', 'substring', 'delete', 'last', 'the', 'answer', 'provided', 'shortest', 'string', 'satisfies', 'consist', 'lowercase', 'english', 'dynamic programming']",3
1169,Largest Values From Labels,"['we', 'set', 'item', 'value', 'label', 'subset', 's', 'for', 'every', 'label', 'number', 'items', 's', 'l', 'return', 'largest', 'possible', 'sum', 'subset', 'values', 'labels', 'the', 'subset', 'chosen', 'fifth', 'values', 'labels', 'the', 'subset', 'chosen', 'third', 'values', 'labels', 'the', 'subset', 'chosen', 'first', 'fourth', 'values', 'labels', 'the', 'subset', 'chosen', 'fourth', 'hash table', 'greedy']",2
1168,Duplicate Zeros,"['given', 'fixed', 'arr', 'duplicate', 'occurrence', 'shifting', 'remaining', 'elements', 'note', 'elements', 'beyond', 'length', 'original', 'array', 'do', 'modifications', 'input', 'array', 'return', 'anything', 'after', 'calling', 'input', 'array', 'modified', 'after', 'calling', 'input', 'array', 'modified', 'array']",1
1160,Letter Tile Possibilities,"['you', 'set', 'tile', 'one', 'letter', 'printed', 'return', 'number', 'possible', 'sequences', 'letters', 'the', 'possible', 'sequences', 'tiles', 'consists', 'uppercase', 'english', 'backtracking']",2
1159,Smallest Subsequence of Distinct Characters,"['return', 'lexicographically', 'smallest', 'subsequence', 'text', 'contains', 'distinct', 'characters', 'text', 'exactly', 'text', 'consists', 'lowercase', 'english', 'string']",2
1157,Insufficient Nodes in Root to Leaf Paths,"['given', 'binary', 'consider', 'root', 'leaf', 'paths', 'leaf', 'node', 'a', 'node', 'insufficient', 'root', 'leaf', 'path', 'intersecting', 'node', 'sum', 'strictly', 'less', 'delete', 'insufficient', 'nodes', 'return', 'root', 'root', 'limit', 'root', 'limit', 'root', 'limit', 'the', 'given', 'tree', 'depth-first search']",2
1156,Occurrences After Bigram,"['given', 'words', 'first', 'consider', 'occurrences', 'form', 'second', 'second', 'comes', 'immediately', 'third', 'comes', 'immediately', 'for', 'add', 'return', 'text', 'good', 'girl', 'good', 'first', 'second', 'text', 'rock', 'first', 'second', 'text', 'consists', 'space', 'separated', 'word', 'consists', 'lowercase', 'english', 'first', 'second', 'consist', 'lowercase', 'english', 'hash table']",1
1148,Adding Two Negabinary Numbers,"['given', 'two', 'numbers', 'base', 'return', 'result', 'adding', 'each', 'number', 'given', 'array', 'array', 'significant', 'bit', 'least', 'significant', 'for', 'arr', 'represents', 'number', 'a', 'number', 'arr', 'array', 'format', 'also', 'guaranteed', 'leading', 'return', 'result', 'adding', 'array', 'leading', 'represents', 'represents', 'output', 'represents', 'leading', 'zeros', 'math']",2
1147,Flip Columns For Maximum Number of Equal Rows,"['given', 'matrix', 'consisting', 'may', 'choose', 'number', 'columns', 'matrix', 'flip', 'flipping', 'cell', 'changes', 'value', 'cell', 'return', 'maximum', 'number', 'rows', 'values', 'equal', 'number', 'after', 'flipping', 'row', 'values', 'after', 'flipping', 'values', 'first', 'rows', 'equal', 'after', 'flipping', 'values', 'first', 'two', 'last', 'two', 'rows', 'equal', 'all', 'equal', 'hash table']",2
1146,Greatest Common Divisor of Strings,"['for', 'strings', 's', 'say', 'divides', 's', 't', 'concatenated', 'return', 'largest', 'string', 'x', 'x', 'divides', 'x', 'divides', 'english', 'uppercase', 'string']",1
1145,Number of Submatrices That Sum to Target,"['given', 'return', 'number', 'submatrices', 'sum', 'a', 'submatrix', 'set', 'cells', 'x', 'two', 'submatrices', 'different', 'matrix', 'target', 'the', 'four', 'submatrices', 'contain', 'matrix', 'target', 'the', 'two', 'plus', 'two', 'plus', 'target', 'array', 'dynamic programming', 'sliding window']",3
1140,Distant Barcodes,"['in', 'row', 'barcode', 'rearrange', 'barcodes', 'two', 'adjacent', 'barcodes', 'you', 'may', 'return', 'guaranteed', 'answer', 'heap', 'sort']",2
1139,Previous Permutation With One Swap,"['given', 'array', 'a', 'positive', 'integers', 'necessarily', 'return', 'lexicographically', 'largest', 'permutation', 'smaller', 'made', 'one', 'swap', 'swap', 'exchanges', 'positions', 'two', 'numbers', 'if', 'cannot', 'return', 'swapping', 'this', 'already', 'smallest', 'swapping', 'swapping', 'array', 'greedy']",2
1138,Grumpy Bookstore Owner,"['bookstore', 'owner', 'store', 'open', 'every', 'number', 'customers', 'enter', 'customers', 'leave', 'end', 'on', 'bookstore', 'owner', 'if', 'bookstore', 'owner', 'grumpy', 'otherwise', 'when', 'bookstore', 'owner', 'customers', 'minute', 'otherwise', 'the', 'bookstore', 'owner', 'knows', 'secret', 'technique', 'keep', 'grumpy', 'use', 'return', 'maximum', 'number', 'customers', 'satisfied', 'throughout', 'customers', 'grumpy', 'x', 'bookstore', 'owner', 'keeps', 'grumpy', 'last', 'the', 'maximum', 'number', 'customers', 'satisfied', 'x', 'array', 'sliding window']",2
1137,Height Checker,"['students', 'asked', 'stand', 'order', 'heights', 'annual', 'return', 'minimum', 'number', 'students', 'standing', 'right', 'number', 'students', 'must', 'move', 'order', 'students', 'standing', 'order', 'students', 'heights', 'last', 'standing', 'right', 'array']",1
1130,Last Stone Weight II,"['we', 'collection', 'rock', 'positive', 'integer', 'each', 'choose', 'two', 'smash', 'suppose', 'stones', 'weights', 'x', 'x', 'the', 'result', 'smash', 'if', 'x', 'stones', 'totally', 'if', 'x', 'stone', 'weight', 'x', 'totally', 'stone', 'weight', 'new', 'weight', 'at', 'stone', 'return', 'smallest', 'possible', 'weight', 'stone', 'weight', 'stones', 'we', 'combine', 'get', 'array', 'converts', 'combine', 'get', 'array', 'converts', 'combine', 'get', 'array', 'converts', 'combine', 'get', 'array', 'converts', 'optimal', 'dynamic programming']",2
1129,Longest String Chain,"['given', 'list', 'word', 'consists', 'english', 'lowercase', 'say', 'predecessor', 'add', 'exactly', 'one', 'letter', 'anywhere', 'make', 'equal', 'for', 'predecessor', 'a', 'word', 'sequence', 'words', 'k', 'predecessor', 'predecessor', 'return', 'longest', 'possible', 'length', 'word', 'chain', 'words', 'chosen', 'given', 'list', 'one', 'longest', 'word', 'chain', 'consists', 'english', 'lowercase', 'hash table', 'dynamic programming']",2
1128,Remove All Adjacent Duplicates In String,"['given', 'string', 's', 'lowercase', 'duplicate', 'removal', 'consists', 'choosing', 'two', 'adjacent', 'equal', 'we', 'repeatedly', 'make', 'duplicate', 'removals', 's', 'longer', 'return', 'final', 'string', 'duplicate', 'removals', 'it', 'guaranteed', 'answer', 'for', 'could', 'remove', 'since', 'letters', 'adjacent', 'possible', 'the', 'result', 'move', 'string', 'final', 'string', 's', 'consists', 'english', 'lowercase', 'stack']",1
1127,Last Stone Weight,"['we', 'collection', 'rock', 'positive', 'integer', 'each', 'choose', 'two', 'smash', 'suppose', 'stones', 'weights', 'x', 'x', 'the', 'result', 'smash', 'if', 'x', 'stones', 'totally', 'if', 'x', 'stone', 'weight', 'x', 'totally', 'stone', 'weight', 'new', 'weight', 'at', 'stone', 'return', 'weight', 'stone', 'stones', 'we', 'combine', 'get', 'array', 'converts', 'combine', 'get', 'array', 'converts', 'combine', 'get', 'array', 'converts', 'combine', 'get', 'array', 'converts', 'value', 'last', 'heap', 'greedy']",1
1122,Longest Duplicate Substring,"['given', 'string', 'consider', 'duplicated', 'substrings', 's', 'occur', 'return', 'longest', 'possible', 's', 'duplicated', 'answer', 's', 'consists', 'lowercase', 'english', 'hash table', 'binary search']",3
1121,Partition Array for Maximum Sum,"['given', 'integer', 'array', 'partition', 'array', 'subarrays', 'length', 'after', 'subarray', 'values', 'changed', 'become', 'maximum', 'value', 'return', 'largest', 'sum', 'given', 'array', 'a', 'k', 'a', 'becomes', 'k', 'graph']",2
1120,Flower Planting With No Adjacent,"['you', 'n', 'labelled', 'in', 'want', 'plant', 'one', 'types', 'describes', 'existence', 'bidirectional', 'path', 'garden', 'x', 'garden', 'garden', 'paths', 'coming', 'leaving', 'your', 'task', 'choose', 'flower', 'type', 'garden', 'two', 'gardens', 'connected', 'different', 'types', 'return', 'choice', 'array', 'type', 'the', 'flower', 'types', 'it', 'guaranteed', 'answer', 'n', 'paths', 'n', 'paths', 'n', 'paths', 'n', 'no', 'garden', 'paths', 'coming', 'leaving', 'it', 'guaranteed', 'answer', 'graph']",1
1119,Robot Bounded In Circle,"['on', 'infinite', 'initially', 'stands', 'faces', 'robot', 'receive', 'one', 'three', 'go', 'straight', 'turn', 'degrees', 'turn', 'degress', 'the', 'robot', 'performs', 'instructions', 'given', 'repeats', 'return', 'true', 'exists', 'circle', 'plane', 'robot', 'never', 'leaves', 'true', 'the', 'robot', 'moves', 'turns', 'returns', 'when', 'repeating', 'robot', 'remains', 'circle', 'radius', 'centered', 'false', 'the', 'robot', 'moves', 'north', 'true', 'the', 'robot', 'moves', 'math']",1
1115,Valid Boomerang,"['a', 'boomerang', 'set', 'points', 'distinct', 'straight', 'given', 'three', 'points', 'return', 'whether', 'points', 'false', 'math']",1
1114,Binary Search Tree to Greater Sum Tree,"['given', 'root', 'binary', 'search', 'tree', 'distinct', 'modify', 'every', 'new', 'value', 'equal', 'sum', 'values', 'original', 'tree', 'greater', 'equal', 'as', 'search', 'tree', 'tree', 'satisfies', 'the', 'left', 'subtree', 'node', 'contains', 'nodes', 'the', 'right', 'subtree', 'node', 'contains', 'nodes', 'both', 'left', 'right', 'subtrees', 'must', 'also', 'binary', 'search', 'the', 'number', 'nodes', 'tree', 'each', 'node', 'value', 'the', 'given', 'tree', 'binary', 'search', 'binary search tree']",2
1113,Moving Stones Until Consecutive II,"['on', 'infinite', 'number', 'position', 'stone', 'given', 'call', 'stone', 'endpoint', 'stone', 'smallest', 'largest', 'each', 'pick', 'endpoint', 'stone', 'move', 'unoccupied', 'position', 'longer', 'endpoint', 'in', 'stones', 'stones', 'cannot', 'move', 'endpoint', 'stone', 'position', 'since', 'moving', 'position', 'still', 'keep', 'stone', 'endpoint', 'the', 'game', 'ends', 'cannot', 'make', 'stones', 'consecutive', 'when', 'game', 'minimum', 'maximum', 'number', 'moves', 'could', 'return', 'answer', 'length', 'we', 'move', 'one', 'move', 'finish', 'move', 'two', 'moves', 'finish', 'we', 'move', 'finish', 'move', 'finish', 'notice', 'cannot', 'move', 'finish', 'would', 'illegal', 'distinct', 'array', 'sliding window']",2
1111,Minimum Score Triangulation of Polygon,"['given', 'consider', 'convex', 'polygon', 'vertices', 'labelled', 'clockwise', 'suppose', 'triangulate', 'polygon', 'for', 'value', 'triangle', 'labels', 'total', 'score', 'triangulation', 'sum', 'values', 'triangles', 'return', 'smallest', 'possible', 'total', 'score', 'achieve', 'triangulation', 'the', 'polygon', 'already', 'score', 'triangle', 'there', 'two', 'possible', 'the', 'minimum', 'score', 'the', 'minimum', 'score', 'triangulation', 'score', 'dynamic programming']",2
1106,Escape a Large Maze,"['in', 'million', 'million', 'coordinates', 'grid', 'square', 'we', 'start', 'source', 'square', 'want', 'reach', 'target', 'each', 'walk', 'adjacent', 'square', 'grid', 'given', 'list', 'blocked', 'return', 'true', 'possible', 'reach', 'target', 'square', 'sequence', 'blocked', 'source', 'target', 'the', 'target', 'square', 'inaccessible', 'starting', 'source', 'walk', 'outside', 'blocked', 'source', 'target', 'because', 'blocked', 'possible', 'reach', 'target', 'source', 'target', 'breadth-first search']",3
1105,Uncrossed Lines,"['we', 'write', 'integers', 'a', 'order', 'two', 'separate', 'horizontal', 'may', 'draw', 'connecting', 'straight', 'line', 'connecting', 'two', 'numbers', 'the', 'line', 'draw', 'intersect', 'connecting', 'note', 'connecting', 'lines', 'cannot', 'intersect', 'even', 'number', 'belong', 'one', 'connecting', 'return', 'maximum', 'number', 'connecting', 'lines', 'draw', 'a', 'b', 'we', 'draw', 'uncrossed', 'lines', 'we', 'cannot', 'draw', 'uncrossed', 'line', 'intersect', 'line', 'a', 'b', 'a', 'b', 'array']",2
1104,Coloring A Border,"['given', 'value', 'grid', 'represents', 'color', 'grid', 'square', 'two', 'squares', 'belong', 'connected', 'component', 'color', 'next', 'connected', 'component', 'squares', 'connected', 'component', 'adjacent', 'square', 'boundary', 'grid', 'first', 'last', 'row', 'given', 'square', 'grid', 'color', 'connected', 'component', 'square', 'given', 'return', 'final', 'grid', 'color', 'grid', 'color', 'grid', 'color', 'color', 'depth-first search']",2
1103,Moving Stones Until Consecutive,"['three', 'stones', 'number', 'line', 'positions', 'each', 'pick', 'stone', 'endpoint', 'either', 'lowest', 'highest', 'position', 'move', 'unoccupied', 'position', 'say', 'stones', 'currently', 'positions', 'z', 'x', 'you', 'pick', 'stone', 'either', 'position', 'x', 'position', 'move', 'stone', 'integer', 'position', 'x', 'k', 'z', 'k', 'the', 'game', 'ends', 'cannot', 'make', 'stones', 'consecutive', 'when', 'game', 'minimum', 'maximum', 'number', 'moves', 'could', 'return', 'answer', 'length', 'answer', 'b', 'c', 'move', 'stone', 'move', 'stone', 'b', 'c', 'we', 'cannot', 'make', 'b', 'c', 'move', 'stone', 'move', 'stone', 'b', 'c', 'b', 'c', 'brainteaser']",1
1097,Stream of Characters,"['implement', 'streamchecker', 'class', 'init', 'data', 'structure', 'given', 'returns', 'true', 'k', 'last', 'queried', 'order', 'oldest', 'including', 'letter', 'spell', 'one', 'words', 'given', 'streamchecker', 'streamchecker', 'new', 'init', 'return', 'return', 'return', 'return', 'return', 'return', 'return', 'return', 'return', 'return', 'return', 'return', 'words', 'consist', 'lowercase', 'english', 'queries', 'consist', 'lowercase', 'english', 'the', 'number', 'queries', 'trie']",3
1096,Maximum Sum of Two Non-Overlapping Subarrays,"['given', 'array', 'a', 'return', 'maximum', 'sum', 'elements', 'two', 'subarray', 'could', 'occur', 'largest', 'v', 'l', 'j', 'j', 'm', 'j', 'j', 'm', 'l', 'a', 'l', 'm', 'one', 'choice', 'subarrays', 'length', 'length', 'a', 'l', 'm', 'one', 'choice', 'subarrays', 'length', 'length', 'a', 'l', 'm', 'one', 'choice', 'subarrays', 'length', 'length', 'l', 'm', 'l', 'm', 'array']",2
1095,Two City Scheduling,"['there', 'people', 'company', 'planning', 'the', 'cost', 'flying', 'person', 'city', 'a', 'cost', 'flying', 'person', 'city', 'b', 'return', 'minimum', 'cost', 'fly', 'every', 'person', 'city', 'exactly', 'n', 'people', 'arrive', 'the', 'first', 'person', 'goes', 'city', 'a', 'cost', 'the', 'second', 'person', 'goes', 'city', 'a', 'cost', 'the', 'third', 'person', 'goes', 'city', 'b', 'cost', 'the', 'fourth', 'person', 'goes', 'city', 'b', 'cost', 'the', 'total', 'minimum', 'cost', 'half', 'people', 'interviewing', 'it', 'guaranteed', 'greedy']",1
1094,Matrix Cells in Distance Order,"['we', 'given', 'matrix', 'r', 'rows', 'c', 'columns', 'cells', 'integer', 'r', 'r', 'c', 'given', 'cell', 'matrix', 'return', 'coordinates', 'cells', 'sorted', 'distance', 'smallest', 'distance', 'largest', 'distance', 'two', 'cells', 'manhattan', 'may', 'return', 'answer', 'order', 'satisfies', 'r', 'c', 'the', 'distances', 'cells', 'r', 'c', 'the', 'distances', 'cells', 'the', 'answer', 'would', 'also', 'accepted', 'r', 'c', 'the', 'distances', 'cells', 'there', 'answers', 'would', 'also', 'accepted', 'r', 'c', 'r', 'c', 'sort']",1
1093,Recover a Tree From Preorder Traversal,"['we', 'run', 'first', 'search', 'root', 'binary', 'at', 'node', 'output', 'd', 'dashes', 'd', 'depth', 'output', 'value', 'depth', 'node', 'depth', 'immediate', 'child', 'the', 'depth', 'root', 'node', 'if', 'node', 'one', 'child', 'guaranteed', 'left', 'given', 'output', 's', 'recover', 'tree', 'return', 'the', 'number', 'nodes', 'original', 'tree', 'each', 'node', 'value', 'tree', 'depth-first search']",3
1092,Maximum Difference Between Node and Ancestor,"['given', 'root', 'binary', 'find', 'maximum', 'value', 'v', 'exists', 'different', 'nodes', 'a', 'b', 'v', 'a', 'ancestor', 'node', 'a', 'ancestor', 'b', 'child', 'a', 'equal', 'child', 'a', 'ancestor', 'we', 'various', 'given', 'among', 'possible', 'maximum', 'value', 'obtained', 'the', 'number', 'nodes', 'tree', 'each', 'node', 'value', 'tree', 'depth-first search']",2
1087,Longest Arithmetic Sequence,"['given', 'array', 'a', 'return', 'length', 'longest', 'arithmetic', 'subsequence', 'recall', 'subsequence', 'a', 'list', 'sequence', 'arithmetic', 'value', 'the', 'whole', 'array', 'arithmetic', 'sequence', 'steps', 'length', 'the', 'longest', 'arithmetic', 'subsequence', 'the', 'longest', 'arithmetic', 'subsequence', 'dynamic programming']",2
1086,Divisor Game,"['alice', 'bob', 'take', 'turns', 'playing', 'alice', 'starting', 'number', 'on', 'player', 'makes', 'x', 'x', 'n', 'n', 'x', 'chalkboard', 'n', 'player', 'cannot', 'make', 'lose', 'return', 'true', 'alice', 'wins', 'assuming', 'players', 'play', 'alice', 'chooses', 'bob', 'alice', 'chooses', 'bob', 'chooses', 'alice', 'n', 'math', 'dynamic programming']",1
1081,Video Stitching,"['you', 'given', 'series', 'video', 'clips', 'sporting', 'event', 'lasted', 't', 'video', 'clips', 'overlapping', 'varied', 'each', 'video', 'clip', 'starts', 'time', 'ends', 'time', 'we', 'cut', 'clips', 'segments', 'clip', 'cut', 'return', 'minimum', 'number', 'clips', 'needed', 'cut', 'clips', 'segments', 'cover', 'entire', 'sporting', 'event', 'if', 'task', 'return', 'clips', 't', 'we', 'take', 'clips', 'total', 'reconstruct', 'sporting', 'event', 'we', 'cut', 'segments', 'now', 'segments', 'cover', 'sporting', 'event', 'clips', 't', 'we', 'cover', 'clips', 't', 'we', 'take', 'clips', 'clips', 't', 'notice', 'extra', 'video', 'event', 't', 'dynamic programming']",2
1080,Camelcase Matching,"['a', 'query', 'word', 'matches', 'given', 'pattern', 'insert', 'lowercase', 'letters', 'pattern', 'word', 'equals', 'may', 'insert', 'character', 'may', 'insert', 'given', 'list', 'return', 'answer', 'list', 'true', 'matches', 'queries', 'pattern', 'generated', 'like', 'generated', 'like', 'generated', 'like', 'queries', 'pattern', 'generated', 'like', 'generated', 'like', 'queries', 'pattern', 'generated', 'like', 'all', 'strings', 'consists', 'lower', 'upper', 'case', 'english', 'string', 'trie']",2
1079,Sum of Root To Leaf Binary Numbers,"['given', 'binary', 'node', 'value', 'each', 'path', 'represents', 'binary', 'number', 'starting', 'significant', 'for', 'path', 'could', 'represent', 'for', 'leaves', 'consider', 'numbers', 'represented', 'root', 'return', 'sum', 'the', 'number', 'nodes', 'tree', 'the', 'answer', 'exceed', 'tree']",1
1078,Remove Outermost Parentheses,"['a', 'valid', 'parentheses', 'string', 'either', 'empty', 'a', 'a', 'a', 'b', 'valid', 'parentheses', 'represents', 'string', 'for', 'valid', 'parentheses', 'a', 'valid', 'parentheses', 'string', 's', 'primitive', 'exist', 'way', 'split', 's', 'a', 'b', 'nonempty', 'valid', 'parentheses', 'given', 'valid', 'parentheses', 'string', 'consider', 'primitive', 's', 'primitive', 'valid', 'parentheses', 'return', 's', 'removing', 'outermost', 'parentheses', 'every', 'primitive', 'string', 'primitive', 'decomposition', 'the', 'input', 'string', 'primitive', 'decomposition', 'after', 'removing', 'outer', 'parentheses', 'the', 'input', 'string', 'primitive', 'decomposition', 'after', 'removing', 'outer', 'parentheses', 'the', 'input', 'string', 'primitive', 'decomposition', 'after', 'removing', 'outer', 'parentheses', 's', 'valid', 'parentheses', 'string', 'stack']",1
1073,Number of Enclaves,"['given', 'array', 'cell', 'a', 'move', 'consists', 'walking', 'one', 'land', 'square', 'another', 'land', 'boundary', 'return', 'number', 'land', 'squares', 'grid', 'cannot', 'walk', 'boundary', 'grid', 'number', 'there', 'three', 'enclosed', 'one', 'enclosed', 'all', 'either', 'boundary', 'reach', 'all', 'rows', 'depth-first search']",2
1072,Next Greater Node In Linked List,"['we', 'given', 'linked', 'list', 'first', 'number', 'each', 'node', 'may', 'next', 'larger', 'j', 'j', 'smallest', 'possible', 'if', 'next', 'larger', 'value', 'return', 'array', 'note', 'example', 'arrays', 'serialization', 'linked', 'list', 'head', 'node', 'value', 'second', 'node', 'value', 'third', 'node', 'value', 'node', 'linked', 'the', 'given', 'list', 'length', 'range', 'linked list', 'stack']",2
1071,Binary Prefix Divisible By 5,"['given', 'array', 'a', 'consider', 'subarray', 'binary', 'number', 'return', 'list', 'divisible', 'the', 'input', 'numbers', 'binary', 'only', 'first', 'number', 'divisible', 'array']",1
1070,Convert to Base -2,"['given', 'number', 'return', 'string', 'consisting', 'represents', 'value', 'base', 'the', 'returned', 'string', 'must', 'leading', 'unless', 'string', 'n', 'math']",2
1065,Binary String With Substrings Representing 1 To N,"['given', 'binary', 'string', 's', 'string', 'consisting', 'positive', 'integer', 'return', 'true', 'every', 'integer', 'x', 'binary', 'representation', 'x', 'substring', 's', 'n', 's', 'n', 'n', 'string']",2
1064,Smallest Integer Divisible by K,"['given', 'positive', 'integer', 'need', 'find', 'integer', 'n', 'n', 'divisible', 'n', 'contains', 'digit', 'return', 'if', 'the', 'smallest', 'answer', 'n', 'length', 'there', 'positive', 'integer', 'n', 'divisible', 'the', 'smallest', 'answer', 'n', 'length', 'k', 'math']",2
1063,Best Sightseeing Pair,"['given', 'array', 'a', 'positive', 'represents', 'value', 'sightseeing', 'spots', 'distance', 'j', 'the', 'pair', 'sightseeing', 'spots', 'sum', 'values', 'sightseeing', 'minus', 'distance', 'return', 'maximum', 'score', 'pair', 'sightseeing', 'j', 'j', 'array']",2
1062,Partition Array Into Three Parts With Equal Sum,"['given', 'array', 'a', 'return', 'true', 'partition', 'array', 'three', 'parts', 'equal', 'partition', 'array', 'find', 'indexes', 'j', 'array']",1
1057,Numbers With Repeated Digits,"['given', 'positive', 'integer', 'return', 'number', 'positive', 'integers', 'less', 'equal', 'n', 'least', 'repeated', 'the', 'positive', 'number', 'least', 'repeated', 'digit', 'the', 'positive', 'numbers', 'atleast', 'repeated', 'digit', 'n', 'math', 'dynamic programming']",3
1056,Capacity To Ship Packages Within D Days,"['a', 'conveyor', 'belt', 'packages', 'must', 'shipped', 'one', 'port', 'another', 'within', 'd', 'the', 'package', 'conveyor', 'belt', 'weight', 'each', 'load', 'ship', 'packages', 'conveyor', 'belt', 'order', 'given', 'we', 'may', 'load', 'weight', 'maximum', 'weight', 'capacity', 'return', 'least', 'weight', 'capacity', 'ship', 'result', 'packages', 'conveyor', 'belt', 'shipped', 'within', 'd', 'weights', 'd', 'a', 'ship', 'capacity', 'minimum', 'ship', 'packages', 'days', 'like', 'note', 'cargo', 'must', 'shipped', 'order', 'using', 'ship', 'capacity', 'splitting', 'packages', 'parts', 'like', 'weights', 'd', 'a', 'ship', 'capacity', 'minimum', 'ship', 'packages', 'days', 'like', 'weights', 'd', 'd', 'array', 'binary search']",2
1055,Pairs of Songs With Total Durations Divisible by 60,"['in', 'list', 'duration', 'return', 'number', 'pairs', 'songs', 'seconds', 'divisible', 'want', 'number', 'j', 'three', 'pairs', 'total', 'duration', 'divisible', 'total', 'duration', 'total', 'duration', 'total', 'duration', 'all', 'three', 'pairs', 'total', 'duration', 'divisible', 'array']",1
1054,Complement of Base 10 Integer,"['every', 'integer', 'binary', 'for', 'represented', 'note', 'except', 'n', 'leading', 'zeroes', 'the', 'binary', 'number', 'binary', 'get', 'changing', 'every', 'for', 'complement', 'binary', 'for', 'given', 'number', 'n', 'return', 'complement', 'binary', 'representation', 'complement', 'complement', 'complement', 'n', 'math']",1
1050,Construct Binary Search Tree from Preorder Traversal,"['return', 'root', 'node', 'binary', 'search', 'tree', 'matches', 'given', 'preorder', 'binary', 'search', 'binary', 'tree', 'every', 'descendant', 'value', 'descendant', 'value', 'also', 'recall', 'preorder', 'value', 'traverses', 'traverses', 'the', 'values', 'preorder', 'tree']",2
1049,Minimum Domino Rotations For Equal Row,"['in', 'row', 'represent', 'top', 'bottom', 'halves', 'domino', 'tile', 'two', 'numbers', 'one', 'half', 'we', 'may', 'rotate', 'swap', 'return', 'minimum', 'number', 'rotations', 'values', 'a', 'values', 'if', 'cannot', 'return', 'a', 'b', 'the', 'first', 'figure', 'represents', 'dominoes', 'given', 'a', 'if', 'rotate', 'second', 'fourth', 'make', 'every', 'value', 'top', 'row', 'equal', 'indicated', 'second', 'a', 'b', 'in', 'possible', 'rotate', 'dominoes', 'make', 'one', 'row', 'values', 'array', 'greedy']",2
1048,Clumsy Factorial,"['factorial', 'positive', 'integer', 'product', 'positive', 'integers', 'less', 'equal', 'for', 'we', 'instead', 'make', 'clumsy', 'integers', 'decreasing', 'multiply', 'operations', 'fixed', 'rotation', 'divide', 'add', 'subtract', 'for', 'operations', 'still', 'applied', 'using', 'usual', 'order', 'operations', 'multiplication', 'division', 'steps', 'addition', 'subtraction', 'multiplication', 'division', 'steps', 'processed', 'left', 'division', 'use', 'floor', 'this', 'guarantees', 'result', 'implement', 'defined', 'given', 'integer', 'returns', 'clumsy', 'factorial', 'n', 'answer', 'answer', 'guaranteed', 'fit', 'within', 'math']",2
1047,Maximize Sum Of Array After K Negations,"['given', 'array', 'a', 'array', 'following', 'choose', 'repeat', 'process', 'k', 'times', 'may', 'choose', 'index', 'multiple', 'return', 'largest', 'possible', 'sum', 'array', 'modifying', 'a', 'k', 'choose', 'indices', 'a', 'becomes', 'a', 'k', 'choose', 'indices', 'a', 'becomes', 'a', 'k', 'choose', 'indices', 'a', 'becomes', 'k', 'greedy']",1
1046,Max Consecutive Ones III,"['given', 'array', 'may', 'change', 'return', 'length', 'longest', 'subarray', 'contains', 'a', 'k', 'bolded', 'numbers', 'flipped', 'the', 'longest', 'subarray', 'a', 'k', 'bolded', 'numbers', 'flipped', 'the', 'longest', 'subarray', 'k', 'two pointers', 'sliding window']",2
1045,Check If Word Is Valid After Substitutions,"['we', 'given', 'string', 'from', 'valid', 'string', 'may', 'two', 'pieces', 'x', 'y', 'x', 'y', 'concatenated', 'equal', 'y', 'may', 'x', 'y', 'also', 'if', 'example', 's', 'examples', 'valid', 'strings', 'examples', 'return', 'true', 'given', 'we', 'start', 'valid', 'string', 'then', 'insert', 'another', 'resulting', 'valid', 'consecutive', 'insertings', 'then', 'insert', 'last', 'resulting', 'false', 'string', 'stack']",2
1044,Find Common Characters,"['given', 'strings', 'made', 'lowercase', 'return', 'list', 'characters', 'show', 'strings', 'within', 'list', 'character', 'occurs', 'strings', 'need', 'include', 'character', 'three', 'final', 'you', 'may', 'return', 'answer', 'lowercase', 'letter', 'array', 'hash table']",1
1043,Grid Illumination,"['on', 'n', 'x', 'n', 'grid', 'cell', 'x', 'n', 'n', 'number', 'lamps', 'tells', 'us', 'location', 'lamp', 'each', 'lamp', 'illuminates', 'every', 'square', 'diagonals', 'queen', 'for', 'answer', 'query', 'cell', 'else', 'after', 'query', 'order', 'given', 'turn', 'cell', 'adjacent', 'share', 'corner', 'edge', 'cell', 'return', 'array', 'equal', 'answer', 'query', 'n', 'lamps', 'queries', 'before', 'performing', 'first', 'query', 'lamps', 'the', 'grid', 'representing', 'cells', 'lit', 'looks', 'like', 'top', 'left', 'bottom', 'right', 'then', 'query', 'returns', 'cell', 'after', 'lamp', 'turns', 'grid', 'looks', 'like', 'before', 'performing', 'second', 'query', 'lamp', 'now', 'query', 'returns', 'cell', 'longer', 'n', 'hash table']",3
1042,Minimum Cost to Merge Stones,"['there', 'n', 'piles', 'stones', 'arranged', 'the', 'pile', 'a', 'move', 'consists', 'merging', 'piles', 'one', 'cost', 'move', 'equal', 'total', 'number', 'stones', 'k', 'find', 'minimum', 'cost', 'merge', 'piles', 'stones', 'one', 'if', 'return', 'stones', 'k', 'we', 'start', 'we', 'merge', 'cost', 'left', 'we', 'merge', 'cost', 'left', 'we', 'merge', 'cost', 'left', 'the', 'total', 'cost', 'minimum', 'stones', 'k', 'after', 'merge', 'piles', 'merge', 'so', 'task', 'stones', 'k', 'we', 'start', 'we', 'merge', 'cost', 'left', 'we', 'merge', 'cost', 'left', 'the', 'total', 'cost', 'minimum', 'k', 'dynamic programming']",3
1041,Available Captures for Rook,"['on', 'x', 'one', 'white', 'there', 'also', 'may', 'empty', 'white', 'black', 'these', 'given', 'characters', 'uppercase', 'characters', 'represent', 'white', 'lowercase', 'characters', 'represent', 'black', 'the', 'rook', 'moves', 'rules', 'chooses', 'one', 'four', 'cardinal', 'directions', 'moves', 'direction', 'chooses', 'reaches', 'edge', 'captures', 'opposite', 'colored', 'pawn', 'moving', 'square', 'rooks', 'cannot', 'move', 'square', 'friendly', 'return', 'number', 'pawns', 'rook', 'capture', 'one', 'in', 'example', 'rook', 'able', 'capture', 'bishops', 'blocking', 'rook', 'capture', 'the', 'rook', 'capture', 'pawns', 'positions', 'either', 'there', 'exactly', 'one', 'cell', 'array']",1
1040,Maximum Binary Tree II,"['we', 'given', 'maximum', 'tree', 'every', 'node', 'value', 'greater', 'value', 'just', 'previous', 'given', 'constructed', 'recursively', 'if', 'a', 'return', 'let', 'largest', 'element', 'create', 'root', 'node', 'value', 'the', 'left', 'child', 'root', 'the', 'right', 'child', 'return', 'note', 'given', 'a', 'root', 'node', 'root', 'suppose', 'b', 'copy', 'a', 'value', 'val', 'appended', 'it', 'guaranteed', 'b', 'unique', 'return', 'root', 'val', 'a', 'b', 'root', 'val', 'a', 'b', 'root', 'val', 'a', 'b', 'tree']",2
1039,Find the Town Judge,"['in', 'n', 'people', 'labelled', 'there', 'rumor', 'one', 'people', 'secretly', 'town', 'if', 'judge', 'the', 'town', 'judge', 'trusts', 'everybody', 'town', 'trusts', 'town', 'there', 'exactly', 'one', 'person', 'satisfies', 'properties', 'you', 'given', 'array', 'pairs', 'representing', 'person', 'labelled', 'trusts', 'person', 'labelled', 'if', 'town', 'judge', 'exists', 'return', 'label', 'town', 'return', 'n', 'trust', 'n', 'trust', 'n', 'trust', 'n', 'trust', 'n', 'trust', 'n', 'different', 'n', 'graph']",1
1038,Number of Squareful Arrays,"['given', 'array', 'a', 'array', 'squareful', 'every', 'pair', 'adjacent', 'sum', 'perfect', 'return', 'number', 'permutations', 'a', 'two', 'permutations', 'differ', 'index', 'valid', 'math', 'backtracking', 'graph']",3
1037,Minimum Number of K Consecutive Bit Flips,"['in', 'array', 'a', 'containing', 'choosing', 'subarray', 'length', 'k', 'simultaneously', 'changing', 'every', 'subarray', 'every', 'subarray', 'return', 'minimum', 'number', 'flips', 'required', 'if', 'return', 'a', 'k', 'flip', 'flip', 'a', 'k', 'matter', 'flip', 'subarrays', 'size', 'make', 'array', 'become', 'a', 'k', 'flip', 'becomes', 'flip', 'becomes', 'flip', 'becomes', 'k', 'greedy', 'sliding window']",3
1036,Rotting Oranges,"['in', 'given', 'cell', 'one', 'value', 'representing', 'empty', 'value', 'representing', 'fresh', 'value', 'representing', 'rotten', 'every', 'fresh', 'orange', 'adjacent', 'rotten', 'orange', 'becomes', 'return', 'minimum', 'number', 'minutes', 'must', 'elapse', 'cell', 'fresh', 'if', 'return', 'the', 'orange', 'bottom', 'left', 'corner', 'column', 'never', 'rotting', 'happens', 'since', 'already', 'fresh', 'oranges', 'minute', 'answer', 'breadth-first search']",1
1035,Cousins in Binary Tree,"['in', 'binary', 'root', 'node', 'depth', 'children', 'depth', 'k', 'node', 'depth', 'two', 'nodes', 'binary', 'tree', 'cousins', 'different', 'we', 'given', 'root', 'binary', 'tree', 'unique', 'values', 'two', 'different', 'nodes', 'nodes', 'corresponding', 'values', 'x', 'root', 'x', 'root', 'x', 'root', 'x', 'false', 'the', 'number', 'nodes', 'tree', 'each', 'node', 'unique', 'integer', 'value', 'tree', 'breadth-first search']",1
1034,Subarrays with K Different Integers,"['given', 'array', 'a', 'positive', 'call', 'necessarily', 'subarray', 'a', 'good', 'number', 'different', 'integers', 'subarray', 'exactly', 'different', 'return', 'number', 'good', 'subarrays', 'a', 'k', 'subarrays', 'formed', 'exactly', 'different', 'a', 'k', 'subarrays', 'formed', 'exactly', 'different', 'k', 'hash table', 'two pointers', 'sliding window']",3
1033,Broken Calculator,"['on', 'broken', 'calculator', 'number', 'showing', 'perform', 'two', 'multiply', 'number', 'display', 'subtract', 'number', 'calculator', 'displaying', 'number', 'return', 'minimum', 'number', 'operations', 'needed', 'display', 'number', 'x', 'y', 'use', 'double', 'operation', 'decrement', 'operation', 'x', 'y', 'use', 'decrement', 'double', 'x', 'y', 'use', 'decrement', 'double', 'x', 'y', 'use', 'decrement', 'operations', 'x', 'y', 'math', 'greedy']",2
1032,Satisfiability of Equality Equations,"['given', 'array', 'strings', 'represent', 'relationships', 'string', 'length', 'takes', 'one', 'two', 'different', 'b', 'lowercase', 'letters', 'necessarily', 'represent', 'variable', 'return', 'possible', 'assign', 'integers', 'variable', 'satisfy', 'given', 'if', 'assign', 'b', 'first', 'equation', 'there', 'way', 'assign', 'variables', 'satisfy', 'we', 'could', 'assign', 'b', 'satisfy', 'lowercase', 'letters', 'either', 'union find', 'graph']",2
1031,Add to Array-Form of Integer,"['for', 'integer', 'array', 'digits', 'left', 'right', 'for', 'x', 'array', 'form', 'given', 'a', 'return', 'integer', 'a', 'k', 'a', 'k', 'a', 'k', 'a', 'k', 'k', 'if', 'array']",1
1030,Smallest String Starting From Leaf,"['given', 'root', 'binary', 'node', 'value', 'representing', 'letters', 'value', 'represents', 'value', 'represents', 'find', 'lexicographically', 'smallest', 'string', 'starts', 'leaf', 'tree', 'ends', 'shorter', 'prefix', 'string', 'lexicographically', 'lexicographically', 'smaller', 'a', 'leaf', 'node', 'node', 'the', 'number', 'nodes', 'given', 'tree', 'each', 'node', 'tree', 'value', 'tree', 'depth-first search']",2
1029,Vertical Order Traversal of a Binary Tree,"['given', 'binary', 'return', 'vertical', 'order', 'traversal', 'for', 'node', 'position', 'left', 'right', 'children', 'positions', 'running', 'vertical', 'line', 'x', 'x', 'whenever', 'vertical', 'line', 'touches', 'report', 'values', 'nodes', 'order', 'top', 'bottom', 'y', 'if', 'two', 'nodes', 'value', 'node', 'reported', 'first', 'value', 'return', 'reports', 'order', 'x', 'every', 'report', 'list', 'values', 'without', 'loss', 'assume', 'root', 'node', 'position', 'node', 'value', 'occurs', 'position', 'the', 'nodes', 'values', 'occur', 'positions', 'the', 'node', 'value', 'occurs', 'position', 'the', 'node', 'value', 'occurs', 'position', 'the', 'node', 'value', 'node', 'value', 'position', 'according', 'given', 'report', 'node', 'value', 'comes', 'first', 'since', 'smaller', 'the', 'tree', 'each', 'value', 'hash table', 'tree']",2
1028,Interval List Intersections,"['given', 'two', 'closed', 'list', 'intervals', 'pairwise', 'disjoint', 'sorted', 'return', 'intersection', 'two', 'interval', 'closed', 'interval', 'set', 'real', 'numbers', 'x', 'x', 'two', 'closed', 'intervals', 'set', 'real', 'numbers', 'either', 'represented', 'closed', 'for', 'intersection', 'a', 'b', 'the', 'inputs', 'desired', 'output', 'lists', 'arrays', 'types', 'changed', 'april', 'please', 'reset', 'default', 'code', 'definition', 'get', 'new', 'method', 'two pointers']",2
1027,Sum of Even Numbers After Queries,"['we', 'array', 'a', 'array', 'for', 'val', 'add', 'answer', 'query', 'sum', 'even', 'values', 'given', 'index', 'query', 'permanently', 'modifies', 'array', 'return', 'answer', 'your', 'answer', 'array', 'answer', 'a', 'queries', 'at', 'array', 'after', 'adding', 'array', 'sum', 'even', 'values', 'after', 'adding', 'array', 'sum', 'even', 'values', 'after', 'adding', 'array', 'sum', 'even', 'values', 'after', 'adding', 'array', 'sum', 'even', 'values', 'array']",1
1026,String Without AAA or BBB,"['given', 'two', 'integers', 'a', 'return', 'string', 's', 's', 'length', 'a', 'b', 'contains', 'exactly', 'a', 'exactly', 'b', 'the', 'occur', 'the', 'substring', 'occur', 'a', 'b', 'correct', 'a', 'b', 'a', 'b', 'it', 'guaranteed', 's', 'exists', 'given', 'a', 'greedy']",2
1025,Minimum Cost For Tickets,"['in', 'country', 'popular', 'train', 'planned', 'train', 'travelling', 'one', 'year', 'the', 'days', 'year', 'travel', 'given', 'array', 'each', 'day', 'integer', 'train', 'tickets', 'sold', 'different', 'pass', 'sold', 'pass', 'sold', 'pass', 'sold', 'the', 'passes', 'allow', 'many', 'days', 'consecutive', 'for', 'get', 'pass', 'day', 'travel', 'day', 'return', 'minimum', 'number', 'dollars', 'need', 'travel', 'every', 'day', 'given', 'list', 'days', 'costs', 'for', 'one', 'way', 'buy', 'passes', 'lets', 'travel', 'travel', 'on', 'day', 'bought', 'pass', 'covered', 'day', 'on', 'day', 'bought', 'pass', 'covered', 'days', 'on', 'day', 'bought', 'pass', 'covered', 'day', 'in', 'total', 'spent', 'covered', 'days', 'days', 'costs', 'for', 'one', 'way', 'buy', 'passes', 'lets', 'travel', 'travel', 'on', 'day', 'bought', 'pass', 'covered', 'days', 'on', 'day', 'bought', 'pass', 'covered', 'day', 'in', 'total', 'spent', 'covered', 'days', 'days', 'strictly', 'increasing', 'dynamic programming']",2
1024,Triples with Bitwise AND Equal To Zero,"['given', 'array', 'integers', 'find', 'number', 'indices', 'j', 'k', 'we', 'could', 'choose', 'following', 'k', 'dynamic programming']",3
1023,Time Based Key-Value Store,"['create', 'timebased', 'store', 'supports', 'two', 'string', 'int', 'stores', 'key', 'along', 'given', 'int', 'returns', 'value', 'called', 'if', 'multiple', 'returns', 'one', 'largest', 'if', 'returns', 'empty', 'string', 'inputs', 'inputs', 'timemap', 'store', 'key', 'value', 'along', 'timestamp', 'output', 'output', 'since', 'value', 'corresponding', 'foo', 'timestamp', 'timestamp', 'value', 'timestamp', 'ie', 'output', 'inputs', 'inputs', 'all', 'strings', 'all', 'strings', 'the', 'timestamps', 'operations', 'strictly', 'timestamp', 'called', 'total', 'times', 'per', 'test', 'hash table', 'binary search']",2
1022,Unique Paths III,"['on', 'types', 'represents', 'starting', 'there', 'exactly', 'one', 'starting', 'represents', 'ending', 'there', 'exactly', 'one', 'ending', 'represents', 'empty', 'squares', 'walk', 'represents', 'obstacles', 'cannot', 'walk', 'return', 'number', 'starting', 'square', 'ending', 'walk', 'every', 'we', 'following', 'two', 'we', 'following', 'four', 'there', 'path', 'walks', 'every', 'empty', 'square', 'exactly', 'note', 'starting', 'ending', 'square', 'anywhere', 'backtracking', 'depth-first search']",3
1021,Distribute Coins in Binary Tree,"['given', 'root', 'binary', 'tree', 'n', 'tree', 'n', 'coins', 'in', 'one', 'may', 'choose', 'two', 'adjacent', 'nodes', 'move', 'one', 'coin', 'one', 'node', 'move', 'may', 'parent', 'child', 'return', 'number', 'moves', 'required', 'make', 'every', 'node', 'exactly', 'one', 'from', 'root', 'move', 'one', 'coin', 'left', 'one', 'coin', 'right', 'from', 'left', 'child', 'move', 'two', 'coins', 'root', 'two', 'move', 'one', 'coin', 'root', 'tree', 'right', 'n', 'n', 'tree', 'depth-first search']",2
1020,Longest Turbulent Subarray,"['a', 'subarray', 'a', 'said', 'turbulent', 'for', 'k', 'k', 'k', 'k', 'k', 'k', 'that', 'subarray', 'turbulent', 'comparison', 'sign', 'flips', 'adjacent', 'pair', 'elements', 'return', 'length', 'size', 'turbulent', 'subarray', 'array', 'dynamic programming', 'sliding window']",2
1019,Squares of a Sorted Array,"['given', 'array', 'integers', 'array', 'squares', 'sorted', 'sorted', 'array', 'two pointers']",1
1018,Largest Perimeter Triangle,"['given', 'array', 'a', 'positive', 'return', 'largest', 'perimeter', 'triangle', 'formed', 'if', 'impossible', 'form', 'return', 'math', 'sort']",1
1017,Odd Even Jump,"['you', 'given', 'integer', 'array', 'starting', 'make', 'series', 'the', 'series', 'called', 'odd', 'numbered', 'jumps', 'series', 'called', 'even', 'numbered', 'you', 'may', 'index', 'forward', 'index', 'following', 'during', 'odd', 'numbered', 'jumps', 'jumps', 'jump', 'index', 'smallest', 'possible', 'if', 'multiple', 'indexes', 'jump', 'smallest', 'index', 'during', 'even', 'numbered', 'jumps', 'jumps', 'jump', 'index', 'if', 'multiple', 'indexes', 'jump', 'smallest', 'index', 'may', 'case', 'index', 'legal', 'a', 'starting', 'index', 'good', 'starting', 'reach', 'end', 'array', 'jumping', 'number', 'times', 'return', 'number', 'good', 'starting', 'from', 'starting', 'index', 'jump', 'smallest', 'among', 'greater', 'equal', 'jump', 'from', 'starting', 'index', 'jump', 'jump', 'from', 'starting', 'index', 'jump', 'reached', 'from', 'starting', 'index', 'reached', 'end', 'in', 'different', 'starting', 'indexes', 'reach', 'end', 'number', 'from', 'starting', 'index', 'make', 'jumps', 'during', 'jump', 'first', 'jump', 'smallest', 'value', 'greater', 'equal', 'during', 'jump', 'jump', 'largest', 'value', 'less', 'equal', 'also', 'largest', 'smaller', 'jump', 'during', 'jump', 'jump', 'smallest', 'value', 'greater', 'equal', 'we', 'jump', 'starting', 'index', 'in', 'similar', 'deduce', 'from', 'starting', 'index', 'jump', 'reach', 'from', 'starting', 'index', 'jump', 'jump', 'from', 'starting', 'index', 'jump', 'reach', 'from', 'starting', 'index', 'already', 'in', 'different', 'starting', 'indexes', 'reach', 'end', 'number', 'we', 'reach', 'end', 'starting', 'indexes', 'dynamic programming', 'stack', 'ordered map']",3
1016,Subarray Sums Divisible by K,"['given', 'array', 'a', 'return', 'number', 'subarrays', 'sum', 'divisible', 'a', 'k', 'there', 'subarrays', 'sum', 'divisible', 'k', 'k', 'array', 'hash table']",2
1014,K Closest Points to Origin,"['we', 'list', 'find', 'k', 'closest', 'points', 'origin', 'distance', 'two', 'points', 'plane', 'euclidean', 'you', 'may', 'return', 'answer', 'guaranteed', 'unique', 'order', 'points', 'k', 'the', 'distance', 'origin', 'the', 'distance', 'origin', 'since', 'closer', 'we', 'want', 'closest', 'k', 'points', 'answer', 'points', 'k', 'answer', 'would', 'also', 'k', 'divide and conquer', 'heap', 'sort']",2
1013,Fibonacci Number,"['commonly', 'called', 'number', 'sum', 'two', 'preceding', 'starting', 'that', 'n', 'given', 'calculate', 'n', 'array']",1
1012,Equal Rational Numbers,"['given', 'two', 'strings', 's', 'represents', 'rational', 'return', 'true', 'represent', 'the', 'strings', 'may', 'use', 'parentheses', 'denote', 'repeating', 'part', 'rational', 'in', 'general', 'rational', 'number', 'represented', 'using', 'the', 'number', 'one', 'following', 'three', 'the', 'repeating', 'portion', 'decimal', 'expansion', 'conventionally', 'denoted', 'within', 'pair', 'round', 'for', 'both', 'correct', 'representations', 's', 't', 'because', 'represents', 'represents', 'strings', 'represent', 's', 't', 's', 't', 'represents', 'repeated', 'equals', 'link', 'represents', 'number', 'formed', 'each', 'part', 'consists', 'the', 'begin', 'restriction', 'digits', 'math']",3
1011,Flip Binary Tree To Match Preorder Traversal,"['given', 'binary', 'tree', 'n', 'node', 'different', 'value', 'a', 'node', 'binary', 'tree', 'swapping', 'left', 'child', 'right', 'child', 'consider', 'sequence', 'values', 'reported', 'preorder', 'traversal', 'starting', 'call', 'sequence', 'n', 'values', 'preorder', 'node', 'means', 'report', 'current', 'left', 'right', 'our', 'goal', 'flip', 'least', 'number', 'nodes', 'tree', 'voyage', 'tree', 'matches', 'voyage', 'if', 'return', 'values', 'nodes', 'you', 'may', 'return', 'answer', 'if', 'cannot', 'return', 'list', 'root', 'voyage', 'root', 'voyage', 'root', 'voyage', 'n', 'tree', 'depth-first search']",2
1010,Powerful Integers,"['given', 'two', 'positive', 'integers', 'x', 'integer', 'equal', 'integers', 'j', 'return', 'list', 'powerful', 'integers', 'value', 'less', 'equal', 'you', 'may', 'return', 'answer', 'in', 'value', 'occur', 'x', 'bound', 'x', 'bound', 'x', 'hash table', 'math']",1
1009,Pancake Sorting,"['given', 'array', 'perform', 'choose', 'positive', 'reverse', 'order', 'first', 'k', 'elements', 'we', 'want', 'perform', 'zero', 'pancake', 'flips', 'one', 'another', 'sort', 'array', 'return', 'corresponding', 'sequence', 'pancake', 'flips', 'sort', 'answer', 'sorts', 'array', 'within', 'flips', 'judged', 'we', 'perform', 'pancake', 'k', 'values', 'starting', 'a', 'after', 'flip', 'a', 'after', 'flip', 'a', 'after', 'flip', 'a', 'after', 'flip', 'a', 'the', 'input', 'already', 'need', 'flip', 'note', 'would', 'also', 'permutation', 'array', 'sort']",2
1008,Binary Tree Cameras,"['given', 'binary', 'install', 'cameras', 'nodes', 'each', 'camera', 'node', 'monitor', 'immediate', 'calculate', 'minimum', 'number', 'cameras', 'needed', 'monitor', 'nodes', 'one', 'camera', 'enough', 'monitor', 'nodes', 'placed', 'at', 'least', 'two', 'cameras', 'needed', 'monitor', 'nodes', 'the', 'image', 'shows', 'one', 'valid', 'configurations', 'camera', 'the', 'number', 'nodes', 'given', 'tree', 'every', 'node', 'value', 'dynamic programming', 'tree', 'depth-first search']",3
1007,Numbers With Same Consecutive Differences,"['return', 'integers', 'length', 'n', 'absolute', 'difference', 'every', 'two', 'consecutive', 'digits', 'note', 'every', 'number', 'answer', 'must', 'leading', 'zeros', 'except', 'number', 'for', 'one', 'leading', 'zero', 'you', 'may', 'return', 'answer', 'n', 'k', 'note', 'valid', 'leading', 'n', 'k', 'n', 'k', 'dynamic programming']",2
1006,Vowel Spellchecker,"['given', 'want', 'implement', 'spellchecker', 'converts', 'query', 'word', 'correct', 'for', 'given', 'query', 'spell', 'checker', 'handles', 'two', 'categories', 'spelling', 'if', 'query', 'matches', 'word', 'wordlist', 'query', 'word', 'returned', 'case', 'case', 'wordlist', 'query', 'correct', 'wordlist', 'query', 'correct', 'wordlist', 'query', 'correct', 'vowel', 'if', 'replacing', 'vowels', 'query', 'word', 'vowel', 'matches', 'word', 'wordlist', 'query', 'word', 'returned', 'case', 'match', 'wordlist', 'query', 'correct', 'wordlist', 'query', 'correct', 'wordlist', 'query', 'correct', 'in', 'spell', 'checker', 'operates', 'following', 'precedence', 'when', 'query', 'exactly', 'matches', 'word', 'wordlist', 'return', 'word', 'when', 'query', 'matches', 'word', 'return', 'first', 'match', 'when', 'query', 'matches', 'word', 'vowel', 'return', 'first', 'match', 'if', 'query', 'matches', 'return', 'empty', 'given', 'return', 'words', 'correct', 'word', 'query', 'wordlist', 'queries', 'all', 'strings', 'wordlist', 'queries', 'consist', 'hash table', 'string']",2
1005,Univalued Binary Tree,"['a', 'binary', 'tree', 'univalued', 'every', 'node', 'tree', 'return', 'given', 'tree', 'the', 'number', 'nodes', 'given', 'tree', 'range', 'each', 'value', 'integer', 'range', 'tree']",1
1004,Least Operators to Express Number,"['given', 'single', 'positive', 'integer', 'write', 'expression', 'form', 'x', 'x', 'x', 'x', 'operator', 'either', 'division', 'for', 'x', 'might', 'write', 'value', 'when', 'writing', 'adhere', 'following', 'the', 'division', 'operator', 'returns', 'rational', 'there', 'parentheses', 'placed', 'we', 'use', 'usual', 'order', 'multiplication', 'division', 'happens', 'addition', 'allowed', 'use', 'unary', 'for', 'valid', 'expression', 'uses', 'uses', 'we', 'would', 'like', 'write', 'expression', 'least', 'number', 'operators', 'expression', 'equals', 'given', 'return', 'least', 'number', 'operators', 'x', 'target', 'the', 'expression', 'contains', 'x', 'target', 'the', 'expression', 'contains', 'x', 'target', 'the', 'expression', 'contains', 'x', 'target', 'math', 'dynamic programming']",3
1003,Minimum Area Rectangle II,"['given', 'set', 'points', 'determine', 'minimum', 'area', 'rectangle', 'formed', 'sides', 'necessarily', 'parallel', 'x', 'if', 'return', 'the', 'minimum', 'area', 'rectangle', 'occurs', 'area', 'the', 'minimum', 'area', 'rectangle', 'occurs', 'area', 'there', 'possible', 'rectangle', 'form', 'the', 'minimum', 'area', 'rectangle', 'occurs', 'area', 'all', 'points', 'answers', 'within', 'actual', 'value', 'accepted', 'math', 'geometry']",2
1002,Maximum Width Ramp,"['given', 'array', 'a', 'tuple', 'the', 'width', 'j', 'find', 'maximum', 'width', 'ramp', 'if', 'one', 'return', 'the', 'maximum', 'width', 'ramp', 'achieved', 'the', 'maximum', 'width', 'ramp', 'achieved', 'array']",2
1001,N-Repeated Element in Size 2N Array,"['in', 'array', 'a', 'size', 'unique', 'exactly', 'one', 'elements', 'repeated', 'n', 'return', 'element', 'repeated', 'n', 'even', 'hash table']",1
1000,Delete Columns to Make Sorted III,"['we', 'given', 'n', 'lowercase', 'letter', 'may', 'choose', 'set', 'deletion', 'delete', 'characters', 'for', 'array', 'a', 'deletion', 'indices', 'final', 'array', 'deletions', 'suppose', 'chose', 'set', 'deletion', 'indices', 'd', 'final', 'array', 'every', 'element', 'for', 'lexicographic', 'order', 'lexicographic', 'order', 'return', 'minimum', 'possible', 'value', 'after', 'deleting', 'columns', 'final', 'array', 'a', 'both', 'rows', 'individually', 'lexicographic', 'order', 'note', 'array', 'a', 'necessarily', 'lexicographic', 'if', 'delete', 'less', 'row', 'lexicographically', 'all', 'rows', 'already', 'lexicographically', 'dynamic programming']",3
999,Regions Cut By Slashes,"['in', 'n', 'x', 'composed', 'x', 'x', 'square', 'consists', 'blank', 'these', 'characters', 'divide', 'square', 'contiguous', 'backslash', 'characters', 'represented', 'return', 'number', 'the', 'grid', 'the', 'grid', 'characters', 'refers', 'refers', 'the', 'grid', 'characters', 'refers', 'refers', 'the', 'grid', 'the', 'grid', 'either', 'depth-first search', 'union find', 'graph']",2
998,Check Completeness of a Binary Tree,"['given', 'binary', 'determine', 'complete', 'binary', 'definition', 'complete', 'binary', 'tree', 'in', 'complete', 'binary', 'tree', 'every', 'except', 'possibly', 'completely', 'nodes', 'last', 'level', 'far', 'left', 'it', 'nodes', 'inclusive', 'last', 'level', 'every', 'level', 'last', 'full', 'levels', 'nodes', 'last', 'level', 'far', 'left', 'the', 'node', 'value', 'far', 'left', 'the', 'tree', 'tree']",2
994,Prison Cells After N Days,"['there', 'prison', 'cells', 'cell', 'either', 'occupied', 'each', 'whether', 'cell', 'occupied', 'vacant', 'changes', 'according', 'following', 'if', 'cell', 'two', 'adjacent', 'neighbors', 'occupied', 'cell', 'becomes', 'becomes', 'prison', 'first', 'last', 'cells', 'row', 'two', 'adjacent', 'we', 'describe', 'current', 'state', 'following', 'cell', 'else', 'given', 'initial', 'state', 'return', 'state', 'prison', 'n', 'days', 'n', 'changes', 'described', 'cells', 'n', 'the', 'following', 'table', 'summarizes', 'state', 'prison', 'day', 'day', 'day', 'day', 'day', 'day', 'day', 'day', 'cells', 'n', 'n', 'hash table']",2
993,Tallest Billboard,"['you', 'installing', 'billboard', 'want', 'largest', 'the', 'billboard', 'two', 'steel', 'one', 'each', 'steel', 'support', 'must', 'equal', 'you', 'collection', 'rods', 'welded', 'for', 'rods', 'lengths', 'weld', 'together', 'make', 'support', 'length', 'return', 'largest', 'possible', 'height', 'billboard', 'if', 'cannot', 'support', 'return', 'we', 'two', 'disjoint', 'subsets', 'sum', 'we', 'two', 'disjoint', 'subsets', 'sum', 'the', 'billboard', 'cannot', 'return', 'the', 'sum', 'rods', 'dynamic programming']",3
992,Delete Columns to Make Sorted II,"['we', 'given', 'n', 'lowercase', 'letter', 'may', 'choose', 'set', 'deletion', 'delete', 'characters', 'for', 'array', 'a', 'deletion', 'indices', 'final', 'array', 'deletions', 'suppose', 'chose', 'set', 'deletion', 'indices', 'd', 'final', 'array', 'elements', 'lexicographic', 'order', 'return', 'minimum', 'possible', 'value', 'after', 'deleting', 'first', 'a', 'now', 'a', 'lexicographic', 'order', 'we', 'require', 'least', 'deletion', 'since', 'initially', 'a', 'lexicographic', 'answer', 'a', 'already', 'lexicographic', 'need', 'delete', 'note', 'rows', 'a', 'necessarily', 'lexicographic', 'not', 'necessarily', 'true', 'we', 'delete', 'every', 'greedy']",2
991,Array of Doubled Pairs,"['given', 'array', 'integers', 'even', 'return', 'true', 'possible', 'reorder', 'every', 'we', 'take', 'two', 'form', 'even', 'array', 'hash table']",2
990,Verifying an Alien Dictionary,"['in', 'alien', 'surprisingly', 'also', 'use', 'english', 'lowercase', 'different', 'lowercase', 'given', 'sequence', 'alien', 'order', 'true', 'given', 'sorted', 'lexicographicaly', 'alien', 'words', 'order', 'as', 'comes', 'sequence', 'words', 'order', 'as', 'comes', 'hence', 'sequence', 'words', 'order', 'the', 'first', 'three', 'characters', 'second', 'string', 'shorter', 'according', 'lexicographical', 'rules', 'defined', 'blank', 'character', 'less', 'character', 'all', 'characters', 'order', 'english', 'lowercase', 'hash table']",1
989,Largest Component Size by Common Factor,"['given', 'unique', 'positive', 'integers', 'consider', 'following', 'there', 'labelled', 'there', 'edge', 'share', 'common', 'factor', 'greater', 'return', 'size', 'largest', 'connected', 'component', 'math', 'union find']",3
988,Flip Equivalent Binary Trees,"['for', 'binary', 'tree', 'define', 'flip', 'operation', 'choose', 'swap', 'left', 'right', 'child', 'a', 'binary', 'tree', 'flip', 'equivalent', 'binary', 'tree', 'y', 'make', 'x', 'equal', 'y', 'number', 'flip', 'write', 'function', 'determines', 'whether', 'two', 'binary', 'flip', 'the', 'trees', 'given', 'root', 'nodes', 'we', 'flipped', 'nodes', 'values', 'each', 'tree', 'each', 'value', 'tree', 'range', 'tree']",2
987,Reveal Cards In Increasing Order,"['in', 'deck', 'every', 'card', 'unique', 'you', 'order', 'deck', 'order', 'cards', 'start', 'face', 'one', 'following', 'steps', 'cards', 'take', 'top', 'card', 'reveal', 'take', 'if', 'still', 'cards', 'put', 'next', 'top', 'card', 'deck', 'bottom', 'if', 'still', 'unrevealed', 'go', 'back', 'step', 'return', 'ordering', 'deck', 'would', 'reveal', 'increasing', 'the', 'first', 'entry', 'answer', 'considered', 'top', 'we', 'get', 'deck', 'order', 'order', 'reorder', 'after', 'deck', 'starts', 'top', 'we', 'reveal', 'move', 'the', 'deck', 'we', 'reveal', 'move', 'the', 'deck', 'we', 'reveal', 'move', 'the', 'deck', 'we', 'reveal', 'move', 'the', 'deck', 'we', 'reveal', 'move', 'the', 'deck', 'we', 'reveal', 'move', 'the', 'deck', 'we', 'reveal', 'since', 'cards', 'revealed', 'increasing', 'answer', 'j', 'array']",2
986,Largest Time for Given Digits,"['given', 'array', 'return', 'largest', 'hour', 'time', 'the', 'smallest', 'hour', 'time', 'largest', 'starting', 'time', 'larger', 'time', 'elapsed', 'since', 'return', 'answer', 'string', 'length', 'if', 'valid', 'time', 'return', 'empty', 'math']",1
985,Bag of Tokens,"['you', 'initial', 'power', 'initial', 'score', 'bag', 'each', 'token', 'used', 'value', 'potentially', 'two', 'ways', 'use', 'if', 'least', 'may', 'play', 'token', 'face', 'losing', 'gaining', 'if', 'least', 'may', 'play', 'token', 'face', 'gaining', 'losing', 'return', 'largest', 'number', 'points', 'playing', 'number', 'tokens', 'p', 'tokens', 'p', 'tokens', 'p', 'p', 'greedy']",2
984,Most Stones Removed with Same Row or Column,"['on', 'place', 'stones', 'integer', 'coordinate', 'each', 'coordinate', 'point', 'may', 'one', 'move', 'consists', 'removing', 'shares', 'column', 'row', 'another', 'stone', 'what', 'largest', 'possible', 'number', 'moves', 'stones', 'stones', 'stones', 'depth-first search', 'union find']",2
983,Validate Stack Sequences,"['given', 'two', 'sequences', 'pushed', 'distinct', 'true', 'could', 'result', 'sequence', 'push', 'pop', 'operations', 'initially', 'empty', 'pushed', 'popped', 'we', 'might', 'following', 'pushed', 'popped', 'cannot', 'popped', 'pushed', 'permutation', 'pushed', 'popped', 'distinct', 'stack']",2
982,Minimum Increment to Make Array Unique,"['given', 'array', 'integers', 'move', 'consists', 'choosing', 'incrementing', 'return', 'least', 'number', 'moves', 'make', 'every', 'value', 'a', 'after', 'array', 'could', 'after', 'array', 'could', 'it', 'shown', 'less', 'moves', 'impossible', 'array', 'unique', 'array']",2
981,Delete Columns to Make Sorted,"['we', 'given', 'n', 'lowercase', 'letter', 'may', 'choose', 'set', 'deletion', 'delete', 'characters', 'for', 'array', 'a', 'deletion', 'indices', 'final', 'array', 'deletions', 'remaining', 'columns', 'a', 'column', 'suppose', 'chose', 'set', 'deletion', 'indices', 'd', 'remaining', 'column', 'a', 'sorted', 'return', 'minimum', 'possible', 'value', 'after', 'choosing', 'd', 'column', 'sorted', 'if', 'chose', 'd', 'column', 'would', 'sorted', 'd', 'd', 'greedy']",1
980,Find the Shortest Superstring,"['given', 'array', 'a', 'find', 'string', 'contains', 'string', 'a', 'we', 'may', 'assume', 'string', 'a', 'substring', 'another', 'string', 'all', 'permutations', 'would', 'also', 'dynamic programming']",3
979,DI String Match,"['given', 'string', 's', 'contains', 'let', 'n', 'return', 'permutation', 'a', 'if', 'if', 's', 'contains', 'characters', 'math']",1
978,Valid Mountain Array,"['given', 'array', 'a', 'return', 'true', 'valid', 'mountain', 'recall', 'a', 'mountain', 'array', 'there', 'exists', 'true', 'array']",1
977,Distinct Subsequences II,"['given', 'string', 'count', 'number', 'subsequences', 's', 'since', 'result', 'may', 'return', 'answer', 'modulo', 'the', 'distinct', 'subsequences', 'the', 'distinct', 'subsequences', 'the', 'distinct', 'subsequences', 's', 'contains', 'lowercase', 'dynamic programming']",3
976,Minimum Area Rectangle,"['given', 'set', 'points', 'determine', 'minimum', 'area', 'rectangle', 'formed', 'sides', 'parallel', 'x', 'if', 'return', 'all', 'points', 'hash table']",2
975,Range Sum of BST,"['given', 'root', 'node', 'binary', 'search', 'return', 'sum', 'values', 'nodes', 'value', 'l', 'r', 'the', 'binary', 'search', 'tree', 'guaranteed', 'unique', 'root', 'l', 'r', 'root', 'l', 'r', 'the', 'number', 'nodes', 'tree', 'the', 'final', 'answer', 'guaranteed', 'less', 'tree', 'recursion']",1
974,Reorder Log Files,"['you', 'array', 'each', 'log', 'space', 'delimited', 'string', 'for', 'first', 'word', 'log', 'alphanumeric', 'each', 'word', 'identifier', 'consist', 'lowercase', 'each', 'word', 'identifier', 'consist', 'we', 'call', 'two', 'varieties', 'logs', 'it', 'guaranteed', 'log', 'least', 'one', 'word', 'reorder', 'logs', 'come', 'the', 'ordered', 'lexicographically', 'ignoring', 'identifier', 'used', 'case', 'the', 'put', 'original', 'return', 'final', 'order', 'act', 'key', 'act', 'act', 'act', 'key', 'guaranteed', 'word', 'string']",1
973,Stamping The Sequence,"['you', 'want', 'form', 'lowercase', 'at', 'sequence', 'you', 'also', 'lowercase', 'on', 'may', 'place', 'stamp', 'replace', 'every', 'letter', 'sequence', 'corresponding', 'letter', 'you', 'make', 'for', 'initial', 'sequence', 'stamp', 'may', 'make', 'first', 'stamp', 'must', 'fully', 'contained', 'boundaries', 'sequence', 'order', 'if', 'sequence', 'possible', 'return', 'array', 'index', 'letter', 'stamped', 'if', 'sequence', 'possible', 'return', 'empty', 'for', 'sequence', 'stamp', 'could', 'return', 'answer', 'corresponding', 'moves', 'sequence', 'possible', 'guaranteed', 'possible', 'stamp', 'within', 'any', 'answers', 'specifying', 'number', 'stamp', 'target', 'would', 'also', 'accepted', 'well', 'stamp', 'target', 'stamp', 'target', 'contain', 'lowercase', 'string', 'greedy']",3
972,Knight Dialer,"['a', 'chess', 'knight', 'move', 'indicated', 'chess', 'diagram', 'this', 'place', 'chess', 'knight', 'numbered', 'key', 'phone', 'pad', 'knight', 'makes', 'each', 'hop', 'must', 'one', 'key', 'another', 'numbered', 'each', 'time', 'lands', 'key', 'initial', 'placement', 'presses', 'number', 'pressing', 'n', 'digits', 'how', 'many', 'distinct', 'numbers', 'dial', 'since', 'answer', 'may', 'output', 'n', 'dynamic programming']",2
971,Shortest Bridge,"['in', 'given', 'binary', 'array', 'two', 'island', 'connected', 'group', 'connected', 'may', 'change', 'connect', 'two', 'islands', 'together', 'form', 'return', 'smallest', 'number', 'must', 'guaranteed', 'answer', 'least', 'depth-first search', 'breadth-first search']",2
969,Number of Recent Calls,"['write', 'class', 'recentcounter', 'count', 'recent', 'it', 'one', 'represents', 'time', 'return', 'number', 'pings', 'made', 'milliseconds', 'ago', 'any', 'ping', 'time', 'including', 'current', 'it', 'guaranteed', 'every', 'call', 'ping', 'uses', 'strictly', 'larger', 'value', 'inputs', 'inputs', 'each', 'test', 'case', 'calls', 'each', 'test', 'case', 'strictly', 'increasing', 'values', 'each', 'call', 'ping', 'queue']",1
968,Beautiful Array,"['for', 'fixed', 'array', 'a', 'beautiful', 'permutation', 'integers', 'for', 'every', 'k', 'given', 'return', 'beautiful', 'array', 'guaranteed', 'one', 'n', 'divide and conquer']",2
967,Minimum Falling Path Sum,"['given', 'square', 'array', 'integers', 'want', 'minimum', 'sum', 'falling', 'path', 'a', 'falling', 'path', 'starts', 'element', 'first', 'chooses', 'one', 'element', 'the', 'next', 'choice', 'must', 'column', 'different', 'previous', 'column', 'the', 'possible', 'falling', 'paths', 'the', 'falling', 'path', 'smallest', 'sum', 'answer', 'dynamic programming']",2
966,Binary Subarrays With Sum,"['in', 'array', 'a', 'many', 'subarrays', 'sum', 'a', 's', 'the', 'subarrays', 'bolded', 's', 'either', 'hash table', 'two pointers']",2
965,Unique Email Addresses,"['every', 'email', 'consists', 'local', 'name', 'domain', 'separated', 'for', 'local', 'domain', 'besides', 'lowercase', 'emails', 'may', 'contain', 'if', 'add', 'periods', 'characters', 'local', 'name', 'part', 'email', 'mail', 'sent', 'forwarded', 'address', 'without', 'dots', 'local', 'for', 'forward', 'email', 'rule', 'apply', 'domain', 'if', 'add', 'plus', 'local', 'everything', 'first', 'plus', 'sign', 'this', 'allows', 'certain', 'emails', 'forwarded', 'rule', 'apply', 'domain', 'it', 'possible', 'use', 'rules', 'given', 'list', 'send', 'one', 'email', 'address', 'many', 'different', 'addresses', 'actually', 'receive', 'actually', 'receive', 'each', 'contains', 'exactly', 'one', 'all', 'local', 'domain', 'names', 'local', 'names', 'start', 'string']",1
964,Minimize Malware Spread II,"['problem', 'minimize', 'malware', 'differences', 'in', 'network', 'node', 'directly', 'connected', 'another', 'node', 'j', 'some', 'nodes', 'initial', 'initially', 'infected', 'whenever', 'two', 'nodes', 'directly', 'connected', 'least', 'one', 'two', 'nodes', 'infected', 'nodes', 'infected', 'this', 'spread', 'malware', 'continue', 'nodes', 'infected', 'suppose', 'final', 'number', 'nodes', 'infected', 'malware', 'entire', 'spread', 'malware', 'we', 'one', 'node', 'initial', 'completely', 'removing', 'connections', 'node', 'return', 'node', 'would', 'if', 'multiple', 'nodes', 'could', 'removed', 'minimize', 'return', 'node', 'smallest', 'graph', 'initial', 'graph', 'initial', 'graph', 'initial', 'depth-first search', 'union find', 'graph']",3
963,Three Equal Parts,"['given', 'array', 'a', 'divide', 'array', 'parts', 'parts', 'represent', 'binary', 'if', 'return', 'first', 'second', 'third', 'all', 'three', 'parts', 'equal', 'binary', 'if', 'return', 'note', 'entire', 'part', 'used', 'considering', 'binary', 'value', 'for', 'leading', 'zeros', 'represent', 'math', 'binary search', 'greedy']",3
962,Flip String to Monotone Increasing,"['a', 'string', 'monotone', 'increasing', 'consists', 'number', 'followed', 'number', 'possibly', 'we', 'given', 'string', 's', 'may', 'flip', 'return', 'minimum', 'number', 'flips', 'make', 'we', 'flip', 'last', 'digit', 'get', 'we', 'flip', 'get', 'alternatively', 'we', 'flip', 'get', 's', 'consists', 'array']",2
961,Long Pressed Name,"['your', 'friend', 'typing', 'typing', 'character', 'key', 'might', 'get', 'long', 'character', 'typed', 'you', 'examine', 'return', 'true', 'possible', 'friends', 'characters', 'long', 'name', 'typed', 'long', 'name', 'typed', 'must', 'pressed', 'typed', 'name', 'typed', 'name', 'typed', 'necessary', 'long', 'press', 'the', 'characters', 'name', 'typed', 'lowercase', 'two pointers', 'string']",1
960,Minimize Malware Spread,"['in', 'network', 'node', 'directly', 'connected', 'another', 'node', 'j', 'some', 'nodes', 'initial', 'initially', 'infected', 'whenever', 'two', 'nodes', 'directly', 'connected', 'least', 'one', 'two', 'nodes', 'infected', 'nodes', 'infected', 'this', 'spread', 'malware', 'continue', 'nodes', 'infected', 'suppose', 'final', 'number', 'nodes', 'infected', 'malware', 'entire', 'spread', 'malware', 'we', 'one', 'node', 'initial', 'return', 'node', 'would', 'if', 'multiple', 'nodes', 'could', 'removed', 'minimize', 'return', 'node', 'smallest', 'note', 'node', 'removed', 'infected', 'may', 'still', 'infected', 'later', 'result', 'malware', 'graph', 'initial', 'graph', 'initial', 'graph', 'initial', 'depth-first search', 'union find']",3
959,3Sum With Multiplicity,"['given', 'integer', 'array', 'integer', 'return', 'number', 'j', 'k', 'as', 'answer', 'return', 'a', 'target', 'enumerating', 'values', 'occurs', 'occurs', 'occurs', 'occurs', 'a', 'target', 'occurs', 'we', 'choose', 'one', 'two', 'target', 'two pointers']",2
958,Sort Array By Parity II,"['given', 'array', 'half', 'integers', 'a', 'half', 'integers', 'sort', 'array', 'whenever', 'whenever', 'you', 'may', 'return', 'answer', 'array', 'satisfies', 'would', 'also', 'array', 'sort']",1
957,Minimum Add to Make Parentheses Valid,"['given', 'add', 'minimum', 'number', 'parentheses', 'positions', 'resulting', 'parentheses', 'string', 'parentheses', 'string', 'valid', 'it', 'empty', 'it', 'written', 'concatenated', 'a', 'b', 'valid', 'it', 'written', 'a', 'valid', 'given', 'parentheses', 'return', 'minimum', 'number', 'parentheses', 'must', 'add', 'make', 'resulting', 'string', 's', 'consists', 'stack', 'greedy']",2
956,Number of Music Playlists,"['your', 'music', 'player', 'contains', 'songs', 'wants', 'listen', 'l', 'necessarily', 'songs', 'playlist', 'every', 'song', 'played', 'least', 'a', 'song', 'played', 'songs', 'played', 'return', 'number', 'possible', 'as', 'answer', 'return', 'modulo', 'n', 'l', 'k', 'there', 'possible', 'n', 'l', 'k', 'there', 'possible', 'n', 'l', 'k', 'there', 'possible', 'k', 'n', 'l', 'dynamic programming']",3
955,Complete Binary Tree Inserter,"['a', 'complete', 'binary', 'tree', 'binary', 'tree', 'every', 'except', 'possibly', 'completely', 'nodes', 'far', 'left', 'write', 'data', 'initialized', 'complete', 'binary', 'tree', 'supports', 'following', 'initializes', 'data', 'structure', 'given', 'head', 'node', 'insert', 'tree', 'value', 'tree', 'remains', 'returns', 'value', 'parent', 'inserted', 'return', 'head', 'node', 'inputs', 'inputs', 'inputs', 'inputs', 'the', 'initial', 'given', 'tree', 'complete', 'contains', 'called', 'times', 'per', 'test', 'every', 'value', 'given', 'inserted', 'node', 'tree']",2
954,Maximum Sum Circular Subarray,"['given', 'integers', 'represented', 'find', 'maximum', 'possible', 'sum', 'subarray', 'means', 'end', 'array', 'connects', 'beginning', 'subarray', 'may', 'include', 'element', 'fixed', 'buffer', 'a', 'subarray', 'exist', 'j', 'subarray', 'maximum', 'sum', 'maximum', 'sum', 'maximum', 'sum', 'maximum', 'sum', 'maximum', 'sum', 'array']",2
953,Reverse Only Letters,"['given', 'string', 'return', 'string', 'characters', 'letters', 'reverse', 's', 'contain', 'string']",1
952,Word Subsets,"['we', 'given', 'two', 'arrays', 'a', 'b', 'each', 'word', 'string', 'lowercase', 'say', 'b', 'subset', 'word', 'every', 'letter', 'b', 'occurs', 'including', 'for', 'subset', 'subset', 'now', 'say', 'word', 'a', 'universal', 'every', 'b', 'subset', 'return', 'list', 'universal', 'words', 'you', 'return', 'words', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'consist', 'lowercase', 'all', 'words', 'j', 'string']",2
951,Partition Array into Disjoint Intervals,"['given', 'array', 'partition', 'two', 'every', 'element', 'less', 'equal', 'every', 'element', 'left', 'right', 'smallest', 'possible', 'return', 'length', 'left', 'it', 'guaranteed', 'partitioning', 'left', 'right', 'left', 'right', 'it', 'guaranteed', 'least', 'one', 'way', 'partition', 'a', 'array']",2
950,X of a Kind in a Deck of Cards,"['in', 'deck', 'card', 'integer', 'written', 'return', 'true', 'possible', 'split', 'entire', 'groups', 'each', 'group', 'exactly', 'x', 'all', 'cards', 'group', 'possible', 'partition', 'no', 'possible', 'no', 'possible', 'possible', 'partition', 'possible', 'partition', 'array', 'math']",1
949,Cat and Mouse,"['a', 'game', 'undirected', 'graph', 'played', 'two', 'mouse', 'alternate', 'the', 'graph', 'given', 'list', 'nodes', 'b', 'ab', 'edge', 'mouse', 'starts', 'node', 'goes', 'cat', 'starts', 'node', 'goes', 'hole', 'node', 'during', 'must', 'travel', 'along', 'graph', 'meets', 'for', 'mouse', 'node', 'must', 'travel', 'node', 'allowed', 'cat', 'travel', 'hole', 'game', 'end', 'if', 'ever', 'cat', 'occupies', 'node', 'cat', 'if', 'ever', 'mouse', 'reaches', 'mouse', 'if', 'ever', 'position', 'repeated', 'players', 'position', 'previous', 'turn', 'game', 'given', 'assuming', 'players', 'play', 'return', 'game', 'game', 'game', 'it', 'guaranteed', 'it', 'guaranteed', 'contains', 'breadth-first search', 'minimax']",3
948,Sort an Array,"['given', 'array', 'integers', 'sort', 'array', 'ascending']",2
947,Online Election,"['in', 'cast', 'time', 'would', 'like', 'implement', 'following', 'query', 'return', 'number', 'person', 'leading', 'election', 'time', 'votes', 'cast', 'time', 'count', 'towards', 'in', 'case', 'recent', 'vote', 'tied', 'at', 'time', 'votes', 'at', 'time', 'votes', 'at', 'time', 'votes', 'leading', 'ties', 'go', 'recent', 'this', 'continues', 'queries', 'time', 'strictly', 'increasing', 'array', 'elements', 'called', 'times', 'per', 'test', 'always', 'called', 'binary search']",2
946,Smallest Range II,"['given', 'array', 'a', 'integer', 'need', 'choose', 'x', 'add', 'x', 'after', 'array', 'return', 'smallest', 'possible', 'difference', 'maximum', 'value', 'minimum', 'value', 'a', 'k', 'b', 'a', 'k', 'b', 'a', 'k', 'b', 'k', 'math', 'greedy']",2
945,Snakes and Ladders,"['on', 'n', 'x', 'n', 'numbers', 'alternating', 'direction', 'for', 'x', 'numbers', 'written', 'you', 'start', 'square', 'board', 'always', 'last', 'row', 'each', 'starting', 'square', 'consists', 'you', 'choose', 'destination', 'square', 's', 'provided', 'choice', 'simulates', 'result', 'standard', 'die', 'always', 'regardless', 'size', 'if', 'snake', 'move', 'destination', 'snake', 'move', 'a', 'board', 'square', 'row', 'r', 'column', 'the', 'destination', 'snake', 'ladder', 'note', 'take', 'snake', 'ladder', 'per', 'destination', 'snake', 'ladder', 'start', 'continue', 'board', 'first', 'move', 'destination', 'square', 'finish', 'first', 'move', 'continue', 'moving', 'return', 'least', 'number', 'moves', 'required', 'reach', 'square', 'if', 'return', 'at', 'start', 'square', 'row', 'column', 'you', 'decide', 'move', 'square', 'must', 'take', 'ladder', 'square', 'you', 'decide', 'move', 'square', 'column', 'must', 'take', 'snake', 'square', 'you', 'decide', 'move', 'square', 'must', 'take', 'ladder', 'square', 'you', 'decide', 'move', 'square', 'ending', 'it', 'shown', 'need', 'least', 'moves', 'reach', 'answer', 'equal', 'the', 'number', 'snake', 'the', 'board', 'square', 'number', 'snake', 'breadth-first search']",2
944,Smallest Range I,"['given', 'array', 'a', 'integer', 'may', 'choose', 'x', 'x', 'add', 'x', 'after', 'array', 'return', 'smallest', 'possible', 'difference', 'maximum', 'value', 'minimum', 'value', 'a', 'k', 'b', 'a', 'k', 'b', 'a', 'k', 'b', 'b', 'k', 'math']",1
943,Sum of Subarray Minimums,"['given', 'array', 'integers', 'find', 'sum', 'b', 'ranges', 'subarray', 'since', 'answer', 'may', 'return', 'answer', 'modulo', 'subarrays', 'minimums', 'sum', 'array', 'stack']",2
942,Super Palindromes,"['say', 'positive', 'integer', 'also', 'square', 'given', 'two', 'l', 'r', 'return', 'number', 'superpalindromes', 'inclusive', 'range', 'l', 'r', 'note', 'l', 'r', 'strings', 'representing', 'integers', 'range', 'math']",3
941,Sort Array By Parity,"['given', 'array', 'a', 'return', 'array', 'consisting', 'even', 'elements', 'followed', 'odd', 'elements', 'you', 'may', 'return', 'answer', 'array', 'satisfies', 'the', 'outputs', 'would', 'also', 'array']",1
940,Fruit Into Baskets,"['in', 'row', 'you', 'start', 'repeatedly', 'perform', 'following', 'add', 'one', 'piece', 'fruit', 'tree', 'if', 'move', 'next', 'tree', 'right', 'current', 'if', 'tree', 'note', 'choice', 'initial', 'choice', 'starting', 'must', 'perform', 'step', 'step', 'back', 'step', 'step', 'you', 'two', 'basket', 'carry', 'quantity', 'want', 'basket', 'carry', 'one', 'type', 'fruit', 'what', 'total', 'amount', 'fruit', 'collect', 'we', 'collect', 'we', 'collect', 'if', 'started', 'first', 'would', 'collect', 'we', 'collect', 'if', 'started', 'first', 'would', 'collect', 'we', 'collect', 'if', 'started', 'first', 'tree', 'eighth', 'would', 'collect', 'two pointers']",2
939,Valid Permutations for DI Sequence,"['we', 'given', 'length', 'n', 'string', 'characters', 'set', 'letters', 'stand', 'permutation', 'if', 'if', 'how', 'many', 'valid', 'permutations', 'since', 'answer', 'may', 'return', 'answer', 'modulo', 'the', 'valid', 'permutations', 's', 'consists', 'characters', 'set', 'divide and conquer', 'dynamic programming']",3
938,Numbers At Most N Given Digit Set,"['we', 'sorted', 'set', 'digits', 'subset', 'write', 'numbers', 'using', 'using', 'digit', 'many', 'times', 'for', 'd', 'may', 'write', 'numbers', 'return', 'number', 'positive', 'integers', 'written', 'digits', 'less', 'equal', 'd', 'n', 'the', 'numbers', 'written', 'd', 'n', 'we', 'write', 'one', 'digit', 'two', 'digit', 'three', 'digit', 'four', 'digit', 'five', 'digit', 'six', 'digit', 'seven', 'digit', 'eight', 'digit', 'nine', 'digit', 'in', 'integers', 'written', 'using', 'digits', 'd', 'digits', 'sorted', 'n', 'math', 'dynamic programming']",3
937,Online Stock Span,"['write', 'class', 'stockspanner', 'collects', 'daily', 'price', 'quotes', 'returns', 'price', 'current', 'the', 'span', 'price', 'defined', 'maximum', 'number', 'consecutive', 'days', 'today', 'going', 'price', 'stock', 'less', 'equal', 'for', 'price', 'stock', 'next', 'days', 'stock', 'spans', 'would', 's', 'called', 'returns', 'called', 'returns', 'called', 'returns', 'called', 'returns', 'called', 'returns', 'called', 'returns', 'called', 'returns', 'note', 'returned', 'last', 'price', 'less', 'equal', 'calls', 'price', 'there', 'calls', 'test', 'there', 'calls', 'across', 'test', 'the', 'limit', 'problem', 'reduced', 'stack']",2
936,RLE Iterator,"['write', 'iterator', 'iterates', 'encoded', 'the', 'iterator', 'initialized', 'a', 'encoding', 'more', 'even', 'tells', 'us', 'number', 'times', 'integer', 'value', 'repeated', 'the', 'iterator', 'supports', 'one', 'exhausts', 'next', 'n', 'returns', 'last', 'element', 'exhausted', 'if', 'element', 'left', 'for', 'start', 'a', 'encoding', 'sequence', 'this', 'sequence', 'read', 'zero', 'two', 'rleiterator', 'initialized', 'this', 'maps', 'sequence', 'called', 'exhausts', 'terms', 'returning', 'the', 'remaining', 'sequence', 'exhausts', 'term', 'returning', 'the', 'remaining', 'sequence', 'exhausts', 'term', 'returning', 'the', 'remaining', 'sequence', 'exhausts', 'returning', 'this', 'first', 'term', 'exhausted', 'second', 'term', 'since', 'last', 'term', 'exhausted', 'return', 'even', 'there', 'calls', 'per', 'test', 'each', 'call', 'n', 'array']",2
935,Orderly Queue,"['a', 'string', 's', 'lowercase', 'letters', 'may', 'make', 'number', 'in', 'first', 'k', 'letters', 'remove', 'place', 'end', 'return', 'lexicographically', 'smallest', 'string', 'could', 'number', 's', 'k', 'in', 'first', 'move', 'character', 'obtaining', 'string', 'in', 'second', 'move', 'character', 'obtaining', 'final', 'result', 's', 'k', 'in', 'first', 'move', 'character', 'obtaining', 'string', 'in', 'second', 'move', 'character', 'obtaining', 'final', 'result', 'k', 'lowercase', 'letters', 'math', 'string']",3
934,Bitwise ORs of Subarrays,"['we', 'array', 'a', 'for', 'every', 'subarray', 'b', 'take', 'bitwise', 'or', 'elements', 'obtaining', 'result', 'return', 'number', 'occur', 'counted', 'final', 'there', 'one', 'possible', 'the', 'possible', 'subarrays', 'these', 'yield', 'results', 'there', 'unique', 'answer', 'the', 'possible', 'results', 'dynamic programming', 'bit manipulation']",2
933,Increasing Order Search Tree,"['given', 'binary', 'search', 'rearrange', 'tree', 'leftmost', 'node', 'tree', 'root', 'every', 'node', 'left', 'child', 'right', 'the', 'number', 'nodes', 'given', 'tree', 'each', 'node', 'unique', 'integer', 'value', 'tree', 'depth-first search']",1
932,Monotonic Array,"['an', 'array', 'monotonic', 'either', 'monotone', 'increasing', 'monotone', 'an', 'array', 'a', 'monotone', 'increasing', 'an', 'array', 'a', 'monotone', 'decreasing', 'return', 'true', 'given', 'array', 'a', 'array']",1
931,Maximum Frequency Stack,"['implement', 'class', 'simulates', 'operation', 'data', 'two', 'pushes', 'integer', 'x', 'onto', 'removes', 'returns', 'frequent', 'element', 'if', 'tie', 'frequent', 'element', 'closest', 'top', 'stack', 'removed', 'after', 'making', 'six', 'stack', 'bottom', 'returns', 'the', 'stack', 'becomes', 'returns', 'closest', 'the', 'stack', 'becomes', 'returns', 'the', 'stack', 'becomes', 'returns', 'the', 'stack', 'becomes', 'calls', 'x', 'it', 'guaranteed', 'called', 'stack', 'zero', 'the', 'total', 'number', 'calls', 'exceed', 'single', 'test', 'the', 'total', 'number', 'exceed', 'single', 'test', 'the', 'total', 'number', 'calls', 'exceed', 'across', 'test', 'hash table', 'stack']",3
930,All Possible Full Binary Trees,"['a', 'full', 'binary', 'binary', 'tree', 'node', 'exactly', 'return', 'list', 'possible', 'full', 'binary', 'trees', 'n', 'each', 'element', 'answer', 'root', 'node', 'one', 'possible', 'each', 'node', 'answer', 'must', 'you', 'may', 'return', 'final', 'list', 'trees', 'n', 'tree', 'recursion']",2
929,Groups of Special-Equivalent Strings,"['you', 'given', 'array', 'a', 'two', 'strings', 's', 't', 'number', 's', 'a', 'move', 'consists', 'choosing', 'two', 'indices', 'j', 'j', 'swapping', 'group', 'strings', 'subset', 's', 'string', 'string', 'return', 'number', 'groups', 'strings', 'groups', 'groups', 'groups', 'group', 'all', 'all', 'consist', 'lowercase', 'string']",1
928,Surface Area of 3D Shapes,"['on', 'place', 'each', 'tower', 'placed', 'top', 'grid', 'return', 'total', 'surface', 'area', 'resulting', 'n', 'math', 'geometry']",1
927,Sum of Subsequence Widths,"['given', 'array', 'integers', 'consider', 'subsequences', 'for', 'sequence', 'let', 's', 'difference', 'maximum', 'minimum', 'element', 'return', 'sum', 'widths', 'subsequences', 'as', 'answer', 'may', 'return', 'answer', 'modulo', 'subsequences', 'the', 'corresponding', 'widths', 'the', 'sum', 'widths', 'array', 'math']",3
926,Find and Replace Pattern,"['you', 'list', 'want', 'know', 'words', 'words', 'matches', 'a', 'word', 'matches', 'pattern', 'exists', 'permutation', 'letters', 'p', 'replacing', 'every', 'letter', 'x', 'pattern', 'get', 'desired', 'permutation', 'letters', 'bijection', 'letters', 'every', 'letter', 'maps', 'another', 'two', 'letters', 'map', 'return', 'list', 'words', 'match', 'given', 'you', 'may', 'return', 'answer', 'words', 'pattern', 'matches', 'pattern', 'permutation', 'b', 'match', 'pattern', 'b', 'since', 'b', 'map', 'string']",2
925,Construct Binary Tree from Preorder and Postorder Traversal,"['return', 'binary', 'tree', 'matches', 'given', 'preorder', 'postorder', 'values', 'pre', 'post', 'permutations', 'it', 'guaranteed', 'answer', 'if', 'exists', 'multiple', 'return', 'tree']",2
924,Fair Candy Swap,"['alice', 'bob', 'candy', 'bars', 'different', 'size', 'bar', 'candy', 'alice', 'size', 'bar', 'candy', 'bob', 'since', 'would', 'like', 'exchange', 'one', 'candy', 'bar', 'total', 'amount', 'person', 'sum', 'sizes', 'return', 'integer', 'array', 'size', 'candy', 'bar', 'alice', 'must', 'size', 'candy', 'bar', 'bob', 'must', 'if', 'multiple', 'may', 'return', 'one', 'it', 'guaranteed', 'answer', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'it', 'guaranteed', 'alice', 'bob', 'different', 'total', 'amounts', 'it', 'guaranteed', 'exists', 'array']",1
923,Super Egg Drop,"['you', 'given', 'k', 'access', 'building', 'n', 'floors', 'each', 'egg', 'identical', 'egg', 'cannot', 'drop', 'you', 'know', 'exists', 'floor', 'f', 'f', 'n', 'egg', 'dropped', 'floor', 'higher', 'f', 'egg', 'dropped', 'floor', 'f', 'each', 'may', 'take', 'egg', 'unbroken', 'drop', 'floor', 'x', 'x', 'your', 'goal', 'value', 'f', 'what', 'minimum', 'number', 'moves', 'need', 'know', 'f', 'regardless', 'initial', 'value', 'k', 'n', 'drop', 'egg', 'floor', 'if', 'know', 'certainty', 'f', 'drop', 'egg', 'floor', 'if', 'know', 'certainty', 'f', 'if', 'know', 'certainty', 'f', 'needed', 'moves', 'worst', 'case', 'know', 'f', 'k', 'n', 'k', 'n', 'k', 'n', 'math', 'binary search', 'dynamic programming']",3
922,Possible Bipartition,"['given', 'set', 'would', 'like', 'split', 'everyone', 'two', 'groups', 'each', 'person', 'may', 'dislike', 'go', 'means', 'allowed', 'put', 'people', 'numbered', 'b', 'return', 'possible', 'split', 'everyone', 'two', 'groups', 'n', 'dislikes', 'n', 'dislikes', 'n', 'dislikes', 'n', 'n', 'there', 'exist', 'j', 'depth-first search']",2
921,Spiral Matrix III,"['on', 'dimensional', 'grid', 'r', 'rows', 'c', 'start', 'facing', 'corner', 'grid', 'row', 'corner', 'grid', 'last', 'row', 'walk', 'clockwise', 'spiral', 'shape', 'visit', 'every', 'position', 'whenever', 'would', 'move', 'outside', 'boundary', 'continue', 'walk', 'outside', 'grid', 'may', 'return', 'grid', 'boundary', 'reach', 'r', 'c', 'spaces', 'return', 'list', 'coordinates', 'representing', 'positions', 'grid', 'order', 'r', 'c', 'r', 'c', 'r', 'c', 'r', 'c', 'math']",2
920,Uncommon Words from Two Sentences,"['we', 'given', 'two', 'sentences', 'a', 'string', 'space', 'separated', 'each', 'word', 'consists', 'lowercase', 'a', 'word', 'appears', 'exactly', 'one', 'appear', 'return', 'list', 'uncommon', 'you', 'may', 'return', 'list', 'a', 'apple', 'b', 'apple', 'a', 'b', 'a', 'b', 'contain', 'spaces', 'lowercase', 'hash table']",1
919,Projection Area of 3D Shapes,"['on', 'place', 'z', 'each', 'tower', 'placed', 'top', 'grid', 'cell', 'now', 'view', 'zx', 'a', 'projection', 'like', 'dimensional', 'figure', 'dimensional', 'viewing', 'looking', 'cubes', 'return', 'total', 'area', 'three', 'here', 'three', 'projections', 'shape', 'made', 'math']",1
918,Reachable Nodes In Subdivided Graph,"['starting', 'graph', 'nodes', 'subdivisions', 'made', 'the', 'graph', 'given', 'list', 'integer', 'pairs', 'edge', 'original', 'n', 'total', 'number', 'new', 'nodes', 'edge', 'deleted', 'original', 'nodes', 'added', 'original', 'added', 'start', 'node', 'original', 'travel', 'along', 'return', 'many', 'nodes', 'reach', 'm', 'edges', 'm', 'n', 'the', 'nodes', 'reachable', 'final', 'graph', 'm', 'moves', 'indicated', 'edges', 'm', 'n', 'n', 'there', 'exist', 'j', 'the', 'original', 'parallel', 'm', 'n', 'a', 'reachable', 'node', 'node', 'travelled', 'moves', 'starting', 'heap']",3
917,Boats to Save People,"['the', 'person', 'weight', 'boat', 'carry', 'maximum', 'weight', 'each', 'boat', 'carries', 'people', 'provided', 'sum', 'people', 'return', 'minimum', 'number', 'boats', 'carry', 'every', 'given', 'guaranteed', 'person', 'carried', 'people', 'limit', 'boat', 'people', 'limit', 'boats', 'people', 'limit', 'boats', 'two pointers', 'greedy']",2
916,Decoded String at Index,"['an', 'encoded', 'string', 's', 'to', 'find', 'write', 'decoded', 'string', 'encoded', 'string', 'read', 'one', 'character', 'following', 'steps', 'if', 'character', 'read', 'letter', 'written', 'onto', 'if', 'character', 'read', 'digit', 'entire', 'current', 'tape', 'repeatedly', 'times', 'now', 'encoded', 'string', 'index', 'find', 'return', 'letter', 'decoded', 's', 'k', 'the', 'decoded', 'string', 'the', 'letter', 'string', 's', 'k', 'the', 'decoded', 'string', 'the', 'letter', 's', 'k', 'the', 'decoded', 'string', 'repeated', 'the', 'letter', 'contain', 'lowercase', 'letters', 'digits', 'k', 'the', 'decoded', 'string', 'guaranteed', 'less', 'stack']",2
915,Generate Random Point in a Circle,"['given', 'radius', 'positions', 'center', 'write', 'function', 'uniform', 'input', 'output', 'values', 'radius', 'position', 'center', 'circle', 'passed', 'class', 'point', 'circumference', 'circle', 'considered', 'size', 'array', 'containing', 'random', 'explanation', 'input', 'the', 'input', 'two', 'subroutines', 'three', 'center', 'randpoint', 'wrapped', 'even', 'math', 'random', 'rejection sampling']",2
914,Random Point in Non-overlapping Rectangles,"['given', 'list', 'rectangles', 'write', 'function', 'pick', 'randomly', 'uniformily', 'picks', 'integer', 'point', 'an', 'integer', 'point', 'integer', 'a', 'rectangle', 'space', 'covered', 'ith', 'rectangle', 'integer', 'coordinates', 'integer', 'coordinates', 'length', 'width', 'rectangle', 'exceed', 'pick', 'return', 'point', 'array', 'integer', 'pick', 'called', 'explanation', 'input', 'the', 'input', 'two', 'subroutines', 'one', 'array', 'rectangles', 'wrapped', 'even', 'binary search', 'random']",2
913,Random Flip Matrix,"['you', 'given', 'number', 'rows', 'number', 'columns', 'values', 'initially', 'function', 'returns', 'position', 'write', 'function', 'reset', 'sets', 'values', 'back', 'minimize', 'number', 'calls', 'optimize', 'time', 'called', 'matrix', 'values', 'total', 'number', 'calls', 'explanation', 'input', 'the', 'input', 'two', 'subroutines', 'two', 'reset', 'wrapped', 'even', 'random']",2
912,Random Pick with Weight,"['given', 'array', 'w', 'positive', 'describes', 'weight', 'index', 'function', 'called', 'explanation', 'input', 'the', 'input', 'two', 'subroutines', 'one', 'pickindex', 'wrapped', 'even', 'binary search', 'random']",2
911,Profitable Schemes,"['there', 'g', 'people', 'list', 'various', 'crimes', 'could', 'the', 'crime', 'generates', 'requires', 'gang', 'members', 'if', 'gang', 'member', 'participates', 'one', 'member', 'participate', 'another', 'call', 'subset', 'crimes', 'generates', 'least', 'p', 'total', 'number', 'gang', 'members', 'participating', 'subset', 'crimes', 'how', 'many', 'schemes', 'since', 'answer', 'may', 'return', 'modulo', 'g', 'p', 'group', 'profit', 'to', 'make', 'profit', 'least', 'gang', 'could', 'either', 'commit', 'crimes', 'crime', 'in', 'g', 'p', 'group', 'profit', 'to', 'make', 'profit', 'least', 'gang', 'could', 'commit', 'long', 'commit', 'there', 'possible', 'g', 'p', 'dynamic programming']",3
910,Nth Magical Number,"['a', 'positive', 'divisible', 'either', 'return', 'magical', 'since', 'answer', 'may', 'return', 'modulo', 'n', 'a', 'b', 'n', 'a', 'b', 'n', 'a', 'b', 'n', 'a', 'b', 'math', 'binary search']",3
909,Stone Game,"['alex', 'lee', 'play', 'game', 'piles', 'there', 'even', 'number', 'arranged', 'pile', 'positive', 'integer', 'number', 'stones', 'the', 'objective', 'game', 'end', 'the', 'total', 'number', 'stones', 'alex', 'lee', 'take', 'alex', 'starting', 'each', 'entire', 'pile', 'stones', 'either', 'beginning', 'end', 'this', 'continues', 'piles', 'point', 'person', 'stones', 'assuming', 'alex', 'lee', 'play', 'return', 'alex', 'wins', 'alex', 'starts', 'take', 'first', 'last', 'say', 'takes', 'first', 'row', 'becomes', 'if', 'lee', 'takes', 'board', 'alex', 'takes', 'win', 'if', 'lee', 'takes', 'last', 'board', 'alex', 'takes', 'win', 'this', 'demonstrated', 'taking', 'first', 'winning', 'move', 'return', 'math', 'dynamic programming', 'minimax']",2
908,Middle of the Linked List,"['given', 'list', 'head', 'node', 'node', 'linked', 'if', 'two', 'middle', 'return', 'second', 'middle', 'node', 'list', 'the', 'returned', 'node', 'value', 'serialization', 'node', 'note', 'returned', 'listnode', 'object', 'node', 'list', 'since', 'list', 'two', 'middle', 'nodes', 'values', 'return', 'second', 'the', 'number', 'nodes', 'given', 'list', 'linked list']",1
907,Koko Eating Bananas,"['koko', 'loves', 'eat', 'there', 'the', 'guards', 'gone', 'come', 'back', 'h', 'koko', 'decide', 'eating', 'speed', 'each', 'chooses', 'pile', 'eats', 'k', 'bananas', 'if', 'pile', 'less', 'k', 'eats', 'eat', 'bananas', 'koko', 'likes', 'eat', 'still', 'wants', 'finish', 'eating', 'bananas', 'guards', 'come', 'return', 'minimum', 'integer', 'k', 'eat', 'bananas', 'within', 'h', 'piles', 'h', 'piles', 'h', 'piles', 'h', 'h', 'binary search']",2
906,Walking Robot Simulation,"['a', 'robot', 'infinite', 'grid', 'starts', 'point', 'faces', 'the', 'robot', 'receive', 'one', 'three', 'possible', 'types', 'turn', 'left', 'degrees', 'turn', 'right', 'degrees', 'x', 'move', 'forward', 'x', 'units', 'some', 'grid', 'squares', 'the', 'obstacle', 'grid', 'point', 'if', 'robot', 'would', 'try', 'move', 'onto', 'robot', 'stays', 'previous', 'grid', 'square', 'instead', 'still', 'continues', 'following', 'rest', 'return', 'square', 'maximum', 'euclidean', 'distance', 'robot', 'commands', 'obstacles', 'robot', 'go', 'commands', 'obstacles', 'robot', 'stuck', 'turning', 'left', 'going', 'the', 'answer', 'guaranteed', 'less', 'greedy']",1
905,Length of Longest Fibonacci Subsequence,"['a', 'sequence', 'n', 'n', 'given', 'strictly', 'positive', 'integers', 'forming', 'find', 'length', 'longest', 'subsequence', 'if', 'one', 'return', 'subsequence', 'derived', 'another', 'sequence', 'a', 'number', 'without', 'changing', 'order', 'remaining', 'for', 'subsequence', 'the', 'longest', 'subsequence', 'the', 'longest', 'subsequence', 'time', 'limit', 'reduced', 'submissions', 'array', 'dynamic programming']",2
904,Leaf-Similar Trees,"['consider', 'leaves', 'binary', 'right', 'values', 'form', 'leaf', 'value', 'for', 'given', 'tree', 'leaf', 'value', 'sequence', 'two', 'binary', 'trees', 'considered', 'leaf', 'value', 'sequence', 'return', 'true', 'two', 'given', 'trees', 'head', 'nodes', 'both', 'given', 'trees', 'tree', 'depth-first search']",1
903,Implement Rand10() Using Rand7(),"['given', 'function', 'generates', 'uniform', 'random', 'integer', 'range', 'write', 'function', 'generates', 'uniform', 'random', 'integer', 'range', 'do', 'not', 'use', 'each', 'testcase', 'one', 'number', 'times', 'follow', 'what', 'expected', 'number', 'calls', 'could', 'minimize', 'number', 'calls', 'random', 'rejection sampling']",2
902,Minimum Number of Refueling Stops,"['a', 'car', 'travels', 'starting', 'position', 'destination', 'target', 'miles', 'east', 'starting', 'along', 'gas', 'each', 'gas', 'station', 'miles', 'east', 'starting', 'liters', 'the', 'car', 'starts', 'infinite', 'tank', 'initially', 'fuel', 'it', 'uses', 'liter', 'gas', 'per', 'mile', 'when', 'gas', 'may', 'stop', 'transferring', 'gas', 'station', 'what', 'least', 'number', 'refueling', 'stops', 'car', 'must', 'make', 'order', 'reach', 'if', 'cannot', 'reach', 'return', 'note', 'car', 'reaches', 'gas', 'station', 'fuel', 'car', 'still', 'refuel', 'if', 'car', 'reaches', 'destination', 'fuel', 'still', 'considered', 'target', 'startfuel', 'stations', 'we', 'reach', 'target', 'without', 'target', 'startfuel', 'stations', 'we', 'reach', 'target', 'even', 'first', 'gas', 'target', 'startfuel', 'stations', 'we', 'start', 'liters', 'we', 'drive', 'position', 'expending', 'liters', 'we', 'refuel', 'liters', 'liters', 'drive', 'position', 'position', 'liters', 'refuel', 'liters', 'liters', 'we', 'drive', 'reach', 'we', 'made', 'refueling', 'stops', 'along', 'return', 'target', 'dynamic programming', 'heap']",3
901,Advantage Shuffle,"['given', 'two', 'arrays', 'a', 'b', 'equal', 'advantage', 'a', 'respect', 'b', 'number', 'indices', 'return', 'permutation', 'a', 'maximizes', 'advantage', 'respect', 'a', 'b', 'a', 'b', 'array', 'greedy']",2
900,Reordered Power of 2,"['starting', 'positive', 'integer', 'reorder', 'digits', 'order', 'original', 'leading', 'digit', 'return', 'way', 'resulting', 'number', 'power', 'n', 'math']",2
899,Binary Gap,"['given', 'find', 'return', 'longest', 'distance', 'two', 'consecutive', 'binary', 'representation', 'if', 'two', 'consecutive', 'return', 'binary', 'in', 'binary', 'representation', 'three', 'two', 'consecutive', 'pairs', 'the', 'first', 'consecutive', 'pair', 'distance', 'the', 'second', 'consecutive', 'pair', 'distance', 'the', 'answer', 'largest', 'two', 'binary', 'binary', 'binary', 'there', 'consecutive', 'pairs', 'binary', 'representation', 'return', 'n', 'math']",1
898,Transpose Matrix,"['given', 'return', 'transpose', 'the', 'transpose', 'matrix', 'matrix', 'flipped', 'main', 'switching', 'row', 'column', 'indices', 'array']",1
897,Prime Palindrome,"['find', 'smallest', 'prime', 'palindrome', 'greater', 'equal', 'recall', 'prime', 'divisors', 'greater', 'for', 'recall', 'number', 'palindrome', 'reads', 'left', 'right', 'right', 'for', 'n', 'the', 'answer', 'guaranteed', 'exist', 'less', 'math']",2
896,Smallest Subtree with all the Deepest Nodes,"['given', 'binary', 'tree', 'rooted', 'depth', 'node', 'shortest', 'distance', 'a', 'node', 'deepest', 'largest', 'depth', 'possible', 'node', 'entire', 'the', 'subtree', 'node', 'plus', 'set', 'descendants', 'return', 'node', 'largest', 'depth', 'contains', 'deepest', 'nodes', 'we', 'return', 'node', 'value', 'colored', 'yellow', 'the', 'nodes', 'colored', 'blue', 'deepest', 'nodes', 'the', 'input', 'serialization', 'given', 'the', 'output', 'serialization', 'subtree', 'rooted', 'node', 'value', 'both', 'input', 'output', 'treenode', 'the', 'number', 'nodes', 'tree', 'the', 'values', 'node', 'tree']",2
895,Shortest Path to Get All Keys,"['we', 'given', 'empty', 'starting', 'we', 'start', 'starting', 'one', 'move', 'consists', 'walking', 'one', 'space', 'one', 'cardinal', 'we', 'cannot', 'walk', 'outside', 'walk', 'if', 'walk', 'pick', 'we', 'walk', 'lock', 'unless', 'corresponding', 'for', 'k', 'exactly', 'one', 'lowercase', 'one', 'uppercase', 'letter', 'first', 'k', 'letters', 'english', 'alphabet', 'this', 'means', 'exactly', 'one', 'key', 'one', 'lock', 'also', 'letters', 'used', 'represent', 'keys', 'locks', 'order', 'english', 'return', 'lowest', 'number', 'moves', 'acquire', 'return', 'contains', 'the', 'number', 'keys', 'each', 'key', 'different', 'letter', 'opens', 'exactly', 'one', 'heap', 'breadth-first search']",3
894,Random Pick with Blacklist,"['given', 'containing', 'unique', 'write', 'function', 'return', 'uniform', 'random', 'integer', 'optimize', 'minimizes', 'call', 'n', 'not', 'include', 'see', 'interval', 'explanation', 'input', 'the', 'input', 'two', 'subroutines', 'two', 'blacklist', 'pick', 'wrapped', 'even', 'hash table', 'binary search', 'sort', 'random']",3
893,All Nodes Distance K in Binary Tree,"['we', 'given', 'binary', 'tree', 'root', 'target', 'integer', 'value', 'return', 'list', 'values', 'distance', 'k', 'target', 'the', 'answer', 'returned', 'root', 'target', 'k', 'the', 'nodes', 'distance', 'target', 'node', 'value', 'values', 'note', 'inputs', 'actually', 'the', 'descriptions', 'inputs', 'serializations', 'the', 'given', 'tree', 'each', 'node', 'tree', 'unique', 'the', 'node', 'k', 'tree', 'depth-first search', 'breadth-first search']",2
892,Shortest Subarray with Sum at Least K,"['return', 'length', 'a', 'sum', 'least', 'if', 'subarray', 'sum', 'least', 'return', 'a', 'k', 'a', 'k', 'a', 'k', 'k', 'binary search', 'queue']",3
891,Score After Flipping Matrix,"['we', 'two', 'dimensional', 'value', 'a', 'move', 'consists', 'choosing', 'row', 'toggling', 'value', 'row', 'changing', 'after', 'making', 'number', 'every', 'row', 'matrix', 'interpreted', 'binary', 'score', 'matrix', 'sum', 'return', 'highest', 'toggled', 'greedy']",2
890,Lemonade Change,"['at', 'lemonade', 'lemonade', 'costs', 'customers', 'standing', 'queue', 'buy', 'order', 'one', 'time', 'order', 'specified', 'each', 'customer', 'buy', 'one', 'lemonade', 'either', 'you', 'must', 'provide', 'correct', 'change', 'net', 'transaction', 'customer', 'pays', 'note', 'hand', 'return', 'provide', 'every', 'customer', 'correct', 'from', 'first', 'collect', 'three', 'bills', 'from', 'fourth', 'collect', 'bill', 'give', 'back', 'from', 'fifth', 'give', 'bill', 'since', 'customers', 'got', 'correct', 'output', 'from', 'first', 'two', 'customers', 'collect', 'two', 'for', 'next', 'two', 'customers', 'collect', 'bill', 'give', 'back', 'for', 'last', 'give', 'change', 'back', 'two', 'since', 'every', 'customer', 'received', 'correct', 'answer', 'greedy']",1
889,Buddy Strings,"['given', 'two', 'strings', 'a', 'lowercase', 'return', 'true', 'swap', 'two', 'letters', 'a', 'result', 'equals', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'consist', 'lowercase', 'string']",1
888,Mirror Reflection,"['there', 'special', 'square', 'room', 'mirrors', 'except', 'receptors', 'remaining', 'numbered', 'the', 'square', 'room', 'walls', 'length', 'laser', 'ray', 'southwest', 'meets', 'east', 'wall', 'distance', 'return', 'number', 'receptor', 'ray', 'meets', 'guaranteed', 'ray', 'receptor', 'p', 'q', 'the', 'ray', 'meets', 'receptor', 'first', 'time', 'gets', 'reflected', 'back', 'left', 'p', 'q', 'p', 'math']",2
887,Minimum Cost to Hire K Workers,"['there', 'n', 'the', 'worker', 'minimum', 'wage', 'expectation', 'now', 'want', 'hire', 'exactly', 'form', 'paid', 'when', 'hiring', 'group', 'k', 'must', 'pay', 'according', 'following', 'every', 'worker', 'paid', 'group', 'paid', 'ratio', 'quality', 'compared', 'workers', 'paid', 'every', 'worker', 'paid', 'group', 'must', 'paid', 'least', 'minimum', 'wage', 'return', 'least', 'amount', 'money', 'needed', 'form', 'paid', 'group', 'satisfying', 'quality', 'wage', 'k', 'we', 'pay', 'worker', 'quality', 'wage', 'k', 'we', 'pay', 'workers', 'k', 'n', 'n', 'answers', 'within', 'correct', 'answer', 'considered', 'heap']",3
886,Score of Parentheses,"['given', 'balanced', 'parentheses', 'string', 'compute', 'score', 'string', 'based', 'following', 'score', 'ab', 'score', 'a', 'a', 'b', 'balanced', 'parentheses', 'score', 'a', 'balanced', 'parentheses', 's', 'balanced', 'parentheses', 'containing', 'string', 'stack']",2
885,Exam Room,"['in', 'exam', 'n', 'seats', 'single', 'numbered', 'when', 'student', 'enters', 'must', 'sit', 'seat', 'maximizes', 'distance', 'closest', 'if', 'multiple', 'sit', 'seat', 'lowest', 'one', 'student', 'sits', 'seat', 'number', 'return', 'class', 'exposes', 'two', 'seat', 'student', 'sat', 'student', 'seat', 'number', 'leaves', 'it', 'guaranteed', 'calls', 'student', 'sitting', 'seat', 'one', 'student', 'sits', 'seat', 'number', 'student', 'sits', 'last', 'seat', 'number', 'student', 'sits', 'last', 'seat', 'number', 'student', 'sits', 'last', 'seat', 'number', 'student', 'sits', 'last', 'seat', 'number', 'n', 'called', 'times', 'across', 'test', 'calls', 'guaranteed', 'student', 'currently', 'sitting', 'seat', 'number', 'ordered map']",2
884,K-Similar Strings,"['b', 'integer', 'swap', 'positions', 'two', 'letters', 'a', 'exactly', 'resulting', 'string', 'equals', 'given', 'two', 'anagrams', 'a', 'return', 'smallest', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'contain', 'lowercase', 'letters', 'set', 'breadth-first search', 'graph']",3
883,Car Fleet,"['n', 'cars', 'going', 'destination', 'along', 'one', 'lane', 'the', 'destination', 'each', 'car', 'constant', 'speed', 'miles', 'per', 'initial', 'position', 'towards', 'target', 'along', 'a', 'car', 'never', 'pass', 'another', 'car', 'ahead', 'catch', 'drive', 'bumper', 'bumper', 'the', 'distance', 'two', 'cars', 'ignored', 'assumed', 'a', 'car', 'fleet', 'set', 'cars', 'position', 'note', 'single', 'car', 'also', 'car', 'if', 'car', 'catches', 'car', 'fleet', 'right', 'destination', 'one', 'car', 'how', 'many', 'car', 'fleets', 'arrive', 'target', 'position', 'speed', 'the', 'cars', 'starting', 'become', 'meeting', 'the', 'car', 'starting', 'catch', 'fleet', 'the', 'cars', 'starting', 'become', 'meeting', 'note', 'cars', 'meet', 'fleets', 'answer', 'n', 'target', 'all', 'initial', 'positions', 'sort']",2
882,Peak Index in a Mountain Array,"['call', 'array', 'a', 'following', 'properties', 'there', 'exists', 'given', 'array', 'definitely', 'return', 'defined', 'binary search']",1
881,Loud and Rich,"['in', 'group', 'n', 'people', 'person', 'different', 'amounts', 'different', 'levels', 'for', 'call', 'person', 'label', 'simply', 'say', 'person', 'money', 'note', 'subset', 'valid', 'say', 'q', 'person', 'quietness', 'return', 'least', 'quiet', 'person', 'person', 'smallest', 'value', 'among', 'definitely', 'money', 'person', 'richer', 'quiet', 'person', 'money', 'money', 'money', 'the', 'person', 'quieter', 'lower', 'person', 'clear', 'money', 'person', 'among', 'people', 'definitely', 'equal', 'money', 'person', 'could', 'persons', 'person', 'quietest', 'lower', 'person', 'the', 'answers', 'filled', 'similar', 'n', 'n', 'n', 'richer', 'logically', 'depth-first search']",2
880,Rectangle Area II,"['we', 'given', 'list', 'coordinates', 'coordinates', 'corner', 'ith', 'find', 'total', 'area', 'covered', 'rectangles', 'since', 'return', 'modulo', 'as', 'illustrated', 'the', 'answer', 'modulo', 'the', 'total', 'area', 'covered', 'rectangles', 'never', 'thus', 'fit', 'signed', 'segment tree', 'line sweep']",3
879,Maximize Distance to Closest Person,"['in', 'row', 'represents', 'person', 'sitting', 'represents', 'seat', 'there', 'least', 'one', 'empty', 'least', 'one', 'person', 'alex', 'wants', 'sit', 'seat', 'distance', 'closest', 'person', 'return', 'maximum', 'distance', 'closest', 'if', 'alex', 'sits', 'second', 'open', 'seat', 'closest', 'person', 'distance', 'if', 'alex', 'sits', 'open', 'closest', 'person', 'distance', 'maximum', 'distance', 'closest', 'person', 'if', 'alex', 'sits', 'last', 'closest', 'person', 'seats', 'this', 'maximum', 'distance', 'answer', 'least', 'one', 'least', 'one', 'array']",1
878,Shifting Letters,"['we', 'string', 's', 'lowercase', 'integer', 'array', 'call', 'shift', 'next', 'letter', 'around', 'becomes', 'for', 'now', 'want', 'shift', 'first', 'x', 'return', 'final', 'shifts', 's', 's', 'shifts', 'we', 'start', 'after', 'shifting', 'first', 'letters', 's', 'after', 'shifting', 'first', 'letters', 's', 'after', 'shifting', 'first', 'letters', 's', 'string']",2
877,Shortest Path Visiting All Nodes,"['an', 'connected', 'graph', 'n', 'nodes', 'given', 'j', 'nodes', 'j', 'return', 'length', 'shortest', 'path', 'visits', 'every', 'you', 'may', 'start', 'stop', 'may', 'revisit', 'nodes', 'multiple', 'may', 'reuse', 'one', 'possible', 'path', 'one', 'possible', 'path', 'dynamic programming', 'breadth-first search']",3
876,Hand of Straights,"['alice', 'hand', 'given', 'array', 'now', 'wants', 'rearrange', 'cards', 'groups', 'group', 'size', 'consists', 'w', 'consecutive', 'return', 'true', 'hand', 'w', 'hand', 'rearranged', 'hand', 'w', 'hand', 'rearranged', 'groups', 'w', 'ordered map']",2
875,Longest Mountain in Array,"['call', 'subarray', 'b', 'mountain', 'following', 'properties', 'there', 'exists', 'b', 'could', 'subarray', 'including', 'entire', 'array', 'given', 'array', 'length', 'return', 'the', 'largest', 'mountain', 'length', 'there', 'follow', 'can', 'solve', 'using', 'one', 'can', 'solve', 'two pointers']",2
874,Backspace String Compare,"['given', 'equal', 'typed', 'empty', 'text', 'means', 'backspace', 's', 't', 'both', 's', 't', 'become', 's', 't', 'both', 's', 't', 'become', 's', 't', 'both', 's', 't', 'become', 's', 't', 's', 'becomes', 't', 'becomes', 't', 'letters', 'follow', 'can', 'solve', 'time', 'two pointers', 'stack']",1
873,Guess the Word,"['this', 'problem', 'leetcode', 'we', 'given', 'word', 'list', 'unique', 'word', 'letters', 'one', 'word', 'list', 'chosen', 'you', 'may', 'call', 'guess', 'the', 'guessed', 'word', 'must', 'original', 'lowercase', 'this', 'function', 'returns', 'number', 'exact', 'matches', 'guess', 'secret', 'guess', 'given', 'return', 'for', 'test', 'guesses', 'guess', 'at', 'end', 'number', 'made', 'less', 'calls', 'least', 'one', 'guesses', 'pass', 'besides', 'example', 'test', 'case', 'test', 'words', 'word', 'the', 'letters', 'word', 'testcases', 'random', 'every', 'word', 'given', 'word', 'lists', 'wordlist', 'returns', 'returns', 'secret', 'returns', 'returns', 'returns', 'we', 'made', 'calls', 'one', 'pass', 'test', 'any', 'solutions', 'attempt', 'circumvent', 'result', 'minimax']",3
872,Split Array into Fibonacci Sequence,"['given', 'string', 's', 'split', 'sequence', 'integers', 'integer', 'fits', 'signed', 'integer', 'note', 'splitting', 'string', 'piece', 'must', 'extra', 'leading', 'except', 'piece', 'number', 'return', 'sequence', 'split', 'return', 'cannot', 'the', 'task', 'leading', 'zeroes', 'the', 'output', 'would', 'also', 's', 'contains', 'string', 'backtracking', 'greedy']",2
871,Keys and Rooms,"['there', 'n', 'rooms', 'start', 'room', 'each', 'room', 'distinct', 'number', 'room', 'may', 'keys', 'access', 'next', 'room', 'list', 'keys', 'key', 'integer', 'n', 'a', 'key', 'room', 'number', 'rooms', 'start', 'locked', 'room', 'you', 'walk', 'back', 'forth', 'rooms', 'return', 'we', 'start', 'room', 'pick', 'key', 'we', 'go', 'room', 'pick', 'key', 'we', 'go', 'room', 'pick', 'key', 'we', 'go', 'room', 'since', 'able', 'go', 'every', 'return', 'we', 'enter', 'room', 'number', 'the', 'number', 'keys', 'rooms', 'combined', 'depth-first search', 'graph']",2
870,Magic Squares In Grid,"['a', 'x', 'magic', 'square', 'x', 'grid', 'filled', 'distinct', 'numbers', 'diagonals', 'given', 'many', 'x', 'subgrids', 'subgrid', 'the', 'following', 'subgrid', 'x', 'magic', 'one', 'in', 'one', 'magic', 'square', 'inside', 'given', 'array']",1
869,Similar String Groups,"['two', 'strings', 'similar', 'swap', 'two', 'letters', 'different', 'equals', 'for', 'similar', 'positions', 'similar', 'form', 'two', 'connected', 'groups', 'notice', 'group', 'even', 'though', 'group', 'word', 'group', 'similar', 'least', 'one', 'word', 'we', 'given', 'list', 'a', 'every', 'string', 'a', 'anagram', 'every', 'string', 'how', 'many', 'groups', 'all', 'words', 'lowercase', 'letters', 'all', 'words', 'a', 'length', 'anagrams', 'the', 'judging', 'time', 'limit', 'increased', 'depth-first search', 'union find', 'graph']",3
868,Push Dominoes,"['there', 'dominoes', 'place', 'domino', 'vertically', 'in', 'simultaneously', 'dominoes', 'either', 'left', 'after', 'domino', 'falling', 'left', 'pushes', 'adjacent', 'domino', 'dominoes', 'falling', 'right', 'push', 'adjacent', 'dominoes', 'standing', 'when', 'vertical', 'domino', 'dominoes', 'falling', 'stays', 'still', 'due', 'balance', 'for', 'purposes', 'consider', 'falling', 'additional', 'force', 'falling', 'already', 'fallen', 'given', 'string', 'representing', 'initial', 'domino', 'pushed', 'domino', 'pushed', 'domino', 'return', 'string', 'representing', 'final', 'the', 'first', 'domino', 'expends', 'additional', 'force', 'second', 'contains', 'two pointers', 'dynamic programming']",2
867,New 21 Game,"['alice', 'plays', 'following', 'loosely', 'based', 'card', 'game', 'alice', 'starts', 'draws', 'numbers', 'less', 'k', 'during', 'gains', 'integer', 'number', 'points', 'randomly', 'range', 'w', 'each', 'draw', 'independent', 'outcomes', 'equal', 'alice', 'stops', 'drawing', 'numbers', 'gets', 'k', 'what', 'n', 'less', 'n', 'k', 'w', 'alice', 'gets', 'single', 'n', 'k', 'w', 'alice', 'gets', 'single', 'in', 'w', 'n', 'n', 'k', 'w', 'k', 'n', 'w', 'answers', 'accepted', 'correct', 'within', 'correct', 'the', 'judging', 'time', 'limit', 'reduced', 'dynamic programming']",2
866,Rectangle Overlap,"['a', 'rectangle', 'coordinates', 'coordinates', 'two', 'rectangles', 'overlap', 'area', 'intersection', 'to', 'two', 'rectangles', 'touch', 'corner', 'edges', 'given', 'two', 'return', 'both', 'rectangles', 'lists', 'all', 'coordinates', 'rectangles', 'math']",1
864,Image Overlap,"['two', 'images', 'a', 'b', 'represented', 'square', 'matrices', 'binary', 'matrix', 'we', 'translate', 'one', 'image', 'however', 'choose', 'number', 'place', 'top', 'overlap', 'translation', 'number', 'positions', 'also', 'translation', 'include', 'kind', 'what', 'largest', 'possible', 'a', 'b', 'we', 'slide', 'a', 'right', 'unit', 'array']",2
863,Sum of Distances in Tree,"['an', 'n', 'nodes', 'labelled', 'the', 'ith', 'edge', 'connects', 'return', 'list', 'sum', 'distances', 'node', 'n', 'edges', 'here', 'diagram', 'given', 'we', 'see', 'equals', 'n', 'tree', 'depth-first search']",3
862,Find And Replace in String,"['to', 'string', 'perform', 'replace', 'groups', 'letters', 'new', 'ones', 'necessarily', 'each', 'replacement', 'operation', 'starting', 'index', 'source', 'target', 'the', 'rule', 'position', 'original', 'string', 'replace', 'occurrence', 'if', 'for', 'replacement', 'x', 'position', 'original', 'string', 'replace', 'using', 'another', 'example', 's', 'replacement', 'operation', 'x', 'well', 'another', 'replacement', 'x', 'second', 'operation', 'nothing', 'original', 'all', 'operations', 'occur', 'guaranteed', 'overlap', 'indexes', 'valid', 'test', 's', 'indexes', 'sources', 'targets', 'starts', 'index', 'replaced', 'starts', 'index', 'replaced', 's', 'indexes', 'sources', 'targets', 'starts', 'index', 'replaced', 'starts', 'index', 'original', 'all', 'characters', 'given', 'inputs', 'lowercase', 'string']",2
861,Flipping an Image,"['given', 'binary', 'matrix', 'want', 'flip', 'image', 'invert', 'return', 'resulting', 'to', 'flip', 'image', 'horizontally', 'means', 'row', 'image', 'for', 'results', 'to', 'invert', 'image', 'replaced', 'replaced', 'first', 'reverse', 'invert', 'first', 'reverse', 'then', 'invert', 'array']",1
860,Design Circular Queue,"['design', 'implementation', 'circular', 'the', 'circular', 'queue', 'linear', 'data', 'structure', 'operations', 'performed', 'based', 'fifo', 'in', 'first', 'principle', 'last', 'position', 'connected', 'back', 'first', 'position', 'make', 'it', 'also', 'called', 'one', 'benefits', 'circular', 'queue', 'make', 'use', 'spaces', 'front', 'in', 'normal', 'queue', 'becomes', 'cannot', 'insert', 'next', 'element', 'even', 'space', 'front', 'but', 'using', 'circular', 'use', 'space', 'store', 'new', 'your', 'implementation', 'support', 'following', 'set', 'size', 'queue', 'get', 'front', 'item', 'if', 'queue', 'return', 'get', 'last', 'item', 'if', 'queue', 'return', 'insert', 'element', 'circular', 'return', 'true', 'operation', 'delete', 'element', 'circular', 'return', 'true', 'operation', 'checks', 'whether', 'circular', 'queue', 'empty', 'checks', 'whether', 'circular', 'queue', 'full', 'mycircularqueue', 'circularqueue', 'new', 'set', 'size', 'return', 'return', 'return', 'return', 'queue', 'return', 'return', 'return', 'return', 'return', 'all', 'values', 'range', 'the', 'number', 'operations', 'range', 'please', 'use', 'queue', 'design', 'queue']",2
859,Design Circular Deque,"['design', 'implementation', 'circular', 'queue', 'your', 'implementation', 'support', 'following', 'set', 'size', 'deque', 'adds', 'item', 'front', 'return', 'true', 'operation', 'adds', 'item', 'rear', 'return', 'true', 'operation', 'deletes', 'item', 'front', 'return', 'true', 'operation', 'deletes', 'item', 'rear', 'return', 'true', 'operation', 'gets', 'front', 'item', 'if', 'deque', 'return', 'gets', 'last', 'item', 'if', 'deque', 'return', 'checks', 'whether', 'deque', 'empty', 'checks', 'whether', 'deque', 'full', 'mycirculardeque', 'circulardeque', 'new', 'set', 'size', 'return', 'return', 'return', 'return', 'queue', 'return', 'return', 'return', 'return', 'return', 'all', 'values', 'range', 'the', 'number', 'operations', 'range', 'please', 'use', 'deque', 'design', 'queue']",2
858,Masking Personal Information,"['we', 'given', 'information', 'string', 'may', 'email', 'address', 'phone', 'we', 'would', 'like', 'mask', 'information', 'according', 'email', 'we', 'define', 'string', 'length', 'lowercase', 'an', 'email', 'address', 'starts', 'followed', 'followed', 'followed', 'all', 'email', 'addresses', 'valid', 'format', 'to', 'mask', 'names', 'must', 'converted', 'lowercase', 'letters', 'first', 'last', 'letter', 'first', 'name', 'must', 'replaced', 'asterisks', 'phone', 'a', 'phone', 'number', 'string', 'consisting', 'digits', 'characters', 'set', 'may', 'assume', 'the', 'last', 'digits', 'make', 'digits', 'make', 'country', 'note', 'country', 'code', 'we', 'want', 'expose', 'last', 'mask', 'the', 'formatted', 'masked', 'represents', 'exposed', 'to', 'mask', 'phone', 'number', 'country', 'code', 'like', 'write', 'form', 'the', 'first', 'local', 'number', 'exist', 'country', 'for', 'digit', 'phone', 'number', 'note', 'extraneous', 'characters', 'like', 'well', 'dashes', 'plus', 'signs', 'part', 'formatting', 'scheme', 'return', 'correct', 'information', 'names', 'converted', 'letters', 'first', 'last', 'letter', 'first', 'name', 'replaced', 'must', 'asterisks', 'first', 'last', 'letter', 'first', 'name', 'digits', 'phone', 'means', 'digits', 'make', 'local', 'digits', 'country', 'code', 'digits', 'local', 'emails', 'length', 'least', 'phone', 'numbers', 'length', 'least', 'string']",2
857,Positions of Large Groups,"['in', 'lowercase', 'letters', 'form', 'consecutive', 'groups', 'for', 'string', 'like', 's', 'groups', 'call', 'group', 'large', 'we', 'would', 'like', 'starting', 'ending', 'positions', 'every', 'large', 'the', 'final', 'answer', 'lexicographic', 'single', 'large', 'group', 'starting', 'ending', 'positions', 'we', 'large', 'array']",1
856,Consecutive Numbers Sum,"['given', 'positive', 'many', 'ways', 'write', 'sum', 'positive', 'n', 'math']",3
855,Unique Letter String,"['a', 'character', 'unique', 'string', 's', 'occurs', 'exactly', 'for', 'string', 's', 'unique', 'characters', 'define', 'number', 'unique', 'characters', 'string', 'for', 'given', 'string', 's', 'calculate', 'sum', 'substrings', 'if', 'two', 'equal', 'substrings', 'different', 'positions', 'consider', 'since', 'answer', 'all', 'possible', 'substrings', 'evey', 'substring', 'composed', 'unique', 'sum', 'lengths', 'substring', 'the', 'example', 'except', 'two pointers']",3
854,Making A Large Island,"['in', 'grid', 'change', 'one', 'size', 'largest', 'island', 'connected', 'group', 'change', 'one', 'connect', 'two', 'get', 'island', 'area', 'change', 'make', 'island', 'one', 'island', 'area', 'change', 'one', 'island', 'area', 'depth-first search']",3
853,Most Profit Assigning Work,"['we', 'difficulty', 'profit', 'now', 'ability', 'means', 'worker', 'complete', 'job', 'difficulty', 'every', 'worker', 'assigned', 'one', 'one', 'completed', 'multiple', 'for', 'people', 'attempt', 'job', 'pays', 'total', 'profit', 'if', 'worker', 'cannot', 'complete', 'profit', 'what', 'profit', 'difficulty', 'profit', 'worker', 'workers', 'assigned', 'jobs', 'difficulty', 'get', 'profit', 'two pointers']",2
852,Friends Of Appropriate Ages,"['some', 'people', 'make', 'friend', 'ages', 'given', 'age', 'person', 'a', 'not', 'friend', 'request', 'person', 'b', 'following', 'conditions', 'a', 'friend', 'request', 'note', 'requests', 'b', 'necessarily', 'request', 'people', 'friend', 'request', 'how', 'many', 'total', 'friend', 'requests', 'people', 'friend', 'request', 'friend', 'requests', 'made', 'friend', 'requests', 'made', 'array']",2
851,Goat Latin,"['a', 'sentence', 's', 'composed', 'words', 'separated', 'each', 'word', 'consists', 'lowercase', 'uppercase', 'letters', 'we', 'would', 'like', 'convert', 'sentence', 'language', 'similar', 'pig', 'the', 'rules', 'goat', 'latin', 'if', 'word', 'begins', 'vowel', 'append', 'end', 'word', 'becomes', 'if', 'word', 'begins', 'consonant', 'remove', 'first', 'letter', 'append', 'add', 'word', 'add', 'one', 'letter', 'end', 'word', 'per', 'word', 'index', 'starting', 'first', 'word', 'gets', 'added', 'second', 'word', 'gets', 'added', 'end', 'return', 'sentence', 'representing', 'conversion', 'speak', 'goat', 'peaksmaaa', 'oatgmaaaa', 'quick', 'brown', 'fox', 'jumped', 'lazy', 'uickqmaaa', 'rownbmaaaa', 'oxfmaaaaa', 'umpedjmaaaaaa', 'overmaaaaaaa', 'hetmaaaaaaaa', 'azylmaaaaaaaaa', 's', 'contains', 'lowercase', 'one', 'space', 'string']",1
843,Binary Trees With Factors,"['given', 'array', 'unique', 'integer', 'strictly', 'greater', 'we', 'make', 'binary', 'tree', 'using', 'number', 'may', 'used', 'number', 'each', 'equal', 'product', 'values', 'how', 'many', 'binary', 'trees', 'return', 'answer', 'modulo', 'a', 'we', 'make', 'a', 'we', 'make']",2
842,Card Flipping Game,"['on', 'table', 'n', 'positive', 'integer', 'printed', 'front', 'back', 'card', 'we', 'flip', 'number', 'choose', 'if', 'number', 'x', 'back', 'front', 'number', 'x', 'what', 'smallest', 'number', 'if', 'number', 'output', 'represent', 'number', 'front', 'back', 'card', 'swaps', 'front', 'back', 'value', 'front', 'back', 'vice', 'fronts', 'backs', 'if', 'flip', 'second', 'fronts', 'backs', 'we', 'choose', 'second', 'number', 'front']",2
841,Shortest Distance to a Character,"['given', 'string', 'character', 'return', 'array', 'integers', 'representing', 'shortest', 'distance', 'character', 'c', 's', 'c', 's', 'string', 'length', 'single', 'guaranteed', 'string', 'all', 'letters', 's', 'c']",1
839,Short Encoding of Words,"['given', 'list', 'may', 'encode', 'writing', 'reference', 'string', 's', 'list', 'indexes', 'for', 'list', 'words', 'write', 's', 'indexes', 'then', 'recover', 'word', 'reading', 'reference', 'string', 'index', 'reach', 'what', 'length', 'shortest', 'reference', 'string', 's', 'possible', 'encodes', 'given', 'words', 's', 'indexes', 'each']",2
838,Design Linked List,"['design', 'linked', 'you', 'choose', 'use', 'singly', 'linked', 'list', 'doubly', 'linked', 'a', 'node', 'list', 'two', 'val', 'value', 'current', 'next', 'if', 'want', 'use', 'doubly', 'linked', 'attribute', 'prev', 'indicate', 'previous', 'node', 'linked', 'assume', 'nodes', 'linked', 'list', 'implement', 'functions', 'linked', 'list', 'get', 'value', 'linked', 'if', 'index', 'return', 'add', 'node', 'value', 'first', 'element', 'linked', 'after', 'new', 'node', 'first', 'node', 'linked', 'append', 'node', 'value', 'last', 'element', 'linked', 'add', 'node', 'value', 'linked', 'length', 'node', 'appended', 'end', 'linked', 'if', 'index', 'greater', 'node', 'linked', 'index', 'mylinkedlist', 'linkedlist', 'new', 'linked', 'list', 'becomes', 'returns', 'linked', 'list', 'returns', 'all', 'values', 'range', 'the', 'number', 'operations', 'range', 'please', 'use', 'linkedlist', 'linked list', 'design']",1
837,Most Common Word,"['given', 'list', 'banned', 'return', 'frequent', 'word', 'list', 'banned', 'it', 'guaranteed', 'least', 'one', 'word', 'answer', 'words', 'list', 'banned', 'words', 'given', 'free', 'words', 'paragraph', 'case', 'the', 'answer', 'paragraph', 'hit', 'hit', 'ball', 'flew', 'far', 'banned', 'occurs', 'banned', 'occurs', 'twice', 'word', 'frequent', 'word', 'note', 'words', 'paragraph', 'case', 'punctuation', 'ignored', 'adjacent', 'answer', 'even', 'though', 'occurs', 'the', 'answer', 'written', 'lowercase', 'occurrences', 'even', 'proper', 'paragraph', 'consists', 'punctuation', 'symbols', 'there', 'hyphens', 'hyphenated', 'words', 'consist', 'never', 'apostrophes', 'punctuation', 'string']",1
836,Race Car,"['your', 'car', 'starts', 'position', 'speed', 'infinite', 'number', 'car', 'go', 'negative', 'your', 'car', 'drives', 'automatically', 'according', 'sequence', 'instructions', 'a', 'r', 'when', 'get', 'instruction', 'car', 'speed', 'when', 'get', 'instruction', 'car', 'speed', 'positive', 'position', 'stays', 'for', 'commands', 'car', 'goes', 'positions', 'speed', 'goes', 'now', 'target', 'say', 'length', 'shortest', 'sequence', 'instructions', 'get', 'target', 'the', 'shortest', 'instruction', 'sequence', 'your', 'position', 'goes', 'target', 'the', 'shortest', 'instruction', 'sequence', 'your', 'position', 'goes', 'target', 'dynamic programming', 'heap']",3
835,Linked List Components,"['we', 'head', 'node', 'linked', 'list', 'integer', 'we', 'also', 'given', 'subset', 'values', 'linked', 'return', 'number', 'connected', 'components', 'two', 'values', 'connected', 'appear', 'consecutively', 'linked', 'g', 'two', 'connected', 'g', 'two', 'connected', 'linked', 'list', 'given', 'n', 'the', 'value', 'node', 'linked', 'list', 'range', 'n', 'g', 'subset', 'values', 'linked', 'linked list']",2
834,Ambiguous Coordinates,"['we', 'like', 'decimal', 'ended', 'return', 'list', 'strings', 'possibilities', 'original', 'coordinates', 'could', 'our', 'original', 'representation', 'never', 'extraneous', 'never', 'started', 'numbers', 'like', 'number', 'represented', 'decimal', 'point', 'within', 'number', 'never', 'occurs', 'without', 'least', 'one', 'digit', 'occuring', 'never', 'started', 'numbers', 'like', 'the', 'final', 'answer', 'list', 'returned', 'also', 'note', 'coordinates', 'final', 'exactly', 'one', 'space', 'elements', 's', 'string']",2
833,Bus Routes,"['we', 'list', 'bus', 'each', 'bus', 'route', 'for', 'example', 'means', 'travels', 'sequence', 'we', 'start', 'bus', 'stop', 's', 'want', 'go', 'bus', 'stop', 'travelling', 'buses', 'least', 'number', 'buses', 'must', 'take', 'reach', 'return', 'routes', 's', 't', 'the', 'best', 'strategy', 'take', 'first', 'bus', 'bus', 'stop', 'take', 'second', 'bus', 'bus', 'stop', 'breadth-first search']",3
832,Binary Tree Pruning,"['we', 'given', 'head', 'node', 'binary', 'additionally', 'every', 'value', 'either', 'return', 'tree', 'every', 'subtree', 'given', 'containing', 'subtree', 'node', 'x', 'plus', 'every', 'node', 'descendant', 'only', 'red', 'nodes', 'satisfy', 'property', 'subtree', 'containing', 'the', 'diagram', 'right', 'represents', 'the', 'binary', 'the', 'value', 'node', 'tree']",2
831,Largest Sum of Averages,"['we', 'partition', 'row', 'numbers', 'k', 'adjacent', 'score', 'sum', 'average', 'what', 'largest', 'score', 'note', 'partition', 'must', 'use', 'every', 'number', 'scores', 'necessarily', 'a', 'k', 'the', 'best', 'choice', 'partition', 'a', 'the', 'answer', 'we', 'could', 'also', 'partitioned', 'a', 'that', 'partition', 'would', 'lead', 'score', 'k', 'answers', 'within', 'correct', 'answer', 'accepted', 'dynamic programming']",2
830,Largest Triangle Area,"['you', 'list', 'points', 'return', 'area', 'largest', 'triangle', 'formed', 'points', 'the', 'five', 'points', 'show', 'figure', 'the', 'red', 'triangle', 'no', 'points', 'answers', 'true', 'value', 'accepted', 'math']",1
829,Subdomain Visit Count,"['a', 'website', 'domain', 'like', 'consists', 'various', 'at', 'top', 'next', 'lowest', 'when', 'visit', 'domain', 'like', 'also', 'visit', 'parent', 'domains', 'call', 'count', 'number', 'visits', 'domain', 'followed', 'followed', 'an', 'example', 'domain', 'might', 'we', 'given', 'list', 'cpdomains', 'we', 'would', 'like', 'list', 'format', 'explicitly', 'counts', 'number', 'visits', 'we', 'one', 'website', 'as', 'discussed', 'subdomain', 'also', 'so', 'visited', 'we', 'visit', 'for', 'visit', 'the', 'length', 'cpdomains', 'the', 'length', 'domain', 'name', 'exceed', 'each', 'address', 'either', 'the', 'input', 'domain', 'exceed', 'the', 'answer', 'output', 'returned', 'hash table']",1
828,Chalkboard XOR Game,"['we', 'given', 'integers', 'written', 'alice', 'bob', 'take', 'turns', 'erasing', 'exactly', 'one', 'number', 'alice', 'starting', 'if', 'erasing', 'number', 'bitwise', 'xor', 'elements', 'chalkboard', 'player', 'say', 'bitwise', 'xor', 'one', 'element', 'element', 'bitwise', 'xor', 'elements', 'player', 'starts', 'turn', 'bitwise', 'xor', 'elements', 'chalkboard', 'equal', 'player', 'return', 'true', 'alice', 'wins', 'assuming', 'players', 'play', 'nums', 'alice', 'two', 'erase', 'erase', 'if', 'erases', 'nums', 'array', 'becomes', 'the', 'bitwise', 'xor', 'elements', 'chalkboard', 'xor', 'now', 'bob', 'remove', 'element', 'alice', 'one', 'erase', 'last', 'element', 'if', 'alice', 'erases', 'nums', 'becomes', 'the', 'bitwise', 'xor', 'elements', 'chalkboard', 'xor', 'alice', 'n', 'math']",3
827,Expressive Words,"['sometimes', 'people', 'repeat', 'letters', 'represent', 'extra', 'in', 'strings', 'like', 'groups', 'adjacent', 'letters', 'for', 'given', 'string', 'query', 'word', 'stretchy', 'made', 'equal', 's', 'following', 'extension', 'choose', 'group', 'consisting', 'add', 'number', 'characters', 'c', 'group', 'size', 'group', 'for', 'starting', 'could', 'extension', 'group', 'get', 'cannot', 'get', 'since', 'group', 'size', 'less', 'could', 'another', 'extension', 'like', 'get', 'if', 's', 'query', 'word', 'would', 'stretchy', 'two', 'extension', 'given', 'list', 'query', 'return', 'number', 'words', 's', 'words', 'we', 'extend', 'word', 'get', 'we', 'extend', 'get', 'group', 'size', 's', 'words', 'letters', 'string']",2
826,Soup Servings,"['there', 'two', 'types', 'type', 'a', 'type', 'initially', 'n', 'ml', 'type', 'there', 'four', 'kinds', 'ml', 'soup', 'a', 'ml', 'soup', 'b', 'ml', 'soup', 'a', 'soup', 'b', 'serve', 'ml', 'soup', 'a', 'ml', 'soup', 'b', 'serve', 'soup', 'a', 'soup', 'b', 'when', 'serve', 'give', 'someone', 'longer', 'each', 'choose', 'four', 'operations', 'equal', 'probability', 'if', 'remaining', 'volume', 'soup', 'enough', 'complete', 'much', 'we', 'stop', 'longer', 'quantity', 'types', 'note', 'operation', 'soup', 'b', 'used', 'return', 'probability', 'soup', 'a', 'plus', 'half', 'probability', 'a', 'b', 'become', 'empty', 'n', 'if', 'choose', 'first', 'two', 'a', 'become', 'empty', 'for', 'third', 'a', 'b', 'become', 'empty', 'for', 'fourth', 'b', 'become', 'empty', 'so', 'total', 'probability', 'a', 'becoming', 'empty', 'first', 'plus', 'half', 'probability', 'a', 'b', 'become', 'empty', 'n', 'answers', 'true', 'value', 'accepted', 'dynamic programming']",2
825,Max Increase to Keep City Skyline,"['in', 'dimensional', 'array', 'value', 'represents', 'height', 'building', 'located', 'we', 'allowed', 'increase', 'height', 'number', 'amount', 'different', 'different', 'considered', 'at', 'viewed', 'four', 'original', 'a', 'skyline', 'outer', 'contour', 'rectangles', 'formed', 'buildings', 'viewed', 'following', 'what', 'maximum', 'total', 'sum', 'height', 'buildings', 'grid', 'the', 'grid', 'the', 'skyline', 'viewed', 'top', 'bottom', 'the', 'skyline', 'viewed', 'left', 'right', 'the', 'grid', 'increasing', 'height', 'buildings', 'without', 'affecting', 'skylines', 'gridnew', 'all', 'heights', 'range', 'all', 'buildings', 'occupy', 'entire', 'grid', 'x', 'x', 'rectangular']",2
824,Number of Lines To Write String,"['we', 'write', 'letters', 'given', 'string', 'left', 'right', 'each', 'line', 'maximum', 'width', 'writing', 'letter', 'would', 'cause', 'width', 'line', 'exceed', 'written', 'next', 'we', 'given', 'array', 'width', 'width', 'width', 'now', 'answer', 'two', 'many', 'lines', 'least', 'one', 'character', 'width', 'used', 'last', 'return', 'answer', 'integer', 'list', 'length', 'widths', 's', 'all', 'letters', 'length', 'to', 'write', 'need', 'two', 'full', 'lines', 'one', 'line', 'widths', 's', 'all', 'letters', 'except', 'length', 'cover', 'for', 'last', 'written', 'second', 'line', 'units', 'left', 'first', 'so', 'answer', 'plus', 'units', 'second', 'the', 'length', 's', 's', 'contain', 'lowercase', 'widths', 'array', 'length', 'range']",1
823,Split Array With Same Average,"['in', 'given', 'integer', 'array', 'must', 'move', 'every', 'element', 'a', 'either', 'list', 'b', 'list', 'c', 'initially', 'start', 'return', 'true', 'possible', 'average', 'value', 'b', 'equal', 'average', 'value', 'b', 'c', 'we', 'split', 'array', 'average', 'the', 'length', 'a', 'range', 'math']",3
822,Unique Morse Code Words,"['international', 'morse', 'code', 'defines', 'standard', 'encoding', 'letter', 'mapped', 'series', 'dots', 'maps', 'maps', 'maps', 'for', 'full', 'table', 'letters', 'english', 'alphabet', 'given', 'given', 'list', 'word', 'written', 'concatenation', 'morse', 'code', 'for', 'written', 'concatenation', 'call', 'return', 'number', 'different', 'transformations', 'among', 'words', 'words', 'the', 'transformation', 'word', 'there', 'different', 'the', 'length', 'words', 'each', 'length', 'range', 'consist', 'lowercase', 'string']",1
821,Bricks Falling When Hit,"['we', 'grid', 'cell', 'represent', 'a', 'brick', 'drop', 'directly', 'connected', 'top', 'least', 'one', 'adjacent', 'bricks', 'we', 'each', 'time', 'want', 'erasure', 'location', 'brick', 'location', 'bricks', 'return', 'array', 'representing', 'number', 'bricks', 'drop', 'erasure', 'grid', 'hits', 'if', 'erase', 'brick', 'brick', 'so', 'return', 'grid', 'hits', 'when', 'erase', 'brick', 'brick', 'already', 'disappeared', 'due', 'last', 'so', 'erasure', 'cause', 'bricks', 'note', 'erased', 'brick', 'counted', 'dropped', 'the', 'number', 'rows', 'columns', 'grid', 'the', 'number', 'erasures', 'exceed', 'area', 'it', 'guaranteed', 'erasure', 'different', 'located', 'inside', 'an', 'erasure', 'may', 'refer', 'location', 'brick', 'bricks', 'union find']",3
820,Find Eventual Safe States,"['in', 'directed', 'start', 'node', 'every', 'walk', 'along', 'directed', 'edge', 'if', 'reach', 'node', 'terminal', 'outgoing', 'directed', 'say', 'starting', 'node', 'eventually', 'must', 'eventually', 'walk', 'terminal', 'more', 'exists', 'natural', 'number', 'k', 'choice', 'must', 'stopped', 'terminal', 'node', 'less', 'k', 'which', 'nodes', 'eventually', 'return', 'array', 'sorted', 'the', 'directed', 'graph', 'n', 'nodes', 'labels', 'n', 'length', 'given', 'following', 'list', 'labels', 'j', 'directed', 'edge', 'graph', 'here', 'diagram', 'graph', 'length', 'the', 'number', 'edges', 'graph', 'exceed', 'each', 'sorted', 'list', 'different', 'chosen', 'within', 'range', 'depth-first search', 'graph']",2
819,Minimum Swaps To Make Sequences Increasing,"['we', 'two', 'integer', 'sequences', 'a', 'b', 'we', 'allowed', 'swap', 'elements', 'note', 'elements', 'index', 'position', 'respective', 'at', 'end', 'number', 'a', 'b', 'strictly', 'sequence', 'strictly', 'increasing', 'given', 'a', 'return', 'minimum', 'number', 'swaps', 'make', 'sequences', 'strictly', 'it', 'guaranteed', 'given', 'input', 'always', 'makes', 'a', 'b', 'swap', 'then', 'sequences', 'a', 'b', 'strictly', 'b', 'arrays', 'length', 'range', 'integer', 'values', 'range', 'dynamic programming']",2
817,Design HashMap,"['design', 'using', 'hash', 'table', 'to', 'design', 'include', 'pair', 'if', 'value', 'already', 'exists', 'update', 'returns', 'value', 'specified', 'key', 'map', 'contains', 'mapping', 'mapping', 'value', 'key', 'map', 'contains', 'mapping', 'myhashmap', 'hashmap', 'new', 'returns', 'returns', 'update', 'existing', 'returns', 'remove', 'mapping', 'returns', 'all', 'keys', 'values', 'range', 'the', 'number', 'operations', 'range', 'please', 'use', 'hashmap', 'hash table', 'design']",1
816,Design HashSet,"['design', 'using', 'hash', 'table', 'to', 'design', 'include', 'value', 'return', 'whether', 'value', 'exists', 'hashset', 'remove', 'value', 'if', 'value', 'exist', 'myhashset', 'hashset', 'new', 'returns', 'returns', 'false', 'returns', 'returns', 'false', 'all', 'values', 'range', 'the', 'number', 'operations', 'range', 'please', 'use', 'hashset', 'hash table', 'design']",1
815,Champagne Tower,"['we', 'stack', 'glasses', 'first', 'row', 'second', 'row', 'each', 'glass', 'holds', 'one', 'cup', 'champagne', 'poured', 'first', 'glass', 'when', 'top', 'glass', 'excess', 'liquid', 'poured', 'fall', 'equally', 'glass', 'immediately', 'left', 'right', 'when', 'glasses', 'become', 'excess', 'champagne', 'fall', 'equally', 'left', 'right', 'glass', 'bottom', 'row', 'excess', 'champagne', 'fall', 'for', 'one', 'cup', 'champagne', 'top', 'glass', 'after', 'two', 'cups', 'champagne', 'two', 'glasses', 'second', 'row', 'half', 'after', 'three', 'cups', 'champagne', 'two', 'cups', 'become', 'full', 'full', 'glasses', 'total', 'after', 'four', 'cups', 'champagne', 'third', 'row', 'middle', 'glass', 'half', 'two', 'outside', 'glasses', 'quarter', 'pictured', 'now', 'pouring', 'integer', 'cups', 'return', 'full', 'glass', 'row', 'j', 'poured', 'we', 'poured', 'cup', 'champange', 'top', 'glass', 'tower', 'indexed', 'there', 'excess', 'liquid', 'glasses', 'top', 'glass', 'remain', 'poured', 'we', 'poured', 'cups', 'champange', 'top', 'glass', 'tower', 'indexed', 'there', 'one', 'cup', 'excess', 'the', 'glass', 'indexed', 'glass', 'indexed', 'share', 'excess', 'liquid', 'get', 'half', 'cup', 'range', 'range']",2
814,Smallest Rotation with Highest Score,"['array', 'may', 'rotate', 'integer', 'k', 'array', 'becomes', 'entries', 'less', 'equal', 'index', 'worth', 'for', 'rotate', 'k', 'becomes', 'this', 'worth', 'points', 'over', 'possible', 'return', 'rotation', 'index', 'k', 'corresponds', 'highest', 'score', 'could', 'if', 'multiple', 'return', 'smallest', 'index', 'scores', 'k', 'listed', 'k', 'a', 'score', 'k', 'a', 'score', 'k', 'a', 'score', 'k', 'a', 'score', 'k', 'a', 'score', 'so', 'choose', 'k', 'highest', 'a', 'always', 'points', 'matter', 'so', 'choose', 'smallest', 'range']",3
813,All Paths From Source to Target,"['given', 'acyclic', 'graph', 'n', 'find', 'possible', 'paths', 'node', 'node', 'return', 'the', 'graph', 'given', 'nodes', 'list', 'nodes', 'j', 'edge', 'the', 'graph', 'looks', 'like', 'v', 'there', 'two', 'the', 'number', 'nodes', 'graph', 'range', 'you', 'print', 'different', 'paths', 'keep', 'order', 'nodes', 'inside', 'one']",2
812,Rotate String,"['we', 'given', 'two', 'a', 'a', 'shift', 'a', 'consists', 'taking', 'string', 'a', 'moving', 'leftmost', 'character', 'rightmost', 'for', 'a', 'one', 'shift', 'return', 'true', 'a', 'become', 'b', 'number', 'shifts', 'a', 'b', 'a', 'b', 'a', 'b', 'length']",1
811,Number of Subarrays with Bounded Maximum,"['we', 'given', 'array', 'a', 'positive', 'two', 'positive', 'integers', 'l', 'r', 'return', 'number', 'subarrays', 'value', 'maximum', 'array', 'element', 'subarray', 'least', 'l', 'a', 'l', 'r', 'there', 'three', 'subarrays', 'meet', 'integer', 'range', 'the', 'length', 'a', 'range', 'array']",2
810,Valid Tic-Tac-Toe State,"['a', 'board', 'given', 'string', 'array', 'return', 'true', 'possible', 'reach', 'board', 'position', 'course', 'valid', 'the', 'board', 'x', 'consists', 'characters', 'the', 'character', 'represents', 'empty', 'here', 'rules', 'players', 'take', 'turns', 'placing', 'characters', 'empty', 'squares', 'the', 'first', 'player', 'always', 'places', 'second', 'player', 'always', 'places', 'characters', 'always', 'placed', 'empty', 'never', 'filled', 'the', 'game', 'ends', 'character', 'filling', 'the', 'game', 'also', 'ends', 'squares', 'no', 'moves', 'played', 'game', 'board', 'the', 'first', 'player', 'always', 'plays', 'board', 'x', 'players', 'take', 'turns', 'making', 'board', 'board', 'board', 'array', 'string', 'length', 'each', 'character', 'set', 'math', 'recursion']",2
809,Preimage Size of Factorial Zeroes Function,"['let', 'number', 'zeroes', 'end', 'for', 'zeroes', 'zeroes', 'given', 'find', 'many', 'integers', 'x', 'property', 'k', 'end', 'k', 'k', 'there', 'x', 'ends', 'k', 'k', 'integer', 'range', 'binary search']",3
808,Number of Matching Subsequences,"['given', 'string', 's', 'words', 'find', 'number', 'subsequence', 's', 'words', 'there', 'three', 'words', 'words', 'subsequence', 'all', 'words', 'words', 's', 'consists', 'lowercase', 'the', 'length', 's', 'range', 'the', 'length', 'words', 'range', 'the', 'length', 'range', 'array']",2
807,Custom Sort String,"['s', 't', 'strings', 'composed', 'lowercase', 'in', 'letter', 'occurs', 's', 'sorted', 'custom', 'order', 'we', 'want', 'permute', 'characters', 't', 'match', 'order', 's', 'more', 'x', 'occurs', 'x', 'occur', 'returned', 'return', 'permutation', 't', 'satisfies', 's', 't', 'appear', 'order', 'since', 'appear', 'position', 'also', 'valid', 's', 'length', 'character', 'repeated', 't', 'length', 's', 't', 'consist', 'lowercase', 'letters', 'string']",2
806,Domino and Tromino Tiling,"['we', 'two', 'types', 'domino', 'tromino', 'these', 'shapes', 'may', 'xx', 'xx', 'given', 'many', 'ways', 'tile', 'x', 'n', 'return', 'answer', 'modulo', 'every', 'square', 'must', 'covered', 'two', 'tilings', 'different', 'two', 'adjacent', 'cells', 'board', 'exactly', 'one', 'tilings', 'squares', 'occupied', 'the', 'five', 'different', 'ways', 'listed', 'different', 'letters', 'indicates', 'different', 'xyz', 'xxz', 'xyy', 'xxy', 'xyz', 'yyz', 'xzz', 'xyy', 'xxy', 'range', 'dynamic programming']",2
805,Escape The Ghosts,"['you', 'playing', 'simplified', 'pacman', 'point', 'destination', 'there', 'several', 'ghosts', 'ghost', 'starts', 'each', 'ghosts', 'simultaneously', 'move', 'one', 'cardinal', 'going', 'previous', 'point', 'new', 'point', 'unit', 'distance', 'you', 'escape', 'reach', 'target', 'ghost', 'reaches', 'given', 'moves', 'ghosts', 'may', 'if', 'reach', 'square', 'time', 'count', 'return', 'true', 'possible', 'ghosts', 'target', 'you', 'directly', 'reach', 'destination', 'time', 'ghosts', 'located', 'way', 'catch', 'ghosts', 'target', 'you', 'need', 'reach', 'destination', 'ghost', 'lies', 'ghosts', 'target', 'the', 'ghost', 'reach', 'target', 'time', 'all', 'points', 'coordinates', 'absolute', 'value', 'the', 'number', 'ghosts', 'exceed', 'math']",2
804,Rotated Digits,"['x', 'good', 'number', 'rotating', 'digit', 'individually', 'get', 'valid', 'number', 'different', 'each', 'digit', 'must', 'rotated', 'cannot', 'choose', 'leave', 'a', 'number', 'valid', 'digit', 'remains', 'digit', 'rotate', 'rotate', 'rotate', 'rest', 'numbers', 'rotate', 'number', 'become', 'positive', 'number', 'many', 'numbers', 'x', 'n', 'there', 'four', 'good', 'numbers', 'range', 'note', 'good', 'since', 'remain', 'unchanged', 'range', 'string']",1
803,Cheapest Flights Within K Stops,"['there', 'n', 'cities', 'connected', 'each', 'fight', 'starts', 'arrives', 'price', 'now', 'given', 'cities', 'together', 'starting', 'city', 'src', 'task', 'find', 'cheapest', 'price', 'src', 'dst', 'k', 'if', 'output', 'n', 'edges', 'src', 'dst', 'k', 'the', 'graph', 'looks', 'like', 'the', 'cheapest', 'price', 'city', 'city', 'stop', 'costs', 'marked', 'red', 'n', 'edges', 'src', 'dst', 'k', 'the', 'graph', 'looks', 'like', 'the', 'cheapest', 'price', 'city', 'city', 'stop', 'costs', 'marked', 'blue', 'the', 'number', 'range', 'nodes', 'labeled', 'n', 'flights', 'range', 'n', 'the', 'format', 'flight', 'the', 'price', 'flight', 'range', 'k', 'range', 'n', 'dynamic programming', 'heap', 'breadth-first search']",2
802,K-th Smallest Prime Fraction,"['a', 'sorted', 'list', 'a', 'contains', 'plus', 'number', 'every', 'p', 'q', 'consider', 'fraction', 'what', 'smallest', 'fraction', 'return', 'answer', 'array', 'p', 'a', 'k', 'the', 'fractions', 'considered', 'sorted', 'order', 'the', 'third', 'fraction', 'a', 'k', 'a', 'length', 'each', 'k', 'binary search', 'heap']",3
801,Is Graph Bipartite?,"['given', 'return', 'true', 'recall', 'graph', 'bipartite', 'split', 'set', 'nodes', 'two', 'a', 'b', 'every', 'edge', 'graph', 'one', 'node', 'a', 'another', 'node', 'the', 'graph', 'given', 'following', 'list', 'indexes', 'j', 'edge', 'nodes', 'j', 'each', 'node', 'integer', 'there', 'self', 'edges', 'parallel', 'contain', 'contain', 'element', 'the', 'graph', 'looks', 'like', 'we', 'divide', 'vertices', 'two', 'the', 'graph', 'looks', 'like', 'we', 'cannot', 'find', 'way', 'divide', 'set', 'nodes', 'two', 'independent', 'graph', 'length', 'range', 'contain', 'integers', 'range', 'contain', 'duplicate', 'the', 'graph', 'element', 'j', 'depth-first search', 'breadth-first search', 'graph']",2
800,Letter Case Permutation,"['given', 'string', 'transform', 'every', 'letter', 'lowercase', 'uppercase', 'create', 'another', 'return', 'list', 'possible', 'strings', 'could', 's', 's', 's', 's', 'string', 'length', 's', 'consist', 'letters', 'backtracking', 'bit manipulation']",1
799,Minimum Distance Between BST Nodes,"['given', 'binary', 'search', 'tree', 'root', 'node', 'minimum', 'difference', 'values', 'two', 'different', 'nodes', 'root', 'note', 'root', 'treenode', 'the', 'given', 'tree', 'represented', 'following', 'minimum', 'difference', 'tree', 'occurs', 'node', 'node', 'also', 'node', 'node', 'the', 'size', 'bst', 'the', 'bst', 'always', 'value', 'value', 'tree', 'recursion']",1
798,Transform to Chessboard,"['an', 'n', 'x', 'n', 'board', 'contains', 'in', 'swap', 'rows', 'columns', 'what', 'minimum', 'number', 'moves', 'transform', 'board', 'board', 'if', 'task', 'return', 'board', 'one', 'potential', 'sequence', 'moves', 'shown', 'left', 'the', 'first', 'move', 'swaps', 'first', 'second', 'the', 'second', 'move', 'swaps', 'second', 'third', 'board', 'also', 'note', 'board', 'top', 'left', 'also', 'valid', 'board', 'no', 'matter', 'sequence', 'moves', 'cannot', 'end', 'valid', 'board', 'number', 'rows', 'number', 'range', 'array', 'math']",3
797,Rabbits in Forest,"['in', 'rabbit', 'some', 'subset', 'rabbits', 'tell', 'many', 'rabbits', 'color', 'those', 'answers', 'placed', 'return', 'minimum', 'number', 'rabbits', 'could', 'answers', 'the', 'two', 'rabbits', 'answered', 'could', 'say', 'the', 'rabbit', 'answered', 'red', 'answers', 'would', 'say', 'rabbit', 'answered', 'then', 'blue', 'rabbits', 'forest', 'answer', 'the', 'smallest', 'possible', 'number', 'rabbits', 'forest', 'therefore', 'answered', 'plus', 'answers', 'answers', 'answers', 'length', 'each', 'integer', 'range', 'hash table', 'math']",2
796,Reaching Points,"['a', 'move', 'consists', 'taking', 'point', 'transforming', 'either', 'given', 'starting', 'point', 'target', 'point', 'return', 'true', 'sequence', 'moves', 'exists', 'transform', 'point', 'return', 'sx', 'sy', 'tx', 'ty', 'one', 'series', 'moves', 'transforms', 'starting', 'point', 'target', 'sx', 'sy', 'tx', 'ty', 'sx', 'sy', 'tx', 'ty', 'ty', 'integers', 'range', 'math']",3
795,K-th Symbol in Grammar,"['on', 'first', 'write', 'now', 'every', 'subsequent', 'look', 'previous', 'row', 'replace', 'occurrence', 'occurrence', 'given', 'row', 'n', 'index', 'return', 'indexed', 'symbol', 'row', 'values', 'k', 'n', 'k', 'n', 'k', 'n', 'k', 'n', 'k', 'row', 'row', 'row', 'row', 'n', 'integer', 'range', 'k', 'integer', 'range', 'recursion']",2
794,Swim in Rising Water,"['on', 'n', 'x', 'n', 'square', 'represents', 'elevation', 'point', 'now', 'rain', 'starts', 'at', 'time', 'depth', 'water', 'everywhere', 'you', 'swim', 'square', 'another', 'adjacent', 'square', 'elevation', 'squares', 'individually', 'you', 'swim', 'infinite', 'distance', 'zero', 'of', 'must', 'stay', 'within', 'boundaries', 'grid', 'you', 'start', 'top', 'left', 'square', 'what', 'least', 'time', 'reach', 'bottom', 'right', 'square', 'at', 'time', 'grid', 'location', 'you', 'cannot', 'go', 'anywhere', 'else', 'adjacent', 'neighbors', 'higher', 'elevation', 'you', 'cannot', 'reach', 'point', 'time', 'when', 'depth', 'water', 'swim', 'anywhere', 'inside', 'the', 'final', 'route', 'marked', 'we', 'need', 'wait', 'time', 'n', 'permutation', 'binary search', 'heap', 'depth-first search', 'union find']",3
793,Swap Adjacent in LR String,"['in', 'string', 'composed', 'like', 'move', 'consists', 'either', 'replacing', 'one', 'occurrence', 'replacing', 'one', 'occurrence', 'given', 'starting', 'string', 'start', 'ending', 'string', 'return', 'true', 'exists', 'sequence', 'moves', 'transform', 'one', 'string', 'start', 'end', 'we', 'transform', 'start', 'end', 'following', 'rxxlrxrxl', 'xrxlrxrxl', 'xrlxrxrxl', 'xrlxxrrxl', 'both', 'start', 'end', 'consist', 'characters', 'brainteaser']",2
792,Binary Search,"['given', 'sorted', 'ascending', 'integer', 'array', 'nums', 'n', 'elements', 'target', 'write', 'function', 'search', 'target', 'if', 'target', 'return', 'otherwise', 'return', 'nums', 'target', 'exists', 'nums', 'index', 'nums', 'target', 'exist', 'nums', 'return', 'you', 'may', 'assume', 'elements', 'nums', 'n', 'range', 'the', 'value', 'element', 'nums', 'range', 'binary search']",1
790,Global and Local Inversions,"['we', 'permutation', 'a', 'n', 'n', 'length', 'the', 'number', 'inversions', 'number', 'j', 'j', 'n', 'the', 'number', 'local', 'inversions', 'number', 'n', 'return', 'number', 'global', 'inversions', 'equal', 'number', 'local', 'a', 'there', 'global', 'local', 'a', 'there', 'global', 'local', 'a', 'permutation', 'a', 'length', 'range', 'the', 'time', 'limit', 'problem', 'array', 'math']",2
789,Kth Largest Element in a Stream,"['design', 'class', 'kth', 'largest', 'element', 'note', 'kth', 'largest', 'element', 'sorted', 'kth', 'distinct', 'constructor', 'accepts', 'integer', 'k', 'integer', 'array', 'contains', 'initial', 'elements', 'for', 'call', 'method', 'return', 'element', 'representing', 'kth', 'largest', 'element', 'int', 'k', 'arr', 'kthlargest', 'kthlargest', 'new', 'returns', 'returns', 'returns', 'returns', 'returns', 'you', 'may', 'assume', 'k', 'heap']",1
787,Sliding Puzzle,"['on', 'tiles', 'represented', 'integers', 'empty', 'square', 'represented', 'a', 'move', 'consists', 'choosing', 'adjacent', 'number', 'swapping', 'the', 'state', 'board', 'solved', 'board', 'given', 'puzzle', 'return', 'least', 'number', 'moves', 'required', 'state', 'board', 'if', 'impossible', 'state', 'board', 'return', 'board', 'swap', 'one', 'board', 'no', 'number', 'moves', 'make', 'board', 'board', 'smallest', 'number', 'moves', 'solves', 'an', 'example', 'after', 'move', 'after', 'move', 'after', 'move', 'after', 'move', 'after', 'move', 'after', 'move', 'board', 'board', 'x', 'array', 'described', 'permutation', 'breadth-first search']",3
784,Insert into a Binary Search Tree,"['given', 'root', 'node', 'binary', 'search', 'tree', 'value', 'inserted', 'value', 'return', 'root', 'node', 'bst', 'it', 'guaranteed', 'new', 'value', 'exist', 'original', 'note', 'may', 'valid', 'ways', 'long', 'tree', 'remains', 'bst', 'you', 'return', 'for', 'given', 'and', 'value', 'you', 'return', 'binary', 'search', 'this', 'tree', 'also', 'tree']",2
783,Search in a Binary Search Tree,"['given', 'root', 'node', 'binary', 'search', 'tree', 'you', 'need', 'find', 'node', 'bst', 'value', 'equals', 'given', 'return', 'subtree', 'rooted', 'if', 'node', 'return', 'for', 'given', 'and', 'value', 'you', 'return', 'in', 'example', 'want', 'search', 'value', 'since', 'node', 'value', 'return', 'note', 'empty', 'tree', 'represented', 'therefore', 'would', 'see', 'expected', 'output', 'tree', 'tree']",1
782,Jewels and Stones,"['given', 'strings', 'j', 'representing', 'types', 'stones', 's', 'representing', 'stones', 'each', 'character', 's', 'type', 'stone', 'you', 'want', 'know', 'many', 'stones', 'also', 'the', 'letters', 'j', 'guaranteed', 'characters', 'j', 's', 'letters', 'case', 'considered', 'different', 'type', 'stone', 'j', 's', 'j', 's', 's', 'j', 'consist', 'letters', 'length', 'the', 'characters', 'j', 'hash table']",1
781,Basic Calculator IV,"['given', 'expression', 'evaluation', 'map', 'terms', 'evalvars', 'evalints', 'return', 'list', 'tokens', 'representing', 'simplified', 'an', 'expression', 'alternates', 'chunks', 'space', 'separating', 'chunk', 'a', 'chunk', 'either', 'expression', 'a', 'variable', 'string', 'lowercase', 'letters', 'including', 'note', 'variables', 'multiple', 'note', 'variables', 'never', 'leading', 'coefficient', 'unary', 'operator', 'like', 'expressions', 'evaluated', 'usual', 'brackets', 'addition', 'for', 'expression', 'answer', 'the', 'format', 'output', 'for', 'term', 'free', 'variables', 'write', 'free', 'variables', 'within', 'term', 'sorted', 'order', 'for', 'would', 'never', 'write', 'term', 'like', 'terms', 'degree', 'equal', 'number', 'free', 'variables', 'counting', 'degree', 'we', 'write', 'largest', 'degree', 'terms', 'answer', 'breaking', 'ties', 'lexicographic', 'order', 'ignoring', 'leading', 'coefficient', 'the', 'leading', 'coefficient', 'term', 'placed', 'directly', 'left', 'asterisk', 'separating', 'variables', 'a', 'leading', 'coefficient', 'still', 'an', 'example', 'well', 'formatted', 'answer', 'terms', 'constant', 'coefficient', 'for', 'expression', 'output', 'expression', 'evalvars', 'evalints', 'expression', 'temperature', 'evalvars', 'evalints', 'expression', 'evalvars', 'evalints', 'expression', 'evalvars', 'evalints', 'expression', 'b', 'c', 'b', 'c', 'evalvars', 'evalints', 'expression', 'evalvars', 'evalints', 'expression', 'length', 'range', 'evalints', 'equal', 'lengths', 'range', 'hash table', 'string', 'stack']",3
780,Max Chunks To Make Sorted,"['given', 'array', 'arr', 'permutation', 'split', 'array', 'number', 'individually', 'sort', 'after', 'concatenating', 'result', 'equals', 'sorted', 'what', 'number', 'chunks', 'could', 'arr', 'splitting', 'two', 'chunks', 'return', 'required', 'for', 'splitting', 'result', 'arr', 'we', 'split', 'two', 'splitting', 'highest', 'number', 'chunks', 'arr', 'length', 'range', 'permutation', 'array']",2
779,Max Chunks To Make Sorted II,"['this', 'question', 'chunks', 'make', 'except', 'integers', 'given', 'array', 'necessarily', 'input', 'array', 'could', 'length', 'elements', 'could', 'given', 'array', 'arr', 'integers', 'necessarily', 'split', 'array', 'number', 'individually', 'sort', 'after', 'concatenating', 'result', 'equals', 'sorted', 'what', 'number', 'chunks', 'could', 'arr', 'splitting', 'two', 'chunks', 'return', 'required', 'for', 'splitting', 'result', 'arr', 'we', 'split', 'two', 'splitting', 'highest', 'number', 'chunks', 'arr', 'length', 'range', 'integer', 'range', 'array']",3
778,Reorganize String,"['given', 'string', 'check', 'letters', 'rearranged', 'two', 'characters', 'adjacent', 'if', 'output', 'possible', 'if', 'return', 'empty', 's', 's', 's', 'consist', 'lowercase', 'letters', 'length', 'range', 'string', 'heap', 'greedy', 'sort']",2
777,Toeplitz Matrix,"['a', 'matrix', 'toeplitz', 'every', 'diagonal', 'now', 'given', 'm', 'x', 'n', 'matrix', 'matrix', 'in', 'in', 'diagonal', 'elements', 'answer', 'matrix', 'the', 'diagonal', 'different', 'matrix', 'array', 'matrix', 'number', 'rows', 'columns', 'range', 'integers', 'range', 'follow', 'what', 'matrix', 'stored', 'memory', 'limited', 'load', 'one', 'row', 'matrix', 'memory', 'what', 'matrix', 'large', 'load', 'partial', 'row', 'memory', 'array']",1
776,N-ary Tree Postorder Traversal,"['given', 'return', 'postorder', 'traversal', 'for', 'given', 'return', 'postorder', 'traversal', 'recursive', 'solution', 'could', 'tree']",1
775,N-ary Tree Preorder Traversal,"['given', 'return', 'preorder', 'traversal', 'for', 'given', 'return', 'preorder', 'traversal', 'recursive', 'solution', 'could', 'tree']",1
774,Maximum Depth of N-ary Tree,"['given', 'find', 'maximum', 'the', 'maximum', 'depth', 'number', 'nodes', 'along', 'longest', 'path', 'root', 'node', 'farthest', 'leaf', 'for', 'given', 'we', 'return', 'max', 'the', 'depth', 'tree', 'the', 'total', 'number', 'nodes', 'tree', 'depth-first search', 'breadth-first search']",1
773,Quad Tree Intersection,"['a', 'quadtree', 'tree', 'data', 'internal', 'node', 'exactly', 'four', 'bottomleft', 'quad', 'trees', 'often', 'used', 'partition', 'space', 'recursively', 'subdividing', 'four', 'quadrants', 'we', 'want', 'store', 'information', 'quad', 'the', 'quad', 'tree', 'used', 'represent', 'n', 'n', 'boolean', 'for', 'subdivided', 'four', 'children', 'nodes', 'values', 'region', 'represents', 'each', 'node', 'another', 'two', 'boolean', 'attributes', 'isleaf', 'isleaf', 'true', 'node', 'leaf', 'the', 'val', 'attribute', 'leaf', 'node', 'contains', 'value', 'region', 'for', 'two', 'quad', 'trees', 'a', 't', 't', 'f', 'f', 'f', 'f', 't', 't', 't', 't', 'f', 'your', 'task', 'implement', 'function', 'take', 'two', 'quadtrees', 'return', 'quadtree', 'represents', 'logical', 'or', 'two', 'c', 'f', 'f', 't', 't', 't', 't', 't', 't', 't', 'f', 'f', 't', 'f', 't', 'f', 'both', 'a', 'grids', 'size', 'n', 'n', 'guaranteed', 'power', 'if', 'want', 'know', 'quad', 'refer', 'the', 'logic', 'or', 'operation', 'defined', 'true', 'a', 'b', 'a', 'b']",1
772,Construct Quad Tree,"['we', 'want', 'use', 'quad', 'trees', 'store', 'n', 'x', 'n', 'boolean', 'each', 'cell', 'grid', 'true', 'the', 'root', 'node', 'represents', 'whole', 'for', 'subdivided', 'four', 'children', 'nodes', 'values', 'region', 'represents', 'each', 'node', 'another', 'two', 'boolean', 'attributes', 'isleaf', 'isleaf', 'true', 'node', 'leaf', 'the', 'val', 'attribute', 'leaf', 'node', 'contains', 'value', 'region', 'your', 'task', 'use', 'quad', 'tree', 'represent', 'given', 'the', 'following', 'example', 'may', 'help', 'understand', 'problem', 'given', 'x', 'grid', 'want', 'construct', 'corresponding', 'quad', 'it', 'divided', 'according', 'definition', 'the', 'corresponding', 'quad', 'tree', 'node', 'represented', 'for', 'represented', 'n', 'less', 'guaranteened', 'power', 'if', 'want', 'know', 'quad', 'refer']",2
770,Couples Holding Hands,"['n', 'couples', 'sit', 'seats', 'arranged', 'row', 'want', 'hold', 'we', 'want', 'know', 'minimum', 'number', 'swaps', 'every', 'couple', 'sitting', 'side', 'a', 'swap', 'consists', 'choosing', 'two', 'stand', 'switch', 'the', 'people', 'seats', 'represented', 'integer', 'couples', 'numbered', 'first', 'couple', 'second', 'couple', 'last', 'couple', 'the', 'initial', 'seating', 'given', 'value', 'person', 'initially', 'sitting', 'row', 'we', 'need', 'swap', 'second', 'third', 'row', 'all', 'couples', 'already', 'seated', 'side', 'even', 'range', 'row', 'guaranteed', 'permutation', 'greedy', 'union find', 'graph']",3
769,Largest Plus Sign,"['in', 'grid', 'every', 'cell', 'contains', 'except', 'cells', 'given', 'list', 'mines', 'what', 'largest', 'plus', 'sign', 'contained', 'return', 'order', 'plus', 'if', 'return', 'an', 'plus', 'sign', 'order', 'center', 'along', 'arms', 'length', 'going', 'made', 'this', 'demonstrated', 'diagrams', 'note', 'could', 'beyond', 'arms', 'plus', 'relevant', 'area', 'plus', 'sign', 'checked', 'examples', 'plus', 'signs', 'order', 'order', 'order', 'order', 'n', 'mines', 'in', 'largest', 'plus', 'sign', 'order', 'one', 'marked', 'n', 'mines', 'there', 'plus', 'sign', 'order', 'order', 'n', 'mines', 'there', 'plus', 'return', 'n', 'integer', 'range', 'mines', 'length', 'length', 'consist', 'integers', 'range', 'programs', 'submitted', 'judged', 'slightly', 'smaller', 'time', 'dynamic programming']",2
768,Partition Labels,"['a', 'string', 's', 'lowercase', 'letters', 'we', 'want', 'partition', 'string', 'many', 'parts', 'possible', 'letter', 'appears', 'one', 'return', 'list', 'integers', 'representing', 'size', 's', 'the', 'partition', 'this', 'partition', 'letter', 'appears', 'one', 'a', 'partition', 'like', 'splits', 's', 'less', 's', 'length', 'range', 's', 'consist', 'lowercase', 'letters', 'two pointers', 'greedy']",2
767,Prime Number of Set Bits in Binary Representation,"['given', 'two', 'integers', 'l', 'find', 'count', 'numbers', 'range', 'prime', 'number', 'set', 'bits', 'binary', 'number', 'set', 'bits', 'integer', 'number', 'present', 'written', 'for', 'written', 'binary', 'set', 'l', 'r', 'set', 'set', 'set', 'bits', 'set', 'bits', 'l', 'r', 'set', 'set', 'set', 'set', 'set', 'set', 'r', 'integers', 'l', 'r', 'range', 'r', 'l', 'bit manipulation']",1
766,Flatten a Multilevel Doubly Linked List,"['you', 'given', 'doubly', 'linked', 'list', 'addition', 'next', 'previous', 'could', 'child', 'may', 'may', 'point', 'separate', 'doubly', 'linked', 'these', 'child', 'lists', 'may', 'one', 'children', 'produce', 'multilevel', 'data', 'shown', 'example', 'flatten', 'list', 'nodes', 'appear', 'doubly', 'linked', 'you', 'given', 'head', 'first', 'level', 'explanation', 'given', 'following', 'multilevel', 'doubly', 'linked', 'we', 'return', 'following', 'flattened', 'doubly', 'linked', 'linked list', 'depth-first search']",2
764,N-ary Tree Level Order Traversal,"['given', 'return', 'level', 'order', 'traversal', 'left', 'level', 'for', 'given', 'we', 'return', 'level', 'order', 'the', 'depth', 'tree', 'the', 'total', 'number', 'nodes', 'tree', 'breadth-first search']",1
763,Special Binary String,"['special', 'binary', 'strings', 'binary', 'strings', 'following', 'two', 'the', 'number', 'equal', 'number', 'every', 'prefix', 'binary', 'string', 'least', 'many', 'given', 'special', 'string', 'move', 'consists', 'choosing', 'two', 'special', 'substrings', 'swapping', 'strings', 'consecutive', 'last', 'character', 'first', 'string', 'exactly', 'one', 'index', 'first', 'character', 'second', 'at', 'end', 'number', 'lexicographically', 'largest', 'resulting', 'string', 's', 'the', 'strings', 'this', 'lexicographically', 'largest', 'string', 'possible', 'number', 's', 'length', 's', 'guaranteed', 'special', 'binary', 'string', 'defined', 'string', 'recursion']",3
759,Set Intersection Size At Least Two,"['an', 'integer', 'interval', 'integers', 'set', 'consecutive', 'integers', 'including', 'find', 'minimum', 'size', 'set', 's', 'every', 'integer', 'interval', 'a', 'intersection', 's', 'a', 'size', 'least', 'intervals', 'consider', 'set', 's', 'for', 'least', 'elements', 's', 'smaller', 'size', 'set', 'fulfills', 'output', 'size', 'intervals', 'an', 'example', 'minimum', 'sized', 'set', 'intervals', 'length', 'range', 'length', 'representing', 'integer', 'integer', 'greedy']",3
757,Pyramid Transition Matrix,"['we', 'stacking', 'blocks', 'form', 'each', 'block', 'color', 'one', 'letter', 'we', 'allowed', 'place', 'color', 'block', 'c', 'top', 'two', 'adjacent', 'blocks', 'colors', 'a', 'abc', 'allowed', 'we', 'start', 'bottom', 'row', 'represented', 'single', 'we', 'also', 'start', 'list', 'allowed', 'triples', 'each', 'allowed', 'triple', 'represented', 'string', 'length', 'return', 'true', 'build', 'pyramid', 'way', 'otherwise', 'bottom', 'allowed', 'we', 'stack', 'pyramid', 'like', 'g', 'b', 'c', 'we', 'allowed', 'place', 'g', 'top', 'b', 'c', 'bcg', 'allowed', 'place', 'e', 'top', 'c', 'a', 'top', 'g', 'bottom', 'allowed', 'we', 'stack', 'pyramid', 'note', 'could', 'allowed', 'triples', 'c', 'bottom', 'string', 'length', 'range', 'allowed', 'length', 'range', 'letters', 'strings', 'chosen', 'set', 'bit manipulation', 'depth-first search']",2
755,Reach a Number,"['you', 'standing', 'position', 'infinite', 'number', 'there', 'goal', 'position', 'on', 'either', 'go', 'left', 'during', 'move', 'take', 'n', 'return', 'minimum', 'number', 'steps', 'required', 'reach', 'target', 'on', 'first', 'move', 'step', 'on', 'second', 'step', 'step', 'target', 'on', 'first', 'move', 'step', 'on', 'second', 'move', 'step', 'on', 'third', 'move', 'step', 'target', 'integer', 'range', 'math']",1
754,Cracking the Safe,"['there', 'box', 'protected', 'the', 'password', 'n', 'letter', 'one', 'first', 'k', 'digits', 'you', 'keep', 'inputting', 'password', 'automatically', 'matched', 'last', 'n', 'digits', 'for', 'assuming', 'password', 'i', 'open', 'i', 'type', 'i', 'enter', 'total', 'please', 'return', 'string', 'minimum', 'length', 'guaranteed', 'open', 'box', 'entire', 'string', 'n', 'k', 'accepted', 'n', 'k', 'accepted', 'n', 'range', 'k', 'range', 'math', 'depth-first search']",3
753,Open the Lock,"['you', 'lock', 'front', 'circular', 'each', 'wheel', 'the', 'wheels', 'rotate', 'freely', 'wrap', 'example', 'turn', 'each', 'move', 'consists', 'turning', 'one', 'wheel', 'one', 'the', 'lock', 'initially', 'starts', 'string', 'representing', 'state', 'you', 'given', 'list', 'deadends', 'dead', 'meaning', 'lock', 'displays', 'wheels', 'lock', 'stop', 'turning', 'unable', 'open', 'given', 'target', 'representing', 'value', 'wheels', 'unlock', 'return', 'minimum', 'total', 'number', 'turns', 'required', 'open', 'deadends', 'target', 'a', 'sequence', 'valid', 'moves', 'would', 'note', 'sequence', 'like', 'would', 'wheels', 'lock', 'become', 'stuck', 'display', 'becomes', 'dead', 'end', 'deadends', 'target', 'we', 'turn', 'last', 'wheel', 'reverse', 'move', 'deadends', 'target', 'we', 'reach', 'target', 'without', 'getting', 'deadends', 'target', 'the', 'length', 'deadends', 'range', 'target', 'list', 'every', 'string', 'deadends', 'string', 'target', 'string', 'digits', 'possibilities', 'breadth-first search']",2
750,Contain Virus,"['a', 'virus', 'spreading', 'task', 'quarantine', 'infected', 'area', 'installing', 'the', 'world', 'modeled', 'array', 'represents', 'uninfected', 'represents', 'cells', 'contaminated', 'a', 'wall', 'one', 'installed', 'two', 'adjacent', 'shared', 'every', 'virus', 'spreads', 'neighboring', 'cells', 'four', 'directions', 'unless', 'blocked', 'resources', 'each', 'install', 'walls', 'around', 'one', 'region', 'affected', 'area', 'block', 'infected', 'threatens', 'uninfected', 'cells', 'following', 'there', 'never', 'can', 'save', 'if', 'number', 'walls', 'if', 'world', 'becomes', 'fully', 'return', 'number', 'walls', 'grid', 'there', 'contaminated', 'on', 'first', 'add', 'walls', 'quarantine', 'viral', 'region', 'the', 'board', 'virus', 'spreads', 'on', 'second', 'add', 'walls', 'quarantine', 'viral', 'region', 'the', 'virus', 'fully', 'grid', 'even', 'though', 'one', 'cell', 'walls', 'notice', 'walls', 'built', 'shared', 'boundary', 'two', 'different', 'grid', 'the', 'region', 'left', 'builds', 'two', 'new', 'the', 'number', 'rows', 'columns', 'grid', 'range', 'each', 'either', 'throughout', 'described', 'always', 'contiguous', 'viral', 'region', 'infect', 'strictly', 'uncontaminated', 'squares', 'next', 'depth-first search']",3
749,Shortest Completing Word,"['find', 'minimum', 'length', 'word', 'given', 'dictionary', 'letters', 'string', 'such', 'word', 'said', 'complete', 'given', 'string', 'licenseplate', 'letters', 'ignore', 'for', 'licenseplate', 'still', 'matches', 'it', 'guaranteed', 'answer', 'if', 'multiple', 'return', 'one', 'occurs', 'first', 'the', 'license', 'plate', 'might', 'letter', 'occurring', 'multiple', 'for', 'given', 'licenseplate', 'word', 'complete', 'word', 'licenseplate', 'words', 'the', 'smallest', 'length', 'word', 'contains', 'letters', 'note', 'answer', 'letter', 'must', 'occur', 'word', 'also', 'note', 'ignored', 'case', 'purposes', 'comparing', 'whether', 'letter', 'exists', 'licenseplate', 'words', 'there', 'smallest', 'length', 'words', 'contains', 'letters', 'we', 'return', 'one', 'occurred', 'licenseplate', 'string', 'length', 'range', 'licenseplate', 'contain', 'letters', 'words', 'length', 'range', 'every', 'consist', 'lowercase', 'length', 'range', 'hash table']",1
748,Largest Number At Least Twice of Others,"['in', 'given', 'integer', 'array', 'always', 'exactly', 'one', 'largest', 'find', 'whether', 'largest', 'element', 'array', 'least', 'twice', 'much', 'every', 'number', 'if', 'return', 'index', 'largest', 'otherwise', 'return', 'nums', 'largest', 'every', 'number', 'array', 'twice', 'big', 'the', 'index', 'value', 'return', 'nums', 'least', 'big', 'twice', 'value', 'return', 'nums', 'length', 'range', 'every', 'integer', 'range', 'array']",1
747,Min Cost Climbing Stairs,"['on', 'step', 'cost', 'assigned', 'once', 'pay', 'either', 'climb', 'one', 'two', 'you', 'need', 'find', 'minimum', 'cost', 'reach', 'top', 'either', 'start', 'step', 'index', 'step', 'index', 'cost', 'cheapest', 'start', 'pay', 'cost', 'go', 'cost', 'cheapest', 'start', 'step', 'skipping', 'cost', 'length', 'range', 'every', 'integer', 'range', 'array', 'dynamic programming']",1
746,Prefix and Suffix Search,"['given', 'many', 'weight', 'design', 'class', 'wordfilter', 'supports', 'one', 'string', 'it', 'return', 'word', 'given', 'prefix', 'suffix', 'maximum', 'if', 'word', 'return', 'returns', 'returns', 'words', 'length', 'range', 'for', 'test', 'queries', 'may', 'length', 'range', 'suffix', 'lengths', 'range', 'suffix', 'queries', 'consist', 'lowercase', 'letters', 'trie']",3
745,Find Smallest Letter Greater Than Target,"['given', 'list', 'sorted', 'characters', 'letters', 'containing', 'lowercase', 'given', 'target', 'letter', 'find', 'smallest', 'element', 'list', 'larger', 'given', 'letters', 'also', 'wrap', 'for', 'target', 'target', 'letters', 'answer', 'letters', 'target', 'letters', 'target', 'letters', 'target', 'letters', 'target', 'letters', 'target', 'letters', 'target', 'letters', 'length', 'range', 'letters', 'consists', 'lowercase', 'contains', 'least', 'unique', 'target', 'lowercase', 'binary search']",1
744,Network Delay Time,"['there', 'n', 'network', 'labelled', 'given', 'list', 'travel', 'times', 'directed', 'edges', 'u', 'source', 'v', 'target', 'w', 'time', 'takes', 'signal', 'travel', 'source', 'send', 'signal', 'certain', 'node', 'how', 'long', 'take', 'nodes', 'receive', 'if', 'return', 'times', 'n', 'k', 'n', 'range', 'k', 'range', 'the', 'length', 'times', 'range', 'all', 'edges', 'v', 'n', 'w', 'heap', 'depth-first search', 'breadth-first search', 'graph']",2
742,To Lower Case,"['implement', 'function', 'string', 'parameter', 'returns', 'string', 'string']",1
741,Cherry Pickup,"['in', 'n', 'x', 'n', 'grid', 'representing', 'field', 'cell', 'one', 'three', 'possible', 'means', 'cell', 'pass', 'means', 'cell', 'contains', 'pick', 'pass', 'means', 'cell', 'contains', 'thorn', 'blocks', 'your', 'task', 'collect', 'maximum', 'number', 'cherries', 'possible', 'following', 'rules', 'starting', 'position', 'reaching', 'moving', 'right', 'valid', 'path', 'cells', 'value', 'after', 'reaching', 'returning', 'moving', 'left', 'valid', 'path', 'when', 'passing', 'path', 'cell', 'containing', 'pick', 'cell', 'becomes', 'empty', 'cell', 'if', 'valid', 'path', 'cherries', 'grid', 'the', 'player', 'started', 'went', 'right', 'right', 'reach', 'cherries', 'picked', 'single', 'matrix', 'becomes', 'player', 'went', 'left', 'return', 'picking', 'one', 'the', 'total', 'number', 'cherries', 'picked', 'maximum', 'grid', 'n', 'n', 'n', 'each', 'integer', 'set', 'it', 'guaranteed', 'dynamic programming']",3
740,Delete and Earn,"['given', 'array', 'nums', 'perform', 'operations', 'in', 'pick', 'delete', 'earn', 'must', 'delete', 'every', 'element', 'equal', 'you', 'start', 'return', 'maximum', 'number', 'points', 'earn', 'applying', 'nums', 'delete', 'earn', 'consequently', 'also', 'delete', 'earn', 'total', 'points', 'nums', 'delete', 'earn', 'deleting', 'delete', 'earn', 'earn', 'total', 'points', 'the', 'length', 'nums', 'each', 'element', 'integer', 'range', 'dynamic programming']",2
739,Daily Temperatures,"['given', 'list', 'daily', 'temperatures', 'return', 'list', 'day', 'tells', 'many', 'days', 'would', 'wait', 'warmer', 'if', 'future', 'day', 'put', 'for', 'given', 'list', 'temperatures', 't', 'output', 'the', 'length', 'temperatures', 'range', 'each', 'temperature', 'integer', 'range', 'hash table', 'stack']",2
738,Monotone Increasing Digits,"['given', 'integer', 'find', 'largest', 'number', 'less', 'equal', 'n', 'monotone', 'increasing', 'integer', 'monotone', 'increasing', 'digits', 'pair', 'adjacent', 'digits', 'x', 'satisfy', 'x', 'n', 'n', 'n', 'n', 'integer', 'range', 'greedy']",2
736,Parse Lisp Expression,"['you', 'given', 'string', 'expression', 'representing', 'expression', 'return', 'integer', 'value', 'the', 'syntax', 'expressions', 'given', 'an', 'expression', 'either', 'assigned', 'expressions', 'always', 'evaluate', 'single', 'integer', 'could', 'positive', 'a', 'takes', 'form', 'vn', 'en', 'let', 'always', 'string', 'pairs', 'alternating', 'variables', 'meaning', 'first', 'variable', 'assigned', 'value', 'expression', 'second', 'variable', 'assigned', 'value', 'expression', 'value', 'value', 'expression', 'an', 'takes', 'form', 'add', 'always', 'string', 'always', 'two', 'expressions', 'expression', 'evaluates', 'addition', 'evaluation', 'evaluation', 'a', 'takes', 'form', 'mult', 'always', 'string', 'always', 'two', 'expressions', 'expression', 'evaluates', 'multiplication', 'evaluation', 'evaluation', 'for', 'purposes', 'use', 'smaller', 'subset', 'variable', 'a', 'variable', 'starts', 'lowercase', 'zero', 'lowercase', 'letters', 'additionally', 'names', 'protected', 'never', 'used', 'variable', 'concept', 'when', 'expression', 'variable', 'name', 'within', 'context', 'innermost', 'scope', 'terms', 'checked', 'first', 'value', 'outer', 'scopes', 'checked', 'it', 'guaranteed', 'every', 'expression', 'please', 'see', 'examples', 'details', 'evaluation', 'x', 'x', 'x', 'x', 'x', 'x', 'in', 'expression', 'x', 'checking', 'value', 'variable', 'check', 'innermost', 'scope', 'outermost', 'context', 'variable', 'trying', 'since', 'x', 'found', 'value', 'x', 'x', 'x', 'assignment', 'let', 'statements', 'processed', 'x', 'x', 'x', 'x', 'the', 'first', 'x', 'evaluates', 'assigned', 'the', 'second', 'x', 'evaluates', 'x', 'x', 'x', 'even', 'though', 'x', 'deeper', 'outside', 'final', 'x', 'that', 'final', 'x', 'equal', 'output', 'variable', 'names', 'contain', 'digits', 'first', 'the', 'given', 'string', 'expression', 'well', 'there', 'leading', 'trailing', 'single', 'space', 'separating', 'different', 'components', 'space', 'adjacent', 'the', 'expression', 'guaranteed', 'legal', 'evaluate', 'the', 'length', 'expression', 'also', 'would', 'legal', 'the', 'answer', 'intermediate', 'calculations', 'answer', 'guaranteed', 'fit', 'string']",3
735,Asteroid Collision,"['we', 'given', 'array', 'asteroids', 'integers', 'representing', 'asteroids', 'for', 'absolute', 'value', 'represents', 'sign', 'represents', 'direction', 'meaning', 'negative', 'meaning', 'each', 'asteroid', 'moves', 'find', 'state', 'asteroids', 'if', 'two', 'asteroids', 'smaller', 'one', 'if', 'two', 'asteroids', 'moving', 'direction', 'never', 'asteroids', 'the', 'collide', 'resulting', 'the', 'never', 'asteroids', 'the', 'collide', 'exploding', 'asteroids', 'the', 'collide', 'resulting', 'the', 'collide', 'resulting', 'asteroids', 'the', 'moving', 'moving', 'asteroids', 'moving', 'direction', 'never', 'asteroids', 'meet', 'the', 'length', 'asteroids', 'each', 'asteroid', 'integer', 'range', 'stack']",2
733,Flood Fill,"['an', 'image', 'represented', 'array', 'integer', 'representing', 'pixel', 'value', 'image', 'given', 'coordinate', 'representing', 'starting', 'pixel', 'flood', 'pixel', 'value', 'to', 'perform', 'consider', 'starting', 'plus', 'pixels', 'connected', 'starting', 'pixel', 'color', 'starting', 'plus', 'pixels', 'connected', 'pixels', 'color', 'starting', 'replace', 'color', 'aforementioned', 'pixels', 'at', 'return', 'modified', 'image', 'sr', 'sc', 'newcolor', 'from', 'center', 'image', 'position', 'pixels', 'connected', 'path', 'color', 'starting', 'pixel', 'colored', 'new', 'note', 'bottom', 'corner', 'colored', 'starting', 'the', 'length', 'image', 'range', 'the', 'given', 'starting', 'pixel', 'satisfy', 'sr', 'sc', 'the', 'value', 'color', 'newcolor', 'integer', 'depth-first search']",1
732,My Calendar III,"['implement', 'mycalendarthree', 'class', 'store', 'a', 'new', 'event', 'always', 'your', 'class', 'one', 'int', 'represents', 'booking', 'half', 'open', 'interval', 'range', 'real', 'numbers', 'x', 'start', 'x', 'a', 'happens', 'k', 'events', 'intersection', 'time', 'common', 'k', 'for', 'call', 'method', 'return', 'integer', 'k', 'representing', 'largest', 'integer', 'exists', 'your', 'class', 'called', 'like', 'mycalendarthree', 'cal', 'new', 'returns', 'returns', 'returns', 'returns', 'returns', 'returns', 'the', 'first', 'two', 'events', 'booked', 'maximum', 'the', 'third', 'event', 'intersects', 'first', 'maximum', 'the', 'remaining', 'events', 'cause', 'maximum', 'note', 'last', 'event', 'locally', 'causes', 'answer', 'still', 'still', 'triple', 'the', 'number', 'calls', 'per', 'test', 'case', 'in', 'calls', 'start', 'end', 'integers', 'range', 'segment tree', 'ordered map']",3
731,My Calendar II,"['implement', 'mycalendartwo', 'class', 'store', 'a', 'new', 'event', 'added', 'adding', 'event', 'cause', 'triple', 'your', 'class', 'one', 'int', 'represents', 'booking', 'half', 'open', 'interval', 'range', 'real', 'numbers', 'x', 'start', 'x', 'a', 'triple', 'booking', 'happens', 'three', 'events', 'intersection', 'time', 'common', 'for', 'call', 'method', 'return', 'true', 'event', 'added', 'calendar', 'successfully', 'without', 'causing', 'triple', 'return', 'false', 'add', 'event', 'your', 'class', 'called', 'like', 'mycalendar', 'cal', 'new', 'returns', 'returns', 'returns', 'returns', 'returns', 'returns', 'the', 'first', 'two', 'events', 'the', 'third', 'event', 'double', 'the', 'fourth', 'event', 'would', 'result', 'triple', 'the', 'fifth', 'event', 'use', 'time', 'already', 'double', 'the', 'sixth', 'event', 'time', 'double', 'booked', 'third', 'time', 'single', 'time', 'double', 'booked', 'second', 'the', 'number', 'calls', 'per', 'test', 'case', 'in', 'calls', 'start', 'end', 'integers', 'range', 'ordered map']",2
730,Count Different Palindromic Subsequences,"['given', 'string', 'find', 'number', 'different', 'palindromic', 'subsequences', 'return', 'number', 'modulo', 'a', 'subsequence', 'string', 's', 'obtained', 'deleting', 'characters', 'a', 'sequence', 'palindromic', 'equal', 'sequence', 'two', 'sequences', 'different', 's', 'the', 'different', 'palindromic', 'subsequences', 'note', 'counted', 'even', 'though', 'occurs', 's', 'there', 'different', 'palindromic', 'modulo', 'the', 'length', 's', 'range', 'each', 'character', 'set', 'string', 'dynamic programming']",3
729,My Calendar I,"['implement', 'mycalendar', 'class', 'store', 'a', 'new', 'event', 'added', 'adding', 'event', 'cause', 'double', 'your', 'class', 'int', 'represents', 'booking', 'half', 'open', 'interval', 'range', 'real', 'numbers', 'x', 'start', 'x', 'a', 'double', 'booking', 'happens', 'two', 'events', 'intersection', 'time', 'common', 'for', 'call', 'method', 'return', 'true', 'event', 'added', 'calendar', 'successfully', 'without', 'causing', 'double', 'return', 'false', 'add', 'event', 'your', 'class', 'called', 'like', 'mycalendar', 'cal', 'new', 'returns', 'returns', 'returns', 'the', 'first', 'event', 'the', 'second', 'time', 'already', 'booked', 'another', 'the', 'third', 'event', 'first', 'event', 'takes', 'every', 'time', 'less', 'including', 'the', 'number', 'calls', 'per', 'test', 'case', 'in', 'calls', 'start', 'end', 'integers', 'range', 'array']",2
728,Self Dividing Numbers,"['a', 'number', 'number', 'divisible', 'every', 'digit', 'for', 'number', 'number', 'allowed', 'contain', 'digit', 'given', 'lower', 'upper', 'number', 'output', 'list', 'every', 'possible', 'self', 'dividing', 'including', 'bounds', 'left', 'right', 'the', 'boundaries', 'input', 'argument', 'left', 'right', 'math']",1
726,Number of Atoms,"['given', 'chemical', 'formula', 'return', 'count', 'an', 'atomic', 'element', 'always', 'starts', 'uppercase', 'zero', 'lowercase', 'representing', 'digits', 'representing', 'count', 'element', 'may', 'follow', 'count', 'greater', 'if', 'count', 'digits', 'for', 'two', 'formulas', 'concatenated', 'together', 'produce', 'another', 'for', 'also', 'a', 'formula', 'placed', 'count', 'also', 'for', 'given', 'output', 'count', 'elements', 'string', 'following', 'first', 'name', 'sorted', 'followed', 'count', 'count', 'followed', 'second', 'name', 'sorted', 'followed', 'count', 'count', 'formula', 'the', 'count', 'elements', 'formula', 'the', 'count', 'elements', 'formula', 'the', 'count', 'elements', 'all', 'atom', 'names', 'consist', 'lowercase', 'except', 'first', 'character', 'the', 'length', 'formula', 'range', 'formula', 'consist', 'round', 'valid', 'formula', 'defined', 'hash table', 'stack', 'recursion']",3
725,Split Linked List in Parts,"['given', 'linked', 'list', 'head', 'node', 'write', 'function', 'split', 'linked', 'list', 'k', 'consecutive', 'linked', 'list', 'the', 'length', 'part', 'equal', 'two', 'parts', 'size', 'differing', 'this', 'may', 'lead', 'parts', 'the', 'parts', 'order', 'occurrence', 'input', 'parts', 'occurring', 'earlier', 'always', 'size', 'greater', 'equal', 'parts', 'occurring', 'return', 'list', 'representing', 'linked', 'list', 'parts', 'k', 'equal', 'null', 'root', 'k', 'the', 'input', 'element', 'output', 'for', 'input', 'root', 'the', 'first', 'element', 'the', 'last', 'element', 'string', 'representation', 'listnode', 'root', 'k', 'the', 'input', 'split', 'consecutive', 'parts', 'size', 'difference', 'earlier', 'parts', 'larger', 'size', 'later', 'the', 'length', 'root', 'range', 'each', 'value', 'node', 'input', 'integer', 'range', 'k', 'integer', 'range', 'linked list']",2
724,Find Pivot Index,"['given', 'array', 'integers', 'write', 'method', 'returns', 'index', 'we', 'define', 'pivot', 'index', 'index', 'sum', 'numbers', 'left', 'index', 'equal', 'sum', 'numbers', 'right', 'if', 'index', 'return', 'if', 'multiple', 'pivot', 'return', 'pivot', 'nums', 'the', 'sum', 'numbers', 'left', 'index', 'equal', 'sum', 'numbers', 'right', 'index', 'first', 'index', 'nums', 'there', 'index', 'satisfies', 'conditions', 'problem', 'the', 'length', 'nums', 'range', 'each', 'element', 'integer', 'range', 'array']",1
722,Remove Comments,"['given', 'remove', 'comments', 'the', 'program', 'source', 'array', 'line', 'source', 'this', 'represents', 'result', 'splitting', 'original', 'source', 'code', 'string', 'newline', 'character', 'in', 'two', 'types', 'line', 'block', 'the', 'string', 'denotes', 'line', 'represents', 'rest', 'characters', 'right', 'line', 'the', 'string', 'denotes', 'block', 'represents', 'characters', 'next', 'occurrence', 'occurrences', 'happen', 'reading', 'line', 'line', 'left', 'to', 'string', 'yet', 'end', 'block', 'ending', 'would', 'overlapping', 'the', 'first', 'effective', 'comment', 'takes', 'precedence', 'string', 'occurs', 'block', 'string', 'occurs', 'line', 'block', 'also', 'if', 'certain', 'line', 'code', 'empty', 'removing', 'must', 'output', 'string', 'answer', 'list', 'there', 'control', 'single', 'double', 'quote', 'for', 'source', 'not', 'test', 'nothing', 'else', 'defines', 'macros', 'interfere', 'it', 'guaranteed', 'every', 'open', 'block', 'comment', 'eventually', 'outside', 'line', 'block', 'comment', 'always', 'starts', 'new', 'implicit', 'newline', 'characters', 'deleted', 'block', 'please', 'see', 'examples', 'after', 'removing', 'comments', 'source', 'return', 'source', 'code', 'source', 'program', 'variable', 'declaration', 'this', 'multiline', 'comment', 'testing', 'b', 'the', 'line', 'line', 'code', 'visualized', 'program', 'int', 'variable', 'declaration', 'int', 'this', 'multiline', 'comment', 'testing', 'b', 'b', 'the', 'line', 'line', 'code', 'visualized', 'int', 'int', 'b', 'the', 'string', 'denotes', 'block', 'including', 'line', 'lines', 'the', 'string', 'denotes', 'line', 'source', 'the', 'original', 'source', 'string', 'bolded', 'newline', 'after', 'implicit', 'newline', 'characters', 'leaving', 'string', 'delimited', 'newline', 'characters', 'becomes', 'the', 'length', 'source', 'range', 'the', 'length', 'range', 'every', 'open', 'block', 'comment', 'eventually', 'there', 'control', 'characters', 'source', 'string']",2
721,Accounts Merge,"['given', 'list', 'element', 'list', 'first', 'element', 'rest', 'elements', 'emails', 'representing', 'emails', 'would', 'like', 'merge', 'two', 'accounts', 'definitely', 'belong', 'person', 'email', 'common', 'note', 'even', 'two', 'accounts', 'may', 'belong', 'different', 'people', 'people', 'could', 'a', 'person', 'number', 'accounts', 'accounts', 'definitely', 'after', 'merging', 'return', 'accounts', 'following', 'first', 'element', 'account', 'rest', 'elements', 'emails', 'sorted', 'the', 'accounts', 'returned', 'accounts', 'the', 'first', 'third', 'person', 'common', 'email', 'the', 'second', 'john', 'mary', 'different', 'people', 'none', 'email', 'addresses', 'used', 'we', 'could', 'return', 'lists', 'example', 'answer', 'would', 'still', 'the', 'length', 'accounts', 'range', 'the', 'length', 'range', 'the', 'length', 'range', 'depth-first search', 'union find']",2
720,Longest Word in Dictionary,"['given', 'list', 'strings', 'words', 'representing', 'english', 'find', 'longest', 'word', 'words', 'built', 'one', 'character', 'time', 'words', 'if', 'one', 'possible', 'return', 'longest', 'word', 'smallest', 'lexicographical', 'if', 'return', 'empty', 'words', 'the', 'word', 'built', 'one', 'character', 'time', 'words', 'both', 'built', 'words', 'lexicographically', 'smaller', 'all', 'strings', 'input', 'contain', 'lowercase', 'the', 'length', 'words', 'range', 'the', 'length', 'range', 'hash table', 'trie']",1
719,Find K-th Smallest Pair Distance,"['given', 'integer', 'return', 'smallest', 'distance', 'among', 'the', 'distance', 'pair', 'defined', 'absolute', 'difference', 'a', 'nums', 'k', 'here', 'then', 'smallest', 'distance', 'pair', 'distance', 'k', 'array', 'binary search', 'heap']",3
718,Maximum Length of Repeated Subarray,"['given', 'two', 'integer', 'arrays', 'a', 'return', 'maximum', 'length', 'subarray', 'appears', 'the', 'repeated', 'subarray', 'maximum', 'length', 'array', 'hash table', 'binary search', 'dynamic programming']",2
717,1-bit and 2-bit Characters,"['we', 'two', 'special', 'the', 'first', 'character', 'represented', 'one', 'bit', 'the', 'second', 'character', 'represented', 'two', 'bits', 'now', 'given', 'string', 'represented', 'several', 'return', 'whether', 'last', 'character', 'must', 'character', 'the', 'given', 'string', 'always', 'end', 'bits', 'the', 'way', 'decode', 'character', 'so', 'last', 'character', 'bits', 'the', 'way', 'decode', 'character', 'so', 'last', 'character', 'not', 'always', 'array']",1
715,Range Module,"['a', 'range', 'module', 'module', 'tracks', 'ranges', 'your', 'task', 'design', 'implement', 'following', 'interfaces', 'efficient', 'int', 'adds', 'interval', 'tracking', 'every', 'real', 'number', 'adding', 'interval', 'partially', 'overlaps', 'currently', 'tracked', 'numbers', 'add', 'numbers', 'interval', 'already', 'int', 'returns', 'true', 'every', 'real', 'number', 'interval', 'currently', 'int', 'stops', 'tracking', 'every', 'real', 'number', 'currently', 'tracked', 'interval', 'true', 'number', 'false', 'like', 'true', 'number', 'still', 'despite', 'remove', 'a', 'half', 'open', 'interval', 'denotes', 'real', 'numbers', 'left', 'x', 'left', 'right', 'calls', 'the', 'total', 'number', 'calls', 'addrange', 'single', 'test', 'case', 'the', 'total', 'number', 'calls', 'queryrange', 'single', 'test', 'case', 'the', 'total', 'number', 'calls', 'removerange', 'single', 'test', 'case', 'segment tree', 'ordered map']",3
714,Best Time to Buy and Sell Stock with Transaction Fee,"['your', 'given', 'array', 'integers', 'element', 'price', 'given', 'stock', 'day', 'integer', 'fee', 'representing', 'transaction', 'you', 'may', 'complete', 'many', 'transactions', 'need', 'pay', 'transaction', 'fee', 'you', 'may', 'buy', 'share', 'stock', 'time', 'must', 'sell', 'stock', 'share', 'buy', 'return', 'maximum', 'profit', 'prices', 'fee', 'the', 'maximum', 'profit', 'achieved', 'buying', 'total', 'profit', 'fee', 'array', 'dynamic programming', 'greedy']",2
713,Subarray Product Less Than K,"['your', 'given', 'array', 'positive', 'integers', 'count', 'print', 'number', 'subarrays', 'product', 'elements', 'subarray', 'less', 'nums', 'k', 'the', 'subarrays', 'product', 'less', 'note', 'included', 'product', 'strictly', 'less', 'k', 'array', 'two pointers']",2
712,Minimum ASCII Delete Sum for Two Strings,"['given', 'two', 'strings', 'find', 'lowest', 'ascii', 'sum', 'deleted', 'characters', 'make', 'two', 'strings', 'deleting', 'adds', 'ascii', 'value', 'deleting', 'adds', 'at', 'strings', 'minimum', 'sum', 'possible', 'achieve', 'deleting', 'turn', 'string', 'adds', 'deleting', 'adds', 'at', 'strings', 'equal', 'answer', 'if', 'instead', 'turned', 'strings', 'would', 'get', 'answers', 'all', 'elements', 'string', 'ascii', 'value', 'dynamic programming']",2
699,Falling Squares,"['on', 'infinite', 'number', 'line', 'drop', 'given', 'squares', 'order', 'the', 'square', 'dropped', 'square', 'point', 'sidelength', 'the', 'square', 'dropped', 'bottom', 'edge', 'parallel', 'number', 'higher', 'height', 'currently', 'landed', 'we', 'wait', 'square', 'stick', 'dropping', 'the', 'squares', 'infinitely', 'sticky', 'bottom', 'remain', 'fixed', 'positive', 'length', 'surface', 'touch', 'number', 'line', 'another', 'squares', 'dropped', 'adjacent', 'stick', 'together', 'return', 'list', 'ans', 'each', 'height', 'represents', 'current', 'highest', 'height', 'square', 'dropping', 'squares', 'represented', 'after', 'first', 'drop', 'the', 'maximum', 'height', 'square', 'after', 'second', 'drop', 'the', 'maximum', 'height', 'square', 'the', 'larger', 'square', 'stays', 'top', 'smaller', 'square', 'despite', 'center', 'gravity', 'squares', 'infinitely', 'sticky', 'bottom', 'after', 'third', 'drop', 'the', 'maximum', 'height', 'square', 'still', 'return', 'answer', 'adjacent', 'squares', 'get', 'stuck', 'prematurely', 'bottom', 'edge', 'stick', 'segment tree', 'ordered map']",3
698,Partition to K Equal Sum Subsets,"['given', 'array', 'integers', 'nums', 'positive', 'integer', 'find', 'whether', 'possible', 'divide', 'array', 'k', 'subsets', 'whose', 'sums', 'nums', 'k', 'possible', 'divide', 'subsets', 'equal', 'k', 'dynamic programming', 'recursion']",2
697,Degree of an Array,"['given', 'array', 'integers', 'degree', 'array', 'defined', 'maximum', 'frequency', 'one', 'your', 'task', 'find', 'smallest', 'possible', 'length', 'subarray', 'degree', 'the', 'input', 'array', 'degree', 'elements', 'appear', 'of', 'subarrays', 'the', 'shortest', 'length', 'so', 'return', 'integer', 'array']",1
696,Count Binary Substrings,"['give', 'string', 'count', 'number', 'substrings', 'number', 'substrings', 'grouped', 'substrings', 'occur', 'multiple', 'times', 'counted', 'number', 'times', 'there', 'substrings', 'equal', 'number', 'consecutive', 'notice', 'substrings', 'repeat', 'counted', 'number', 'times', 'valid', 'substring', 'grouped', 'there', 'equal', 'number', 'consecutive', 'consist', 'string']",1
695,Max Area of Island,"['given', 'array', 'grid', 'island', 'group', 'connected', 'you', 'may', 'assume', 'four', 'edges', 'grid', 'surrounded', 'find', 'maximum', 'area', 'island', 'given', 'maximum', 'area', 'given', 'return', 'note', 'answer', 'island', 'must', 'connected', 'given', 'return', 'the', 'length', 'dimension', 'given', 'grid', 'exceed', 'array', 'depth-first search']",2
693,Binary Number with Alternating Bits,"['given', 'positive', 'check', 'whether', 'alternating', 'two', 'adjacent', 'bits', 'always', 'different', 'the', 'binary', 'representation', 'the', 'binary', 'representation', 'the', 'binary', 'representation', 'the', 'binary', 'representation', 'bit manipulation']",1
692,Top K Frequent Words,"['given', 'list', 'return', 'k', 'frequent', 'your', 'answer', 'sorted', 'frequency', 'highest', 'if', 'two', 'words', 'word', 'lower', 'alphabetical', 'order', 'comes', 'k', 'two', 'frequent', 'note', 'comes', 'due', 'lower', 'alphabetical', 'k', 'four', 'frequent', 'number', 'occurrence', 'you', 'may', 'assume', 'k', 'always', 'k', 'number', 'unique', 'input', 'words', 'contain', 'lowercase', 'follow', 'try', 'solve', 'log', 'time', 'extra', 'hash table', 'heap', 'trie']",2
691,Stickers to Spell Word,"['we', 'given', 'n', 'different', 'types', 'each', 'sticker', 'lowercase', 'english', 'word', 'you', 'would', 'like', 'spell', 'given', 'target', 'string', 'cutting', 'individual', 'letters', 'collection', 'stickers', 'rearranging', 'you', 'use', 'sticker', 'infinite', 'quantities', 'what', 'minimum', 'number', 'stickers', 'need', 'spell', 'if', 'task', 'return', 'we', 'use', 'after', 'cutting', 'rearrange', 'letters', 'form', 'target', 'minimum', 'number', 'stickers', 'necessary', 'form', 'target', 'we', 'form', 'target', 'cutting', 'letters', 'given', 'stickers', 'length', 'range', 'stickers', 'consists', 'lowercase', 'english', 'words', 'target', 'length', 'range', 'consists', 'lowercase', 'english', 'in', 'test', 'words', 'chosen', 'randomly', 'common', 'us', 'english', 'target', 'chosen', 'concatenation', 'two', 'random', 'the', 'time', 'limit', 'may', 'challenging', 'it', 'expected', 'sticker', 'test', 'case', 'solved', 'within', 'dynamic programming', 'backtracking']",3
690,Employee Importance,"['you', 'given', 'data', 'structure', 'employee', 'includes', 'unique', 'importance', 'value', 'direct', 'for', 'employee', 'leader', 'employee', 'employee', 'leader', 'employee', 'they', 'importance', 'value', 'then', 'employee', 'data', 'structure', 'like', 'employee', 'employee', 'note', 'although', 'employee', 'also', 'subordinate', 'employee', 'relationship', 'now', 'given', 'employee', 'information', 'employee', 'need', 'return', 'total', 'importance', 'value', 'employee', 'employee', 'importance', 'value', 'two', 'direct', 'employee', 'employee', 'they', 'importance', 'value', 'so', 'total', 'importance', 'value', 'employee', 'one', 'employee', 'one', 'direct', 'leader', 'may', 'several', 'the', 'maximum', 'number', 'employees', 'exceed', 'hash table', 'depth-first search', 'breadth-first search']",1
689,Maximum Sum of 3 Non-Overlapping Subarrays,"['in', 'given', 'array', 'nums', 'positive', 'find', 'three', 'subarrays', 'maximum', 'each', 'subarray', 'size', 'want', 'maximize', 'sum', 'return', 'result', 'list', 'indices', 'representing', 'starting', 'position', 'interval', 'if', 'multiple', 'return', 'lexicographically', 'smallest', 'subarrays', 'correspond', 'starting', 'indices', 'we', 'could', 'also', 'taken', 'answer', 'would', 'lexicographically', 'k', 'array', 'dynamic programming']",3
688,Knight Probability in Chessboard,"['on', 'nxn', 'knight', 'starts', 'row', 'column', 'attempts', 'make', 'exactly', 'k', 'the', 'rows', 'columns', 'square', 'square', 'a', 'chess', 'knight', 'possible', 'moves', 'illustrated', 'each', 'move', 'two', 'squares', 'cardinal', 'one', 'square', 'orthogonal', 'each', 'time', 'knight', 'chooses', 'one', 'eight', 'possible', 'moves', 'uniformly', 'random', 'piece', 'would', 'go', 'moves', 'the', 'knight', 'continues', 'moving', 'made', 'exactly', 'k', 'moves', 'moved', 'return', 'probability', 'knight', 'remains', 'board', 'stopped', 'there', 'two', 'moves', 'keep', 'knight', 'from', 'also', 'two', 'moves', 'keep', 'knight', 'the', 'total', 'probability', 'knight', 'stays', 'board', 'n', 'k', 'the', 'knight', 'always', 'initially', 'starts', 'dynamic programming']",2
687,Longest Univalue Path,"['given', 'binary', 'find', 'length', 'longest', 'path', 'node', 'path', 'this', 'path', 'may', 'may', 'pass', 'the', 'length', 'path', 'two', 'nodes', 'represented', 'number', 'edges', 'the', 'given', 'binary', 'tree', 'the', 'height', 'tree', 'tree', 'recursion']",1
686,Repeated String Match,"['given', 'two', 'strings', 'a', 'find', 'minimum', 'number', 'times', 'a', 'repeated', 'b', 'substring', 'if', 'return', 'for', 'a', 'b', 'return', 'repeating', 'a', 'three', 'times', 'b', 'substring', 'b', 'substring', 'a', 'repeated', 'two', 'times', 'the', 'length', 'a', 'b', 'string']",1
685,Redundant Connection II,"['in', 'rooted', 'tree', 'directed', 'graph', 'exactly', 'one', 'node', 'nodes', 'descendants', 'plus', 'every', 'node', 'exactly', 'one', 'except', 'root', 'node', 'the', 'given', 'input', 'directed', 'graph', 'started', 'rooted', 'tree', 'n', 'nodes', 'distinct', 'values', 'one', 'additional', 'directed', 'edge', 'the', 'added', 'edge', 'two', 'different', 'vertices', 'chosen', 'edge', 'already', 'the', 'resulting', 'graph', 'given', 'each', 'element', 'edges', 'pair', 'represents', 'directed', 'edge', 'connecting', 'nodes', 'u', 'u', 'parent', 'child', 'return', 'edge', 'removed', 'resulting', 'graph', 'rooted', 'tree', 'n', 'if', 'multiple', 'return', 'answer', 'occurs', 'last', 'given', 'the', 'given', 'directed', 'graph', 'like', 'v', 'the', 'given', 'directed', 'graph', 'like', 'the', 'size', 'input', 'every', 'integer', 'represented', 'n', 'size', 'input', 'tree', 'depth-first search', 'union find', 'graph']",3
684,Redundant Connection,"['in', 'tree', 'undirected', 'graph', 'connected', 'the', 'given', 'input', 'graph', 'started', 'tree', 'n', 'nodes', 'distinct', 'values', 'one', 'additional', 'edge', 'the', 'added', 'edge', 'two', 'different', 'vertices', 'chosen', 'edge', 'already', 'the', 'resulting', 'graph', 'given', 'each', 'element', 'edges', 'pair', 'u', 'represents', 'undirected', 'edge', 'connecting', 'nodes', 'u', 'return', 'edge', 'removed', 'resulting', 'graph', 'tree', 'n', 'if', 'multiple', 'return', 'answer', 'occurs', 'last', 'given', 'the', 'answer', 'edge', 'u', 'the', 'given', 'undirected', 'graph', 'like', 'the', 'given', 'undirected', 'graph', 'like', 'the', 'size', 'input', 'every', 'integer', 'represented', 'n', 'size', 'input', 'update', 'we', 'overhauled', 'problem', 'description', 'test', 'cases', 'specified', 'clearly', 'graph', 'undirected', 'for', 'directed', 'graph', 'follow', 'please', 'see', 'redundant', 'connection', 'we', 'apologize', 'inconvenience', 'tree', 'union find', 'graph']",2
682,Baseball Game,"['baseball', 'game', 'point', 'given', 'list', 'string', 'one', 'following', 'integer', 'directly', 'represents', 'number', 'points', 'get', 'represents', 'points', 'get', 'round', 'sum', 'last', 'two', 'valid', 'represents', 'points', 'get', 'round', 'doubled', 'data', 'last', 'valid', 'represents', 'last', 'valid', 'points', 'get', 'invalid', 'each', 'operation', 'permanent', 'could', 'impact', 'round', 'round', 'you', 'need', 'return', 'sum', 'points', 'could', 'get', 'round', 'you', 'could', 'get', 'the', 'sum', 'round', 'you', 'could', 'get', 'the', 'sum', 'operation', 'the', 'round', 'data', 'the', 'sum', 'round', 'you', 'could', 'get', 'points', 'round', 'data', 'the', 'sum', 'round', 'you', 'could', 'get', 'the', 'sum', 'round', 'you', 'could', 'get', 'the', 'sum', 'round', 'you', 'could', 'get', 'the', 'sum', 'round', 'you', 'could', 'get', 'the', 'sum', 'operation', 'the', 'round', 'data', 'the', 'sum', 'round', 'you', 'could', 'get', 'points', 'round', 'data', 'the', 'sum', 'round', 'you', 'could', 'get', 'the', 'sum', 'round', 'you', 'could', 'get', 'the', 'sum', 'round', 'you', 'could', 'get', 'the', 'sum', 'the', 'size', 'input', 'list', 'every', 'integer', 'represented', 'list', 'stack']",1
680,Valid Palindrome II,"['given', 'string', 'may', 'delete', 'one', 'judge', 'whether', 'make', 'you', 'could', 'delete', 'character', 'the', 'string', 'contain', 'lowercase', 'characters', 'the', 'maximum', 'length', 'string', 'string']",1
679,24 Game,"['you', 'cards', 'containing', 'number', 'you', 'need', 'judge', 'whether', 'could', 'operated', 'get', 'value', 'the', 'division', 'operator', 'represents', 'real', 'integer', 'for', 'every', 'operation', 'done', 'two', 'in', 'cannot', 'use', 'unary', 'for', 'expression', 'you', 'cannot', 'concatenate', 'numbers', 'for', 'input', 'cannot', 'write', 'depth-first search']",3
678,Valid Parenthesis String,"['given', 'string', 'containing', 'three', 'types', 'write', 'function', 'check', 'whether', 'string', 'we', 'define', 'validity', 'string', 'any', 'left', 'parenthesis', 'must', 'corresponding', 'right', 'parenthesis', 'any', 'right', 'parenthesis', 'must', 'corresponding', 'left', 'parenthesis', 'left', 'parenthesis', 'must', 'go', 'corresponding', 'right', 'parenthesis', 'could', 'treated', 'single', 'right', 'parenthesis', 'single', 'left', 'parenthesis', 'empty', 'an', 'empty', 'string', 'also', 'the', 'string', 'size', 'range', 'string']",2
677,Map Sum Pairs,"['implement', 'mapsum', 'class', 'sum', 'for', 'method', 'given', 'pair', 'the', 'string', 'represents', 'key', 'integer', 'represents', 'if', 'key', 'already', 'original', 'pair', 'overridden', 'new', 'for', 'method', 'given', 'string', 'representing', 'need', 'return', 'sum', 'value', 'whose', 'key', 'starts', 'trie']",2
676,Implement Magic Dictionary,"['implement', 'magic', 'directory', 'search', 'for', 'method', 'given', 'list', 'words', 'build', 'for', 'method', 'given', 'judge', 'whether', 'modify', 'exactly', 'one', 'character', 'another', 'character', 'modified', 'word', 'dictionary', 'you', 'may', 'assume', 'inputs', 'consist', 'lowercase', 'letters', 'for', 'contest', 'test', 'data', 'rather', 'small', 'you', 'could', 'think', 'highly', 'efficient', 'algorithm', 'please', 'remember', 'reset', 'class', 'variables', 'declared', 'class', 'variables', 'persisted', 'across', 'multiple', 'test', 'please', 'see', 'hash table', 'trie']",2
675,Cut Off Trees for Golf Event,"['you', 'asked', 'cut', 'trees', 'forest', 'golf', 'the', 'forest', 'represented', 'represents', 'obstacle', 'represents', 'ground', 'walked', 'the', 'place', 'number', 'bigger', 'represents', 'tree', 'walked', 'positive', 'number', 'represents', 'you', 'asked', 'cut', 'trees', 'forest', 'order', 'height', 'always', 'cut', 'tree', 'lowest', 'height', 'and', 'original', 'place', 'tree', 'become', 'grass', 'you', 'start', 'point', 'output', 'minimum', 'steps', 'need', 'walk', 'cut', 'if', 'cut', 'output', 'you', 'guaranteed', 'two', 'trees', 'height', 'least', 'one', 'tree', 'needs', 'cut', 'you', 'started', 'point', 'cut', 'tree', 'directly', 'without', 'size', 'given', 'matrix', 'exceed', 'breadth-first search']",3
674,Longest Continuous Increasing Subsequence,"['given', 'unsorted', 'array', 'find', 'length', 'longest', 'continuous', 'increasing', 'subsequence', 'the', 'longest', 'continuous', 'increasing', 'subsequence', 'length', 'even', 'though', 'also', 'increasing', 'continuous', 'one', 'separated', 'the', 'longest', 'continuous', 'increasing', 'subsequence', 'length', 'length', 'array', 'exceed', 'array']",1
673,Number of Longest Increasing Subsequence,"['given', 'unsorted', 'array', 'find', 'number', 'longest', 'increasing', 'the', 'two', 'longest', 'increasing', 'subsequence', 'the', 'length', 'longest', 'continuous', 'increasing', 'subsequence', 'length', 'output', 'length', 'given', 'array', 'exceed', 'answer', 'guaranteed', 'fit', 'signed', 'dynamic programming']",2
672,Bulb Switcher II,"['there', 'room', 'n', 'lights', 'turned', 'initially', 'buttons', 'after', 'performing', 'exactly', 'unknown', 'operations', 'towards', 'need', 'return', 'many', 'different', 'kinds', 'status', 'n', 'lights', 'could', 'suppose', 'n', 'lights', 'labeled', 'number', 'function', 'buttons', 'given', 'flip', 'flip', 'lights', 'even', 'flip', 'lights', 'odd', 'flip', 'lights', 'k', 'n', 'status', 'n', 'status', 'n', 'status', 'n', 'fit', 'range', 'math']",2
671,Second Minimum Node In a Binary Tree,"['given', 'special', 'binary', 'tree', 'consisting', 'nodes', 'node', 'tree', 'exactly', 'two', 'zero', 'if', 'node', 'two', 'value', 'smaller', 'value', 'among', 'two', 'more', 'given', 'binary', 'need', 'output', 'second', 'minimum', 'value', 'set', 'made', 'value', 'whole', 'if', 'second', 'minimum', 'value', 'output', 'the', 'smallest', 'value', 'second', 'smallest', 'value', 'the', 'smallest', 'value', 'second', 'smallest', 'tree']",1
670,Maximum Swap,"['given', 'could', 'swap', 'two', 'digits', 'get', 'maximum', 'valued', 'return', 'maximum', 'valued', 'number', 'could', 'swap', 'number', 'number', 'no', 'the', 'given', 'number', 'range', 'array', 'math']",2
669,Trim a Binary Search Tree,"['given', 'binary', 'search', 'tree', 'lowest', 'highest', 'boundaries', 'l', 'trim', 'tree', 'elements', 'lies', 'you', 'might', 'need', 'change', 'root', 'result', 'return', 'new', 'root', 'trimmed', 'binary', 'search', 'l', 'r', 'l', 'r', 'tree']",1
668,Kth Smallest Number in Multiplication Table,"['nearly', 'every', 'one', 'used', 'multiplication', 'but', 'could', 'find', 'smallest', 'number', 'quickly', 'multiplication', 'given', 'height', 'length', 'n', 'n', 'multiplication', 'positive', 'integer', 'need', 'return', 'smallest', 'number', 'n', 'k', 'the', 'multiplication', 'the', 'smallest', 'number', 'n', 'k', 'the', 'multiplication', 'the', 'smallest', 'number', 'the', 'n', 'range', 'the', 'k', 'range', 'binary search']",3
667,Beautiful Arrangement II,"['given', 'two', 'integers', 'n', 'need', 'construct', 'list', 'contains', 'n', 'different', 'positive', 'integers', 'ranging', 'n', 'obeys', 'following', 'suppose', 'list', 'list', 'exactly', 'k', 'distinct', 'if', 'multiple', 'print', 'n', 'k', 'the', 'three', 'different', 'positive', 'integers', 'ranging', 'exactly', 'distinct', 'n', 'k', 'the', 'three', 'different', 'positive', 'integers', 'ranging', 'exactly', 'distinct', 'the', 'n', 'k', 'range', 'k', 'n', 'array']",2
665,Non-decreasing Array,"['given', 'array', 'n', 'task', 'check', 'could', 'become', 'modifying', 'we', 'define', 'array', 'holds', 'every', 'you', 'could', 'modify', 'first', 'get', 'you', 'get', 'array', 'modify', 'one', 'the', 'n', 'belongs', 'array']",1
664,Strange Printer,"['there', 'strange', 'printer', 'following', 'two', 'special', 'the', 'printer', 'print', 'sequence', 'character', 'at', 'printer', 'print', 'new', 'characters', 'starting', 'ending', 'cover', 'original', 'existing', 'given', 'string', 'consists', 'lower', 'english', 'letters', 'job', 'count', 'minimum', 'number', 'turns', 'printer', 'needed', 'order', 'print', 'print', 'first', 'print', 'print', 'first', 'print', 'second', 'place', 'cover', 'existing', 'character', 'length', 'given', 'string', 'exceed', 'dynamic programming', 'depth-first search']",3
662,Maximum Width of Binary Tree,"['given', 'binary', 'write', 'function', 'get', 'maximum', 'width', 'given', 'the', 'width', 'tree', 'maximum', 'width', 'among', 'the', 'binary', 'tree', 'structure', 'full', 'binary', 'nodes', 'the', 'width', 'one', 'level', 'defined', 'length', 'leftmost', 'right', 'nodes', 'null', 'nodes', 'also', 'counted', 'length', 'the', 'maximum', 'width', 'existing', 'third', 'level', 'length', 'the', 'maximum', 'width', 'existing', 'third', 'level', 'length', 'the', 'maximum', 'width', 'existing', 'second', 'level', 'length', 'maximum', 'width', 'existing', 'fourth', 'level', 'length', 'answer', 'range', 'signed', 'tree']",2
661,Image Smoother,"['given', 'integer', 'matrix', 'm', 'representing', 'gray', 'scale', 'need', 'design', 'smoother', 'make', 'gray', 'scale', 'cell', 'becomes', 'average', 'gray', 'scale', 'surrounding', 'cells', 'if', 'cell', 'less', 'surrounding', 'use', 'many', 'for', 'point', 'for', 'point', 'for', 'point', 'the', 'value', 'given', 'matrix', 'range', 'the', 'length', 'width', 'given', 'matrix', 'range', 'array']",1
659,Split Array into Consecutive Subsequences,"['you', 'given', 'integer', 'array', 'sorted', 'ascending', 'order', 'contain', 'need', 'split', 'several', 'subsequences', 'consist', 'least', 'consecutive', 'return', 'whether', 'make', 'you', 'split', 'two', 'consecutive', 'subsequences', 'you', 'split', 'two', 'consecutive', 'subsequences', 'the', 'length', 'input', 'range', 'heap', 'greedy']",2
658,Find K Closest Elements,"['given', 'sorted', 'two', 'integers', 'k', 'find', 'k', 'closest', 'elements', 'x', 'the', 'result', 'also', 'sorted', 'ascending', 'if', 'smaller', 'elements', 'always', 'the', 'value', 'k', 'positive', 'always', 'smaller', 'length', 'sorted', 'length', 'given', 'array', 'positive', 'exceed', 'absolute', 'value', 'elements', 'array', 'x', 'exceed', 'update', 'the', 'arr', 'parameter', 'changed', 'array', 'integers', 'list', 'please', 'reload', 'code', 'definition', 'get', 'latest', 'binary search']",2
657,Robot Return to Origin,"['there', 'robot', 'starting', 'position', 'given', 'sequence', 'judge', 'robot', 'ends', 'completes', 'the', 'move', 'sequence', 'represented', 'character', 'represents', 'ith', 'valid', 'moves', 'r', 'l', 'u', 'd', 'if', 'robot', 'returns', 'origin', 'finishes', 'return', 'return', 'the', 'way', 'robot', 'always', 'make', 'robot', 'move', 'right', 'always', 'make', 'move', 'assume', 'magnitude', 'movement', 'true', 'the', 'robot', 'moves', 'all', 'moves', 'ended', 'origin', 'return', 'the', 'robot', 'moves', 'left', 'it', 'ends', 'two', 'left', 'we', 'return', 'false', 'origin', 'end', 'string']",1
655,Print Binary Tree,"['print', 'binary', 'tree', 'string', 'array', 'following', 'the', 'row', 'number', 'equal', 'height', 'given', 'binary', 'the', 'column', 'number', 'n', 'always', 'odd', 'the', 'root', 'value', 'string', 'put', 'exactly', 'middle', 'first', 'row', 'the', 'column', 'row', 'root', 'node', 'belongs', 'separate', 'rest', 'space', 'two', 'parts', 'part', 'you', 'print', 'left', 'subtree', 'part', 'print', 'right', 'subtree', 'the', 'part', 'part', 'even', 'one', 'subtree', 'none', 'need', 'print', 'anything', 'none', 'subtree', 'still', 'need', 'leave', 'space', 'large', 'two', 'subtrees', 'need', 'leave', 'space', 'each', 'unused', 'space', 'contain', 'empty', 'string', 'print', 'subtrees', 'following', 'the', 'height', 'binary', 'tree', 'range', 'tree']",2
654,Maximum Binary Tree,"['given', 'integer', 'array', 'a', 'maximum', 'tree', 'building', 'array', 'defined', 'the', 'root', 'maximum', 'number', 'the', 'left', 'subtree', 'maximum', 'tree', 'constructed', 'left', 'part', 'subarray', 'divided', 'maximum', 'the', 'right', 'subtree', 'maximum', 'tree', 'constructed', 'right', 'part', 'subarray', 'divided', 'maximum', 'construct', 'maximum', 'tree', 'given', 'array', 'output', 'root', 'node', 'return', 'tree', 'root', 'node', 'representing', 'following', 'the', 'size', 'given', 'array', 'range', 'tree']",2
653,Two Sum IV - Input is a BST,"['given', 'binary', 'search', 'tree', 'target', 'return', 'true', 'exist', 'two', 'elements', 'bst', 'sum', 'equal', 'given', 'target', 'target', 'tree']",1
652,Find Duplicate Subtrees,"['given', 'binary', 'return', 'duplicate', 'for', 'kind', 'duplicate', 'need', 'return', 'root', 'node', 'one', 'two', 'trees', 'duplicate', 'structure', 'node', 'the', 'following', 'two', 'duplicate', 'need', 'return', 'root', 'form', 'tree']",2
650,2 Keys Keyboard,"['initially', 'notepad', 'one', 'character', 'you', 'perform', 'two', 'operations', 'notepad', 'copy', 'you', 'copy', 'characters', 'present', 'notepad', 'copy', 'you', 'paste', 'characters', 'copied', 'last', 'given', 'number', 'you', 'get', 'exactly', 'n', 'notepad', 'performing', 'minimum', 'number', 'steps', 'output', 'minimum', 'number', 'steps', 'get', 'n', 'one', 'character', 'in', 'step', 'use', 'copy', 'all', 'in', 'step', 'use', 'paste', 'operation', 'get', 'in', 'step', 'use', 'paste', 'operation', 'get', 'the', 'n', 'range', 'dynamic programming']",2
649,Dota2 Senate,"['in', 'world', 'two', 'radiant', 'the', 'senate', 'consists', 'senators', 'coming', 'two', 'now', 'senate', 'wants', 'make', 'decision', 'change', 'the', 'voting', 'change', 'in', 'senator', 'exercise', 'one', 'two', 'ban', 'one', 'senator', 'make', 'another', 'senator', 'lose', 'rights', 'following', 'announce', 'senator', 'found', 'senators', 'still', 'rights', 'vote', 'announce', 'victory', 'make', 'decision', 'change', 'given', 'string', 'representing', 'party', 'the', 'character', 'represent', 'radiant', 'party', 'dire', 'party', 'then', 'n', 'size', 'given', 'string', 'the', 'procedure', 'starts', 'first', 'senator', 'last', 'senator', 'given', 'this', 'procedure', 'last', 'end', 'all', 'senators', 'lost', 'rights', 'skipped', 'suppose', 'every', 'senator', 'smart', 'enough', 'play', 'best', 'strategy', 'need', 'predict', 'party', 'finally', 'announce', 'victory', 'make', 'change', 'the', 'output', 'radiant', 'the', 'first', 'senator', 'comes', 'radiant', 'ban', 'next', 'right', 'round', 'and', 'second', 'senator', 'exercise', 'rights', 'since', 'right', 'and', 'round', 'first', 'senator', 'announce', 'victory', 'since', 'guy', 'senate', 'the', 'first', 'senator', 'comes', 'radiant', 'ban', 'next', 'right', 'round', 'and', 'second', 'senator', 'exercise', 'rights', 'anymore', 'since', 'right', 'and', 'third', 'senator', 'comes', 'dire', 'ban', 'first', 'right', 'round', 'and', 'round', 'third', 'senator', 'announce', 'victory', 'since', 'guy', 'senate', 'the', 'length', 'given', 'string', 'range', 'greedy']",2
648,Replace Words,"['in', 'concept', 'called', 'followed', 'words', 'form', 'another', 'longer', 'word', 'call', 'word', 'for', 'root', 'followed', 'form', 'another', 'word', 'given', 'dictionary', 'consisting', 'many', 'roots', 'you', 'need', 'replace', 'successor', 'sentence', 'root', 'forming', 'if', 'successor', 'many', 'roots', 'form', 'replace', 'root', 'shortest', 'you', 'need', 'output', 'sentence', 'dict', 'sentence', 'cattle', 'rattled', 'cat', 'rat', 'the', 'input', 'dict', 'words', 'number', 'sentence', 'words', 'number', 'root', 'length', 'sentence', 'words', 'length', 'hash table', 'trie']",2
647,Palindromic Substrings,"['given', 'task', 'count', 'many', 'palindromic', 'substrings', 'the', 'substrings', 'different', 'start', 'indexes', 'end', 'indexes', 'counted', 'different', 'substrings', 'even', 'consist', 'three', 'palindromic', 'six', 'palindromic', 'the', 'input', 'string', 'length', 'exceed', 'string', 'dynamic programming']",2
646,Maximum Length of Pair Chain,"['you', 'given', 'n', 'pairs', 'in', 'every', 'first', 'number', 'always', 'smaller', 'second', 'define', 'pair', 'follow', 'another', 'pair', 'b', 'chain', 'pairs', 'formed', 'given', 'set', 'find', 'length', 'longest', 'chain', 'you', 'use', 'given', 'you', 'select', 'pairs', 'the', 'longest', 'chain', 'the', 'number', 'given', 'pairs', 'range', 'dynamic programming']",2
645,Set Mismatch,"['the', 'set', 's', 'originally', 'contains', 'numbers', 'but', 'due', 'data', 'one', 'numbers', 'set', 'got', 'duplicated', 'another', 'number', 'results', 'repetition', 'one', 'number', 'loss', 'another', 'given', 'array', 'nums', 'representing', 'data', 'status', 'set', 'your', 'task', 'firstly', 'find', 'number', 'occurs', 'twice', 'find', 'number', 'return', 'form', 'nums', 'the', 'given', 'array', 'size', 'range', 'the', 'given', 'numbers', 'hash table', 'math']",1
643,Maximum Average Subarray I,"['given', 'array', 'consisting', 'n', 'find', 'contiguous', 'subarray', 'given', 'length', 'k', 'maximum', 'average', 'and', 'need', 'output', 'maximum', 'average', 'k', 'maximum', 'average', 'k', 'n', 'elements', 'given', 'array', 'range', 'array']",1
640,Solve the Equation,"['solve', 'given', 'equation', 'return', 'value', 'x', 'form', 'string', 'the', 'equation', 'contains', 'variable', 'x', 'if', 'solution', 'return', 'if', 'infinite', 'solutions', 'return', 'if', 'exactly', 'one', 'solution', 'ensure', 'value', 'x', 'math']",2
639,Decode Ways II,"['a', 'message', 'containing', 'letters', 'encoded', 'numbers', 'using', 'following', 'mapping', 'beyond', 'encoded', 'string', 'also', 'contain', 'character', 'treated', 'one', 'numbers', 'given', 'encoded', 'message', 'containing', 'digits', 'character', 'return', 'total', 'number', 'ways', 'decode', 'since', 'answer', 'may', 'return', 'output', 'mod', 'the', 'encoded', 'message', 'decoded', 'the', 'length', 'input', 'string', 'fit', 'range', 'the', 'input', 'string', 'contain', 'character', 'digits', 'dynamic programming']",3
638,Shopping Offers,"['in', 'leetcode', 'kinds', 'items', 'each', 'item', 'special', 'special', 'offer', 'consists', 'one', 'different', 'kinds', 'items', 'sale', 'you', 'given', 'set', 'special', 'number', 'need', 'buy', 'the', 'job', 'output', 'lowest', 'price', 'pay', 'exactly', 'certain', 'items', 'could', 'make', 'optimal', 'use', 'special', 'each', 'special', 'offer', 'represented', 'form', 'last', 'number', 'represents', 'price', 'need', 'pay', 'special', 'numbers', 'represents', 'many', 'specific', 'items', 'could', 'get', 'buy', 'you', 'could', 'use', 'special', 'offers', 'many', 'times', 'there', 'two', 'kinds', 'a', 'their', 'prices', 'in', 'special', 'offer', 'pay', 'in', 'special', 'offer', 'pay', 'you', 'need', 'buy', 'may', 'pay', 'offer', 'the', 'price', 'a', 'you', 'may', 'pay', 'you', 'need', 'buy', 'may', 'pay', 'offer', 'you', 'cannot', 'add', 'though', 'there', 'kinds', 'special', 'for', 'need', 'buy', 'you', 'allowed', 'buy', 'items', 'even', 'would', 'lower', 'overall', 'dynamic programming', 'depth-first search']",2
637,Average of Levels in Binary Tree,"['given', 'binary', 'return', 'average', 'value', 'nodes', 'level', 'form', 'the', 'average', 'value', 'nodes', 'level', 'level', 'level', 'hence', 'return', 'the', 'range', 'value', 'range', 'signed', 'tree']",1
636,Exclusive Time of Functions,"['on', 'single', 'threaded', 'execute', 'each', 'function', 'unique', 'id', 'we', 'store', 'logs', 'timestamp', 'order', 'describe', 'function', 'entered', 'each', 'log', 'string', 'for', 'function', 'id', 'started', 'beginning', 'timestamp', 'means', 'function', 'id', 'ended', 'end', 'timestamp', 'a', 'exclusive', 'number', 'units', 'time', 'spent', 'note', 'include', 'child', 'the', 'cpu', 'single', 'threaded', 'means', 'one', 'function', 'executed', 'given', 'time', 'return', 'exclusive', 'time', 'sorted', 'function', 'n', 'logs', 'function', 'starts', 'beginning', 'time', 'executes', 'units', 'time', 'reaches', 'end', 'time', 'now', 'function', 'starts', 'beginning', 'time', 'executes', 'units', 'time', 'ends', 'time', 'function', 'running', 'beginning', 'time', 'also', 'ends', 'end', 'time', 'thus', 'executing', 'unit', 'so', 'function', 'spends', 'units', 'total', 'time', 'function', 'spends', 'units', 'total', 'time', 'n', 'two', 'functions', 'start', 'end', 'functions', 'always', 'log', 'stack']",2
633,Sum of Square Numbers,"['given', 'integer', 'task', 'decide', 'whether', 'two', 'integers', 'b', 'math']",1
632,Smallest Range,"['you', 'k', 'lists', 'sorted', 'integers', 'ascending', 'find', 'smallest', 'range', 'includes', 'least', 'one', 'number', 'k', 'we', 'define', 'range', 'smaller', 'range', 'c', 'list', 'range', 'list', 'range', 'list', 'range', 'the', 'given', 'list', 'may', 'contain', 'ascending', 'order', 'means', 'k', 'value', 'elements', 'for', 'java', 'please', 'note', 'input', 'type', 'changed', 'and', 'reset', 'code', 'see', 'hash table', 'two pointers', 'string']",3
630,Course Schedule III,"['there', 'n', 'different', 'online', 'courses', 'numbered', 'each', 'course', 'closed', 'dth', 'a', 'course', 'taken', 'continuously', 'days', 'must', 'finished', 'dth', 'you', 'start', 'given', 'n', 'online', 'courses', 'represented', 'pairs', 'task', 'find', 'maximal', 'number', 'courses', 'totally', 'take', 'courses', 'take', 'costs', 'days', 'finish', 'ready', 'take', 'next', 'course', 'take', 'costs', 'days', 'finish', 'ready', 'take', 'next', 'course', 'take', 'costs', 'days', 'finish', 'the', 'course', 'cannot', 'taken', 'since', 'finish', 'exceeds', 'closed', 'the', 'integer', 'n', 'you', 'take', 'two', 'courses', 'greedy']",3
629,K Inverse Pairs Array,"['given', 'two', 'integers', 'n', 'find', 'many', 'different', 'arrays', 'consist', 'numbers', 'n', 'exactly', 'k', 'inverse', 'we', 'define', 'inverse', 'pair', 'for', 'ith', 'jth', 'element', 'j', 'inverse', 'since', 'answer', 'may', 'answer', 'modulo', 'n', 'k', 'only', 'array', 'consists', 'numbers', 'exactly', 'inverse', 'n', 'k', 'the', 'array', 'exactly', 'inverse', 'the', 'integer', 'n', 'range', 'k', 'range', 'dynamic programming']",3
628,Maximum Product of Three Numbers,"['given', 'integer', 'find', 'three', 'numbers', 'whose', 'product', 'maximum', 'output', 'maximum', 'the', 'length', 'given', 'array', 'range', 'elements', 'range', 'multiplication', 'three', 'numbers', 'input', 'exceed', 'range', 'signed', 'array', 'math']",1
623,Add One Row to Tree,"['given', 'root', 'binary', 'value', 'v', 'depth', 'need', 'add', 'row', 'nodes', 'value', 'v', 'given', 'depth', 'the', 'root', 'node', 'depth', 'the', 'adding', 'rule', 'given', 'positive', 'integer', 'depth', 'not', 'null', 'tree', 'nodes', 'n', 'depth', 'create', 'two', 'tree', 'nodes', 'value', 'v', 'left', 'subtree', 'root', 'right', 'subtree', 'and', 'original', 'left', 'subtree', 'left', 'subtree', 'new', 'left', 'subtree', 'original', 'right', 'subtree', 'right', 'subtree', 'new', 'right', 'subtree', 'if', 'depth', 'means', 'depth', 'create', 'tree', 'node', 'value', 'v', 'new', 'root', 'whole', 'original', 'original', 'tree', 'new', 'left', 'a', 'binary', 'tree', 'v', 'a', 'binary', 'tree', 'v', 'the', 'given', 'range', 'maximum', 'depth', 'given', 'tree', 'the', 'given', 'binary', 'tree', 'least', 'one', 'tree', 'tree']",2
621,Task Scheduler,"['given', 'char', 'array', 'representing', 'tasks', 'cpu', 'need', 'it', 'contains', 'capital', 'letters', 'a', 'z', 'different', 'letters', 'represent', 'different', 'tasks', 'could', 'done', 'without', 'original', 'each', 'task', 'could', 'done', 'one', 'for', 'cpu', 'could', 'finish', 'one', 'task', 'cooling', 'interval', 'n', 'means', 'two', 'must', 'least', 'n', 'intervals', 'cpu', 'different', 'tasks', 'you', 'need', 'return', 'least', 'number', 'intervals', 'cpu', 'take', 'finish', 'given', 'tasks', 'n', 'a', 'b', 'idle', 'a', 'b', 'idle', 'a', 'the', 'number', 'tasks', 'range', 'the', 'integer', 'n', 'range', 'array', 'greedy', 'queue']",2
617,Merge Two Binary Trees,"['given', 'two', 'binary', 'trees', 'imagine', 'put', 'one', 'cover', 'nodes', 'two', 'trees', 'overlapped', 'others', 'you', 'need', 'merge', 'new', 'binary', 'the', 'merge', 'rule', 'two', 'nodes', 'sum', 'node', 'values', 'new', 'value', 'merged', 'not', 'null', 'node', 'used', 'node', 'new', 'tree', 'merged', 'the', 'merging', 'process', 'must', 'start', 'root', 'nodes', 'tree']",1
611,Valid Triangle Number,"['given', 'array', 'consists', 'task', 'count', 'number', 'triplets', 'chosen', 'array', 'make', 'triangles', 'take', 'side', 'lengths', 'valid', 'combinations', 'first', 'second', 'the', 'length', 'given', 'array', 'exceed', 'the', 'integers', 'given', 'array', 'range', 'array']",2
609,Find Duplicate File in System,"['given', 'list', 'directory', 'info', 'including', 'directory', 'files', 'contents', 'need', 'find', 'groups', 'duplicate', 'files', 'file', 'system', 'terms', 'a', 'group', 'duplicate', 'files', 'consists', 'least', 'two', 'files', 'exactly', 'a', 'single', 'directory', 'info', 'string', 'input', 'list', 'following', 'it', 'means', 'n', 'files', 'content', 'directory', 'note', 'n', 'if', 'means', 'directory', 'root', 'the', 'output', 'list', 'group', 'duplicate', 'file', 'for', 'contains', 'file', 'paths', 'files', 'a', 'file', 'path', 'string', 'following', 'no', 'order', 'required', 'final', 'you', 'may', 'assume', 'directory', 'file', 'name', 'file', 'content', 'letters', 'length', 'file', 'content', 'range', 'the', 'number', 'files', 'given', 'range', 'you', 'may', 'assume', 'files', 'directories', 'share', 'name', 'you', 'may', 'assume', 'given', 'directory', 'info', 'represents', 'unique', 'directory', 'path', 'file', 'info', 'separated', 'single', 'blank', 'beyond', 'imagine', 'given', 'real', 'file', 'search', 'dfs', 'if', 'file', 'content', 'large', 'modify', 'if', 'read', 'file', 'modify', 'what', 'time', 'complexity', 'modified', 'what', 'part', 'memory', 'consuming', 'part', 'how', 'how', 'make', 'sure', 'duplicated', 'files', 'find', 'false', 'hash table', 'string']",2
606,Construct String from Binary Tree,"['you', 'need', 'construct', 'string', 'consists', 'parenthesis', 'integers', 'binary', 'tree', 'preorder', 'traversing', 'the', 'null', 'node', 'needs', 'represented', 'empty', 'parenthesis', 'pair', 'and', 'need', 'omit', 'empty', 'parenthesis', 'pairs', 'affect', 'mapping', 'relationship', 'string', 'original', 'binary', 'binary', 'originallay', 'needs', 'need', 'omit', 'unnecessary', 'empty', 'parenthesis', 'and', 'binary', 'almost', 'first', 'except', 'omit', 'first', 'parenthesis', 'pair', 'break', 'mapping', 'relationship', 'input', 'string', 'tree']",1
605,Can Place Flowers,"['suppose', 'long', 'flowerbed', 'plots', 'planted', 'flowers', 'cannot', 'planted', 'adjacent', 'plots', 'would', 'compete', 'water', 'would', 'given', 'flowerbed', 'array', 'containing', 'means', 'empty', 'means', 'number', 'return', 'n', 'new', 'flowers', 'planted', 'without', 'violating', 'flowerbed', 'n', 'flowerbed', 'n', 'the', 'input', 'array', 'violate', 'the', 'input', 'array', 'size', 'range', 'n', 'integer', 'exceed', 'input', 'array', 'array']",1
600,Non-negative Integers without Consecutive Ones,"['given', 'positive', 'integer', 'find', 'number', 'integers', 'less', 'equal', 'whose', 'binary', 'representations', 'not', 'contain', 'consecutive', 'here', 'integers', 'corresponding', 'binary', 'among', 'integer', 'disobeys', 'rule', 'consecutive', 'satisfy', 'n', 'dynamic programming']",3
599,Minimum Index Sum of Two Lists,"['suppose', 'andy', 'doris', 'want', 'choose', 'restaurant', 'list', 'favorite', 'restaurants', 'represented', 'you', 'need', 'help', 'find', 'common', 'interest', 'least', 'list', 'index', 'if', 'choice', 'tie', 'output', 'order', 'you', 'could', 'assume', 'always', 'exists', 'grill', 'torrey', 'hunter', 'the', 'restaurant', 'like', 'the', 'restaurant', 'like', 'least', 'index', 'sum', 'index', 'sum', 'the', 'length', 'lists', 'range', 'the', 'length', 'strings', 'lists', 'range', 'the', 'index', 'starting', 'list', 'length', 'minus', 'no', 'duplicates', 'hash table']",1
598,Range Addition II,"['given', 'n', 'matrix', 'm', 'initialized', 'several', 'update', 'operations', 'represented', 'operation', 'represented', 'array', 'two', 'positive', 'integers', 'means', 'added', 'one', 'j', 'you', 'need', 'count', 'return', 'number', 'maximum', 'integers', 'matrix', 'performing', 'n', 'operations', 'm', 'after', 'performing', 'm', 'after', 'performing', 'm', 'so', 'maximum', 'integer', 'm', 'four', 'so', 'return', 'the', 'range', 'n', 'the', 'range', 'range', 'b', 'the', 'range', 'operations', 'size', 'exceed', 'math']",1
594,Longest Harmonious Subsequence,"['we', 'define', 'harmounious', 'array', 'array', 'difference', 'maximum', 'value', 'minimum', 'value', 'exactly', 'given', 'integer', 'need', 'find', 'length', 'longest', 'harmonious', 'subsequence', 'among', 'possible', 'the', 'longest', 'harmonious', 'subsequence', 'the', 'length', 'input', 'array', 'exceed', 'hash table']",1
593,Valid Square,"['given', 'coordinates', 'four', 'points', 'return', 'whether', 'four', 'points', 'could', 'construct', 'the', 'coordinate', 'point', 'represented', 'integer', 'array', 'two', 'all', 'input', 'integers', 'range', 'a', 'valid', 'square', 'four', 'equal', 'sides', 'positive', 'length', 'four', 'equal', 'angles', 'input', 'points', 'math']",2
592,Fraction Addition and Subtraction,"['given', 'string', 'representing', 'expression', 'fraction', 'addition', 'need', 'return', 'calculation', 'result', 'string', 'the', 'final', 'result', 'irreducible', 'if', 'final', 'result', 'say', 'need', 'change', 'format', 'fraction', 'denominator', 'so', 'converted', 'the', 'input', 'string', 'contains', 'so', 'each', 'fraction', 'format', 'if', 'first', 'input', 'fraction', 'output', 'the', 'input', 'contains', 'valid', 'irreducible', 'numerator', 'denominator', 'fraction', 'always', 'range', 'if', 'denominator', 'means', 'fraction', 'actually', 'integer', 'fraction', 'format', 'defined', 'the', 'number', 'given', 'fractions', 'range', 'the', 'numerator', 'denominator', 'final', 'result', 'guaranteed', 'valid', 'range', 'math']",2
591,Tag Validator,"['given', 'string', 'representing', 'code', 'need', 'implement', 'tag', 'validator', 'parse', 'code', 'return', 'whether', 'a', 'code', 'snippet', 'valid', 'following', 'rules', 'the', 'code', 'must', 'wrapped', 'valid', 'closed', 'code', 'a', 'closed', 'tag', 'necessarily', 'exactly', 'following', 'format', 'among', 'start', 'end', 'the', 'start', 'end', 'tags', 'a', 'closed', 'tag', 'valid', 'a', 'valid', 'contain', 'length', 'range', 'a', 'valid', 'may', 'contain', 'valid', 'closed', 'cdata', 'characters', 'except', 'unmatched', 'unmatched', 'start', 'end', 'unmatched', 'closed', 'tags', 'invalid', 'a', 'start', 'tag', 'unmatched', 'end', 'tag', 'exists', 'vice', 'also', 'need', 'consider', 'issue', 'unbalanced', 'tags', 'a', 'unmatched', 'cannot', 'find', 'subsequent', 'and', 'find', 'subsequent', 'characters', 'next', 'parsed', 'necessarily', 'the', 'cdata', 'following', 'format', 'the', 'range', 'defined', 'characters', 'first', 'subsequent', 'may', 'contain', 'the', 'function', 'cdata', 'forbid', 'validator', 'parse', 'even', 'characters', 'parsed', 'tag', 'matter', 'valid', 'treat', 'regular', 'valid', 'code', 'first', 'line', 'the', 'code', 'wrapped', 'closed', 'tag', 'the', 'consists', 'characters', 'although', 'unmatched', 'start', 'tag', 'invalid', 'considered', 'plain', 'parsed', 'so', 'code', 'thus', 'return', 'we', 'first', 'separate', 'code', 'could', 'also', 'separated', 'cdata', 'the', 'reason', 'not', 'rule', 'the', 'reason', 'cdata', 'not', 'rule', 'invalid', 'code', 'if', 'must', 'vice', 'div', 'tag', 'closed', 'unmatched', 'closed', 'tags', 'invalid', 'tag', 'name', 'unmatched', 'tags', 'invalid', 'tag', 'name', 'unmatched', 'start', 'tag', 'unmatched', 'end', 'tag', 'for', 'could', 'assume', 'input', 'code', 'characters', 'mentioned', 'contain', 'string', 'stack']",3
587,Erect the Fence,"['there', 'tree', 'represented', 'coordinate', 'your', 'job', 'fence', 'entire', 'garden', 'using', 'minimum', 'length', 'rope', 'the', 'garden', 'well', 'fenced', 'trees', 'your', 'task', 'help', 'find', 'coordinates', 'trees', 'exactly', 'located', 'fence', 'even', 'trees', 'need', 'use', 'rope', 'enclose', 'all', 'trees', 'enclosed', 'you', 'cannot', 'cut', 'rope', 'enclose', 'trees', 'separate', 'one', 'all', 'input', 'integers', 'range', 'the', 'garden', 'least', 'one', 'all', 'coordinates', 'input', 'points', 'no', 'no', 'order', 'required', 'input', 'types', 'changed', 'april', 'please', 'reset', 'default', 'code', 'definition', 'get', 'new', 'method', 'geometry']",3
583,Delete Operation for Two Strings,"['given', 'two', 'words', 'find', 'minimum', 'number', 'steps', 'required', 'make', 'step', 'delete', 'one', 'character', 'either', 'you', 'need', 'one', 'step', 'make', 'another', 'step', 'make', 'the', 'length', 'given', 'words', 'exceed', 'characters', 'given', 'words', 'string']",2
581,Shortest Unsorted Continuous Subarray,"['given', 'integer', 'need', 'find', 'one', 'continuous', 'subarray', 'sort', 'subarray', 'ascending', 'whole', 'array', 'sorted', 'ascending', 'you', 'need', 'find', 'shortest', 'subarray', 'output', 'you', 'need', 'sort', 'ascending', 'order', 'make', 'whole', 'array', 'sorted', 'ascending', 'then', 'length', 'input', 'array', 'range', 'the', 'input', 'array', 'may', 'contain', 'ascending', 'order', 'means', 'array']",1
576,Out of Boundary Paths,"['there', 'n', 'grid', 'given', 'start', 'coordinate', 'move', 'ball', 'adjacent', 'cell', 'cross', 'grid', 'boundary', 'four', 'directions', 'move', 'n', 'find', 'number', 'paths', 'move', 'ball', 'grid', 'the', 'answer', 'may', 'return', 'mod', 'n', 'n', 'j', 'n', 'n', 'j', 'once', 'move', 'ball', 'cannot', 'move', 'the', 'length', 'height', 'grid', 'range', 'n', 'range', 'dynamic programming', 'depth-first search']",2
575,Distribute Candies,"['given', 'integer', 'array', 'even', 'different', 'numbers', 'array', 'represent', 'different', 'kinds', 'each', 'number', 'means', 'one', 'candy', 'corresponding', 'you', 'need', 'distribute', 'candies', 'equally', 'number', 'brother', 'return', 'maximum', 'number', 'kinds', 'candies', 'sister', 'could', 'candies', 'there', 'three', 'different', 'kinds', 'candies', 'two', 'candies', 'optimal', 'the', 'sister', 'candies', 'brother', 'candies', 'the', 'sister', 'three', 'different', 'kinds', 'candies', 'for', 'sister', 'candies', 'brother', 'candies', 'the', 'sister', 'two', 'different', 'kinds', 'brother', 'one', 'kind', 'the', 'length', 'given', 'array', 'range', 'the', 'number', 'given', 'array', 'range', 'hash table']",1
572,Subtree of Another Tree,"['given', 'two', 'binary', 'trees', 'check', 'whether', 'tree', 'exactly', 'structure', 'node', 'values', 'subtree', 'a', 'subtree', 'tree', 'consists', 'node', 'the', 'tree', 'could', 'also', 'considered', 'subtree', 'given', 'tree', 'given', 'tree', 'return', 'structure', 'node', 'values', 'subtree', 'given', 'tree', 'given', 'tree', 'return', 'tree']",1
567,Permutation in String,"['given', 'two', 'strings', 'write', 'function', 'return', 'true', 'contains', 'permutation', 'in', 'one', 'first', 'permutations', 'substring', 'second', 'contains', 'one', 'permutation', 'the', 'input', 'strings', 'contain', 'lower', 'case', 'the', 'length', 'given', 'strings', 'range', 'two pointers', 'sliding window']",2
566,Reshape the Matrix,"['in', 'useful', 'function', 'called', 'reshape', 'matrix', 'new', 'one', 'different', 'size', 'keep', 'original', 'given', 'matrix', 'represented', 'two', 'positive', 'integers', 'r', 'c', 'representing', 'row', 'number', 'column', 'number', 'wanted', 'reshaped', 'the', 'reshaped', 'matrix', 'need', 'filled', 'elements', 'original', 'matrix', 'order', 'if', 'operation', 'given', 'parameters', 'possible', 'output', 'new', 'reshaped', 'output', 'original', 'nums', 'r', 'c', 'nums', 'the', 'new', 'reshaped', 'matrix', 'fill', 'row', 'row', 'using', 'previous', 'nums', 'r', 'c', 'way', 'reshape', 'matrix', 'so', 'output', 'original', 'the', 'height', 'width', 'given', 'matrix', 'range', 'the', 'given', 'r', 'c', 'array']",1
565,Array Nesting,"['a', 'array', 'a', 'length', 'n', 'contains', 'integers', 'find', 'return', 'longest', 'length', 'set', 'subjected', 'rule', 'suppose', 'first', 'element', 's', 'starts', 'selection', 'element', 'index', 'next', 'element', 's', 'by', 'stop', 'adding', 'right', 'duplicate', 'element', 'occurs', 'a', 'one', 'longest', 'n', 'integer', 'within', 'range', 'the', 'elements', 'a', 'each', 'element', 'a', 'integer', 'within', 'range', 'array']",2
564,Find the Closest Palindrome,"['given', 'integer', 'find', 'closest', 'integer', 'including', 'the', 'defined', 'absolute', 'difference', 'minimized', 'two', 'the', 'input', 'n', 'positive', 'integer', 'represented', 'whose', 'length', 'exceed', 'if', 'return', 'smaller', 'one', 'string']",3
563,Binary Tree Tilt,"['given', 'binary', 'return', 'tilt', 'whole', 'the', 'tilt', 'tree', 'node', 'defined', 'absolute', 'difference', 'sum', 'left', 'subtree', 'node', 'values', 'sum', 'right', 'subtree', 'node', 'null', 'node', 'tilt', 'the', 'tilt', 'whole', 'tree', 'defined', 'sum', 'tilt', 'node', 'tilt', 'node', 'tilt', 'node', 'tilt', 'binary', 'tree', 'the', 'sum', 'node', 'values', 'subtree', 'exceed', 'range', 'all', 'tilt', 'values', 'exceed', 'range', 'tree']",1
561,Array Partition I,"['given', 'array', 'task', 'group', 'integers', 'n', 'pairs', 'say', 'makes', 'sum', 'n', 'large', 'n', 'maximum', 'sum', 'pairs', 'n', 'positive', 'range', 'all', 'integers', 'array', 'range', 'array']",1
560,Subarray Sum Equals K,"['given', 'array', 'integers', 'integer', 'need', 'find', 'total', 'number', 'continuous', 'subarrays', 'whose', 'sum', 'equals', 'k', 'the', 'length', 'array', 'range', 'the', 'range', 'numbers', 'array', 'range', 'integer', 'k', 'array', 'hash table']",2
557,Reverse Words in a String III,"['given', 'need', 'reverse', 'order', 'characters', 'word', 'within', 'sentence', 'still', 'preserving', 'whitespace', 'initial', 'word', 'take', 'leetcode', 'ekat', 'edocteel', 'in', 'word', 'separated', 'single', 'space', 'extra', 'space', 'string']",1
556,Next Greater Element III,"['given', 'positive', 'integer', 'need', 'find', 'smallest', 'integer', 'exactly', 'digits', 'existing', 'integer', 'n', 'greater', 'value', 'if', 'positive', 'integer', 'need', 'return', 'string']",2
554,Brick Wall,"['there', 'brick', 'wall', 'front', 'the', 'wall', 'rectangular', 'several', 'rows', 'the', 'bricks', 'height', 'different', 'you', 'want', 'draw', 'vertical', 'line', 'top', 'bottom', 'cross', 'least', 'the', 'brick', 'wall', 'represented', 'list', 'each', 'row', 'list', 'integers', 'representing', 'width', 'brick', 'row', 'left', 'if', 'line', 'go', 'edge', 'brick', 'considered', 'you', 'need', 'find', 'draw', 'line', 'cross', 'least', 'bricks', 'return', 'number', 'crossed', 'you', 'cannot', 'draw', 'line', 'along', 'one', 'two', 'vertical', 'edges', 'case', 'line', 'obviously', 'cross', 'the', 'width', 'sum', 'bricks', 'different', 'rows', 'exceed', 'the', 'number', 'bricks', 'row', 'range', 'the', 'height', 'wall', 'range', 'total', 'number', 'bricks', 'wall', 'exceed', 'hash table']",2
553,Optimal Division,"['given', 'list', 'positive', 'adjacent', 'integers', 'perform', 'float', 'for', 'add', 'number', 'parenthesis', 'position', 'change', 'priority', 'you', 'find', 'add', 'parenthesis', 'get', 'maximum', 'return', 'corresponding', 'expression', 'string', 'your', 'expression', 'not', 'contain', 'redundant', 'bold', 'parenthesis', 'since', 'influence', 'operation', 'so', 'return', 'other', 'the', 'length', 'input', 'array', 'elements', 'given', 'array', 'range', 'there', 'one', 'optimal', 'division', 'test', 'math', 'string']",2
552,Student Attendance Record II,"['given', 'positive', 'integer', 'return', 'number', 'possible', 'attendance', 'records', 'length', 'regarded', 'the', 'answer', 'may', 'return', 'mod', 'a', 'student', 'attendance', 'record', 'string', 'contains', 'following', 'three', 'a', 'record', 'regarded', 'rewardable', 'contain', 'one', 'two', 'continuous', 'n', 'there', 'records', 'length', 'regarded', 'only', 'regarded', 'rewardable', 'owing', 'one', 'absent', 'the', 'value', 'n', 'exceed', 'dynamic programming']",3
551,Student Attendance Record I,"['you', 'given', 'string', 'representing', 'attendance', 'record', 'the', 'record', 'contains', 'following', 'three', 'a', 'student', 'could', 'rewarded', 'attendance', 'record', 'contain', 'one', 'two', 'continuous', 'you', 'need', 'return', 'whether', 'student', 'could', 'rewarded', 'according', 'attendance', 'string']",1
547,Friend Circles,"['there', 'n', 'students', 'some', 'their', 'friendship', 'transitive', 'for', 'a', 'direct', 'friend', 'b', 'direct', 'friend', 'a', 'indirect', 'friend', 'and', 'defined', 'friend', 'circle', 'group', 'students', 'direct', 'indirect', 'given', 'matrix', 'm', 'representing', 'friend', 'relationship', 'students', 'if', 'ith', 'jth', 'students', 'direct', 'friends', 'otherwise', 'and', 'output', 'total', 'number', 'friend', 'circles', 'among', 'students', 'direct', 'friend', 'the', 'student', 'friend', 'so', 'return', 'students', 'direct', 'students', 'direct', 'students', 'indirect', 'all', 'friend', 'return', 'n', 'range', 'if', 'depth-first search', 'union find']",2
546,Remove Boxes,"['given', 'several', 'boxes', 'different', 'colors', 'represented', 'different', 'positive', 'you', 'may', 'experience', 'several', 'rounds', 'remove', 'boxes', 'box', 'each', 'time', 'choose', 'continuous', 'boxes', 'color', 'k', 'k', 'remove', 'get', 'find', 'maximum', 'points', 'the', 'number', 'boxes', 'n', 'would', 'exceed', 'dynamic programming', 'depth-first search']",3
543,Diameter of Binary Tree,"['given', 'binary', 'need', 'compute', 'length', 'diameter', 'the', 'diameter', 'binary', 'tree', 'length', 'longest', 'path', 'two', 'nodes', 'this', 'path', 'may', 'may', 'pass', 'given', 'binary', 'tree', 'return', 'length', 'path', 'the', 'length', 'path', 'two', 'nodes', 'represented', 'number', 'edges', 'tree']",1
542,01 Matrix,"['given', 'matrix', 'consists', 'find', 'distance', 'nearest', 'the', 'distance', 'two', 'adjacent', 'cells', 'the', 'number', 'elements', 'given', 'matrix', 'exceed', 'there', 'least', 'one', 'given', 'the', 'cells', 'adjacent', 'four', 'left', 'depth-first search', 'breadth-first search']",2
541,Reverse String II,"['given', 'string', 'integer', 'need', 'reverse', 'first', 'k', 'characters', 'every', 'characters', 'counting', 'start', 'if', 'less', 'k', 'characters', 'reverse', 'if', 'less', 'greater', 'equal', 'k', 'reverse', 'first', 'k', 'characters', 'left', 'string']",1
540,Single Element in a Sorted Array,"['given', 'sorted', 'array', 'consisting', 'integers', 'every', 'element', 'appears', 'exactly', 'twice', 'except', 'one', 'element', 'appears', 'find', 'single', 'element', 'appears', 'your', 'solution', 'run', 'time']",2
539,Minimum Time Difference,"['given', 'list', 'clock', 'time', 'points', 'find', 'minimum', 'minutes', 'difference', 'two', 'time', 'points', 'the', 'number', 'time', 'points', 'given', 'list', 'least', 'exceed', 'the', 'input', 'time', 'legal', 'ranges', 'string']",2
538,Convert BST to Greater Tree,"['given', 'binary', 'search', 'tree', 'convert', 'greater', 'tree', 'every', 'key', 'original', 'bst', 'changed', 'original', 'key', 'plus', 'sum', 'keys', 'greater', 'original', 'key', 'the', 'root', 'binary', 'search', 'tree', 'like', 'the', 'root', 'greater', 'tree', 'like', 'tree']",1
537,Complex Number Multiplication,"['given', 'two', 'strings', 'representing', 'two', 'complex', 'you', 'need', 'return', 'string', 'representing', 'note', 'according', 'need', 'convert', 'form', 'need', 'convert', 'form', 'the', 'input', 'strings', 'extra', 'the', 'input', 'strings', 'given', 'form', 'integer', 'b', 'belong', 'range', 'and', 'output', 'also', 'math', 'string']",2
535,Encode and Decode TinyURL,"['this', 'companion', 'problem', 'system', 'design', 'design', 'tinyurl', 'url', 'shortening', 'service', 'enter', 'url', 'returns', 'short', 'url', 'design', 'encode', 'decode', 'methods', 'tinyurl', 'there', 'restriction', 'algorithm', 'you', 'need', 'ensure', 'url', 'encoded', 'tiny', 'url', 'tiny', 'url', 'decoded', 'original', 'hash table', 'math']",2
532,K-diff Pairs in an Array,"['given', 'array', 'integers', 'integer', 'need', 'find', 'number', 'unique', 'pairs', 'here', 'pair', 'defined', 'integer', 'pair', 'j', 'numbers', 'array', 'absolute', 'difference', 'k', 'there', 'two', 'pairs', 'two', 'return', 'number', 'unique', 'k', 'there', 'four', 'pairs', 'k', 'there', 'one', 'pair', 'the', 'pairs', 'count', 'the', 'length', 'array', 'exceed', 'all', 'integers', 'given', 'input', 'belong', 'array', 'two pointers']",1
530,Minimum Absolute Difference in BST,"['given', 'binary', 'search', 'tree', 'find', 'minimum', 'absolute', 'difference', 'values', 'two', 'the', 'minimum', 'absolute', 'difference', 'difference', 'there', 'least', 'two', 'nodes', 'tree']",1
529,Minesweeper,"['play', 'minesweeper', 'game', 'online', 'you', 'given', 'char', 'matrix', 'representing', 'game', 'represents', 'unrevealed', 'represents', 'unrevealed', 'empty', 'represents', 'revealed', 'blank', 'square', 'adjacent', 'digit', 'represents', 'many', 'mines', 'adjacent', 'revealed', 'finally', 'represents', 'revealed', 'now', 'given', 'next', 'click', 'position', 'column', 'among', 'unrevealed', 'squares', 'return', 'board', 'revealing', 'position', 'according', 'following', 'if', 'mine', 'game', 'change', 'if', 'empty', 'square', 'adjacent', 'mines', 'change', 'revealed', 'blank', 'adjacent', 'unrevealed', 'squares', 'revealed', 'if', 'empty', 'square', 'least', 'one', 'adjacent', 'mine', 'change', 'digit', 'representing', 'number', 'adjacent', 'return', 'board', 'squares', 'click', 'click', 'the', 'range', 'input', 'height', 'width', 'the', 'click', 'position', 'unrevealed', 'square', 'also', 'means', 'input', 'board', 'contains', 'least', 'one', 'clickable', 'the', 'input', 'board', 'stage', 'game', 'mines', 'for', 'mentioned', 'rules', 'ignored', 'for', 'need', 'reveal', 'unrevealed', 'mines', 'game', 'consider', 'cases', 'win', 'game', 'flag', 'depth-first search', 'breadth-first search']",2
526,Beautiful Arrangement,"['suppose', 'n', 'integers', 'we', 'define', 'beautiful', 'arrangement', 'array', 'constructed', 'n', 'numbers', 'successfully', 'one', 'following', 'true', 'ith', 'position', 'the', 'number', 'ith', 'position', 'divisible', 'divisible', 'number', 'ith', 'now', 'given', 'many', 'beautiful', 'arrangements', 'the', 'first', 'beautiful', 'arrangement', 'number', 'position', 'divisible', 'number', 'position', 'divisible', 'the', 'second', 'beautiful', 'arrangement', 'number', 'position', 'divisible', 'number', 'position', 'divisible', 'n', 'positive', 'integer', 'exceed', 'backtracking']",2
525,Contiguous Array,"['given', 'binary', 'find', 'maximum', 'length', 'contiguous', 'subarray', 'equal', 'number', 'longest', 'contiguous', 'subarray', 'equal', 'number', 'longest', 'contiguous', 'subarray', 'equal', 'number', 'the', 'length', 'given', 'binary', 'array', 'exceed', 'hash table']",2
524,Longest Word in Dictionary through Deleting,"['given', 'string', 'string', 'find', 'longest', 'string', 'dictionary', 'formed', 'deleting', 'characters', 'given', 'if', 'one', 'possible', 'return', 'longest', 'word', 'smallest', 'lexicographical', 'if', 'possible', 'return', 'empty', 'all', 'strings', 'input', 'contain', 'the', 'size', 'dictionary', 'exceed', 'the', 'length', 'strings', 'input', 'exceed', 'two pointers', 'sort']",2
523,Continuous Subarray Sum,"['given', 'list', 'numbers', 'target', 'integer', 'write', 'function', 'check', 'array', 'continuous', 'subarray', 'size', 'least', 'sums', 'multiple', 'sums', 'n', 'also', 'because', 'continuous', 'subarray', 'size', 'sums', 'because', 'continuous', 'subarray', 'size', 'sums', 'the', 'length', 'array', 'exceed', 'you', 'may', 'assume', 'sum', 'numbers', 'range', 'signed', 'math', 'dynamic programming']",2
522,Longest Uncommon Subsequence II,"['given', 'list', 'need', 'find', 'longest', 'uncommon', 'subsequence', 'among', 'the', 'longest', 'uncommon', 'subsequence', 'defined', 'longest', 'subsequence', 'one', 'strings', 'subsequence', 'subsequence', 'a', 'subsequence', 'sequence', 'derived', 'one', 'sequence', 'deleting', 'characters', 'without', 'changing', 'order', 'remaining', 'string', 'subsequence', 'empty', 'string', 'subsequence', 'the', 'input', 'list', 'output', 'needs', 'length', 'longest', 'uncommon', 'if', 'longest', 'uncommon', 'subsequence', 'return', 'all', 'given', 'lengths', 'exceed', 'the', 'length', 'given', 'list', 'range', 'string']",2
521,Longest Uncommon Subsequence I ,"['given', 'group', 'two', 'need', 'find', 'longest', 'uncommon', 'subsequence', 'group', 'two', 'the', 'longest', 'uncommon', 'subsequence', 'defined', 'longest', 'subsequence', 'one', 'strings', 'subsequence', 'subsequence', 'a', 'subsequence', 'sequence', 'derived', 'one', 'sequence', 'deleting', 'characters', 'without', 'changing', 'order', 'remaining', 'string', 'subsequence', 'empty', 'string', 'subsequence', 'the', 'input', 'two', 'output', 'needs', 'length', 'longest', 'uncommon', 'if', 'longest', 'uncommon', 'subsequence', 'return', 'the', 'longest', 'uncommon', 'subsequence', 'subsequence', 'subsequence', 'strings', 'group', 'two', 'both', 'lengths', 'exceed', 'only', 'letters', 'z', 'appear', 'input', 'string']",1
520,Detect Capital,"['given', 'need', 'judge', 'whether', 'usage', 'capitals', 'right', 'we', 'define', 'usage', 'capitals', 'word', 'right', 'one', 'following', 'cases', 'all', 'letters', 'word', 'like', 'all', 'letters', 'word', 'like', 'only', 'first', 'letter', 'word', 'like', 'define', 'word', 'use', 'capitals', 'right', 'the', 'input', 'word', 'consisting', 'uppercase', 'lowercase', 'latin', 'string']",1
518,Coin Change 2,"['you', 'given', 'coins', 'different', 'denominations', 'total', 'amount', 'write', 'function', 'compute', 'number', 'combinations', 'make', 'you', 'may', 'assume', 'infinite', 'number', 'kind', 'amount', 'coins', 'four', 'ways', 'make', 'amount', 'coins', 'amount', 'cannot', 'made', 'coins', 'amount', 'coins', 'you', 'assume', 'amount', 'coin', 'number', 'coins', 'less', 'answer', 'guaranteed', 'fit', 'signed', 'integer']",2
517,Super Washing Machines,"['you', 'n', 'super', 'washing', 'machines', 'washing', 'machine', 'dresses', 'for', 'could', 'choose', 'washing', 'pass', 'one', 'dress', 'washing', 'machine', 'one', 'adjacent', 'washing', 'machines', 'time', 'given', 'integer', 'array', 'representing', 'number', 'dresses', 'washing', 'machine', 'left', 'right', 'find', 'minimum', 'number', 'moves', 'make', 'washing', 'machines', 'number', 'if', 'possible', 'return', 'impossible', 'make', 'three', 'washing', 'machines', 'number', 'the', 'range', 'n', 'the', 'range', 'dresses', 'number', 'super', 'washing', 'machine', 'math', 'dynamic programming']",3
516,Longest Palindromic Subsequence,"['given', 'string', 'find', 'longest', 'palindromic', 'length', 'you', 'may', 'assume', 'maximum', 'length', 'one', 'possible', 'longest', 'palindromic', 'subsequence', 'one', 'possible', 'longest', 'palindromic', 'subsequence', 'dynamic programming']",2
515,Find Largest Value in Each Tree Row,"['you', 'need', 'find', 'largest', 'value', 'row', 'binary', 'tree', 'depth-first search', 'breadth-first search']",2
514,Freedom Trail,"['in', 'video', 'game', 'fallout', 'quest', 'requires', 'players', 'reach', 'metal', 'dial', 'called', 'trail', 'use', 'dial', 'spell', 'specific', 'keyword', 'order', 'open', 'given', 'string', 'represents', 'code', 'engraved', 'outer', 'ring', 'another', 'string', 'represents', 'keyword', 'needs', 'you', 'need', 'find', 'minimum', 'number', 'steps', 'order', 'spell', 'characters', 'first', 'character', 'ring', 'aligned', 'you', 'need', 'spell', 'characters', 'string', 'key', 'one', 'one', 'rotating', 'ring', 'clockwise', 'anticlockwise', 'make', 'character', 'string', 'key', 'aligned', 'direction', 'pressing', 'center', 'at', 'stage', 'rotating', 'ring', 'spell', 'key', 'character', 'you', 'rotate', 'ring', 'clockwise', 'anticlockwise', 'one', 'counts', 'the', 'final', 'purpose', 'rotation', 'align', 'one', 'string', 'characters', 'character', 'must', 'equal', 'character', 'if', 'character', 'aligned', 'need', 'press', 'center', 'button', 'also', 'counts', 'after', 'could', 'begin', 'spell', 'next', 'character', 'key', 'finished', 'ring', 'key', 'for', 'first', 'key', 'character', 'since', 'already', 'need', 'step', 'spell', 'for', 'second', 'key', 'character', 'need', 'rotate', 'ring', 'anticlockwise', 'two', 'steps', 'make', 'become', 'need', 'step', 'so', 'final', 'output', 'length', 'ring', 'key', 'range', 'there', 'lowercase', 'letters', 'strings', 'might', 'duplcate', 'characters', 'guaranteed', 'string', 'key', 'could', 'always', 'spelled', 'rotating', 'string', 'divide and conquer', 'dynamic programming', 'depth-first search']",3
513,Find Bottom Left Tree Value,"['given', 'binary', 'find', 'leftmost', 'value', 'last', 'row', 'you', 'may', 'assume', 'tree', 'given', 'root', 'tree', 'depth-first search', 'breadth-first search']",2
508,Most Frequent Subtree Sum,"['given', 'root', 'asked', 'find', 'frequent', 'subtree', 'the', 'subtree', 'sum', 'node', 'defined', 'sum', 'node', 'values', 'formed', 'subtree', 'rooted', 'node', 'node', 'so', 'frequent', 'subtree', 'sum', 'if', 'return', 'values', 'highest', 'frequency', 'examples', 'return', 'since', 'values', 'happen', 'return', 'examples', 'return', 'since', 'happens', 'however', 'occur', 'you', 'may', 'assume', 'sum', 'values', 'subtree', 'range', 'signed', 'hash table', 'tree']",2
507,Perfect Number,"['we', 'define', 'perfect', 'number', 'positive', 'integer', 'equal', 'sum', 'positive', 'divisors', 'except', 'given', 'integer', 'write', 'function', 'returns', 'true', 'perfect', 'number', 'false', 'the', 'input', 'number', 'n', 'exceed', 'math']",1
506,Relative Ranks,"['given', 'scores', 'n', 'find', 'relative', 'ranks', 'people', 'top', 'three', 'highest', 'awarded', 'the', 'first', 'three', 'athletes', 'got', 'top', 'three', 'highest', 'got', 'for', 'left', 'two', 'need', 'output', 'relative', 'ranks', 'according', 'n', 'positive', 'integer', 'exceed', 'all', 'scores', 'athletes', 'guaranteed']",1
504,Base 7,"['given', 'return', 'base', 'string', 'the', 'input', 'range']",1
503,Next Greater Element II,"['given', 'circular', 'array', 'next', 'element', 'last', 'element', 'first', 'element', 'print', 'next', 'greater', 'number', 'every', 'the', 'next', 'greater', 'number', 'number', 'x', 'first', 'greater', 'number', 'next', 'means', 'could', 'search', 'circularly', 'find', 'next', 'greater', 'if', 'output', 'the', 'first', 'next', 'greater', 'number', 'the', 'number', 'find', 'next', 'greater', 'the', 'second', 'next', 'greater', 'number', 'needs', 'search', 'also', 'the', 'length', 'given', 'array', 'exceed', 'stack']",2
502,IPO,"['suppose', 'leetcode', 'start', 'ipo', 'in', 'order', 'sell', 'good', 'price', 'shares', 'venture', 'leetcode', 'would', 'like', 'work', 'projects', 'increase', 'capital', 'since', 'limited', 'finish', 'k', 'distinct', 'projects', 'help', 'leetcode', 'design', 'best', 'way', 'maximize', 'total', 'capital', 'finishing', 'k', 'distinct', 'you', 'given', 'several', 'for', 'project', 'pure', 'profit', 'pi', 'minimum', 'capital', 'ci', 'needed', 'start', 'corresponding', 'w', 'when', 'finish', 'obtain', 'pure', 'profit', 'profit', 'added', 'total', 'to', 'sum', 'pick', 'list', 'k', 'distinct', 'projects', 'given', 'projects', 'maximize', 'final', 'output', 'final', 'maximized', 'since', 'initial', 'capital', 'start', 'project', 'indexed', 'after', 'finishing', 'obtain', 'profit', 'capital', 'becomes', 'with', 'capital', 'either', 'start', 'project', 'indexed', 'project', 'indexed', 'since', 'choose', 'need', 'finish', 'project', 'indexed', 'get', 'maximum', 'output', 'final', 'maximized', 'you', 'may', 'assume', 'numbers', 'input', 'the', 'length', 'profits', 'array', 'capital', 'array', 'exceed', 'the', 'answer', 'guaranteed', 'fit', 'signed', 'heap', 'greedy']",3
501,Find Mode in Binary Search Tree,"['given', 'binary', 'search', 'tree', 'find', 'frequently', 'occurred', 'given', 'assume', 'bst', 'defined', 'the', 'left', 'subtree', 'node', 'contains', 'nodes', 'keys', 'less', 'equal', 'the', 'right', 'subtree', 'node', 'contains', 'nodes', 'keys', 'greater', 'equal', 'both', 'left', 'right', 'subtrees', 'must', 'also', 'binary', 'search', 'for', 'given', 'bst', 'return', 'if', 'tree', 'one', 'return', 'follow', 'could', 'without', 'using', 'extra', 'implicit', 'stack', 'space', 'incurred', 'due', 'recursion', 'tree']",1
500,Keyboard Row,"['given', 'list', 'return', 'words', 'typed', 'using', 'letters', 'alphabet', 'one', 'american', 'keyboard', 'like', 'image', 'you', 'may', 'use', 'one', 'character', 'keyboard', 'you', 'may', 'assume', 'input', 'string', 'contain', 'letters', 'hash table']",1
498,Diagonal Traverse,"['given', 'matrix', 'm', 'x', 'n', 'elements', 'n', 'return', 'elements', 'matrix', 'diagonal', 'order', 'shown', 'the', 'total', 'number', 'elements', 'given', 'matrix', 'exceed']",2
496,Next Greater Element I,"['you', 'given', 'two', 'arrays', 'elements', 'subset', 'find', 'next', 'greater', 'numbers', 'elements', 'corresponding', 'places', 'the', 'next', 'greater', 'number', 'number', 'x', 'first', 'greater', 'number', 'right', 'if', 'output', 'for', 'number', 'first', 'cannot', 'find', 'next', 'greater', 'number', 'second', 'output', 'for', 'number', 'first', 'next', 'greater', 'number', 'second', 'array', 'for', 'number', 'first', 'next', 'greater', 'number', 'second', 'output', 'for', 'number', 'first', 'next', 'greater', 'number', 'second', 'array', 'for', 'number', 'first', 'next', 'greater', 'number', 'second', 'output', 'all', 'elements', 'the', 'length', 'would', 'exceed', 'stack']",1
495,Teemo Attacking,"['in', 'lol', 'hero', 'called', 'teemo', 'attacking', 'make', 'enemy', 'ashe', 'poisoned', 'given', 'attacking', 'ascending', 'time', 'series', 'towards', 'ashe', 'poisoning', 'time', 'duration', 'per', 'need', 'output', 'total', 'time', 'ashe', 'poisoned', 'you', 'may', 'assume', 'teemo', 'attacks', 'beginning', 'specific', 'time', 'makes', 'ashe', 'poisoned', 'condition', 'at', 'time', 'point', 'teemo', 'starts', 'attacking', 'ashe', 'makes', 'ashe', 'poisoned', 'this', 'poisoned', 'status', 'last', 'seconds', 'end', 'time', 'point', 'and', 'time', 'point', 'teemo', 'attacks', 'ashe', 'causes', 'ashe', 'poisoned', 'status', 'another', 'so', 'finally', 'need', 'output', 'at', 'time', 'point', 'teemo', 'starts', 'attacking', 'ashe', 'makes', 'ashe', 'this', 'poisoned', 'status', 'last', 'seconds', 'end', 'time', 'point', 'beginning', 'time', 'point', 'teemo', 'attacks', 'ashe', 'already', 'poisoned', 'since', 'poisoned', 'status', 'add', 'though', 'second', 'poisoning', 'attack', 'still', 'work', 'time', 'point', 'stop', 'end', 'time', 'point', 'so', 'finally', 'need', 'output', 'you', 'may', 'assume', 'length', 'given', 'time', 'series', 'array', 'exceed', 'you', 'may', 'assume', 'numbers', 'attacking', 'time', 'series', 'poisoning', 'time', 'duration', 'per', 'attacking', 'exceed', 'array']",2
494,Target Sum,"['you', 'given', 'list', 'now', 'symbols', 'for', 'choose', 'one', 'new', 'find', 'many', 'ways', 'assign', 'symbols', 'make', 'sum', 'integers', 'equal', 'target', 'nums', 's', 'there', 'ways', 'assign', 'symbols', 'make', 'sum', 'nums', 'target', 'the', 'length', 'given', 'array', 'positive', 'exceed', 'the', 'sum', 'elements', 'given', 'array', 'exceed', 'your', 'output', 'answer', 'guaranteed', 'fitted', 'dynamic programming', 'depth-first search']",2
493,Reverse Pairs,"['given', 'array', 'call', 'important', 'reverse', 'pair', 'j', 'you', 'need', 'return', 'number', 'important', 'reverse', 'pairs', 'given', 'the', 'length', 'given', 'array', 'exceed', 'all', 'numbers', 'input', 'array', 'range', 'binary search', 'divide and conquer', 'sort', 'binary indexed tree', 'segment tree']",3
492,Construct the Rectangle,"['for', 'web', 'important', 'know', 'design', 'web', 'given', 'specific', 'rectangular', 'web', 'job', 'design', 'rectangular', 'web', 'whose', 'length', 'l', 'width', 'w', 'satisfy', 'following', 'the', 'area', 'rectangular', 'web', 'page', 'designed', 'must', 'equal', 'given', 'target', 'the', 'width', 'w', 'larger', 'length', 'means', 'l', 'the', 'difference', 'length', 'l', 'width', 'w', 'small', 'you', 'need', 'output', 'length', 'l', 'width', 'w', 'web', 'page', 'designed', 'the', 'target', 'area', 'possible', 'ways', 'construct', 'but', 'according', 'requirement', 'according', 'requirement', 'optimal', 'compared', 'so', 'length', 'l', 'width', 'w', 'the', 'given', 'area', 'exceed', 'positive', 'integer', 'the', 'web', 'width', 'length', 'designed', 'must', 'positive']",1
491,Increasing Subsequences,"['given', 'integer', 'task', 'find', 'different', 'possible', 'increasing', 'subsequences', 'given', 'length', 'increasing', 'subsequence', 'least', 'the', 'length', 'given', 'array', 'exceed', 'the', 'range', 'integer', 'given', 'array', 'the', 'given', 'array', 'may', 'contain', 'two', 'equal', 'integers', 'also', 'considered', 'special', 'case', 'increasing', 'depth-first search']",2
488,Zuma Game,"['think', 'zuma', 'you', 'row', 'balls', 'colored', 'you', 'also', 'several', 'balls', 'each', 'may', 'choose', 'ball', 'insert', 'row', 'leftmost', 'place', 'rightmost', 'group', 'balls', 'color', 'remove', 'keep', 'balls', 'find', 'minimal', 'balls', 'insert', 'remove', 'balls', 'if', 'cannot', 'remove', 'output', 'wrrbbw', 'wbbw', 'wwrrbbww', 'wwbbww', 'wwww', 'g', 'empty', 'rbyybbrrb', 'rbbbrrb', 'rrrb', 'b', 'empty', 'you', 'may', 'assume', 'initial', 'row', 'balls', 'table', 'consecutive', 'balls', 'the', 'number', 'balls', 'table', 'exceed', 'string', 'represents', 'balls', 'called', 'the', 'number', 'balls', 'hand', 'exceed', 'string', 'represents', 'balls', 'called', 'both', 'input', 'strings', 'contain', 'characters', 'depth-first search']",3
486,Predict the Winner,"['given', 'array', 'scores', 'player', 'picks', 'one', 'numbers', 'either', 'end', 'array', 'followed', 'player', 'player', 'each', 'time', 'player', 'picks', 'number', 'available', 'next', 'this', 'continues', 'scores', 'the', 'player', 'maximum', 'score', 'given', 'array', 'predict', 'whether', 'player', 'you', 'assume', 'player', 'plays', 'maximize', 'player', 'choose', 'if', 'chooses', 'player', 'choose', 'if', 'player', 'chooses', 'player', 'left', 'final', 'score', 'player', 'player', 'player', 'never', 'winner', 'need', 'return', 'player', 'first', 'chooses', 'then', 'player', 'choose', 'no', 'matter', 'number', 'player', 'player', 'choose', 'player', 'score', 'player', 'need', 'return', 'true', 'representing', 'length', 'array', 'any', 'scores', 'given', 'array', 'integers', 'exceed', 'if', 'scores', 'players', 'player', 'still', 'dynamic programming', 'minimax']",2
485,Max Consecutive Ones,"['given', 'binary', 'find', 'maximum', 'number', 'consecutive', 'the', 'first', 'two', 'digits', 'last', 'three', 'digits', 'consecutive', 'the', 'maximum', 'number', 'consecutive', 'the', 'input', 'array', 'contain', 'the', 'length', 'input', 'array', 'positive', 'integer', 'exceed', 'array']",1
483,Smallest Good Base,"['for', 'integer', 'call', 'good', 'base', 'digits', 'n', 'base', 'k', 'now', 'given', 'string', 'representing', 'return', 'smallest', 'good', 'base', 'n', 'string', 'base', 'base', 'base', 'the', 'range', 'n', 'the', 'string', 'representing', 'n', 'always', 'valid', 'leading', 'math', 'binary search']",3
482,License Key Formatting,"['you', 'given', 'license', 'key', 'represented', 'string', 's', 'consists', 'alphanumeric', 'character', 'the', 'string', 'separated', 'groups', 'n', 'given', 'number', 'would', 'want', 'reformat', 'strings', 'group', 'contains', 'exactly', 'k', 'except', 'first', 'group', 'could', 'shorter', 'still', 'must', 'contain', 'least', 'one', 'must', 'dash', 'inserted', 'two', 'groups', 'lowercase', 'letters', 'converted', 'given', 'string', 's', 'number', 'format', 'string', 'according', 'rules', 'described', 's', 'k', 'the', 'string', 's', 'split', 'two', 'part', 'note', 'two', 'extra', 'dashes', 'needed', 's', 'k', 'the', 'string', 's', 'split', 'three', 'part', 'characters', 'except', 'first', 'part', 'could', 'shorter', 'mentioned', 'the', 'length', 'string', 's', 'exceed', 'k', 'positive', 'string', 's', 'consists', 'alphanumerical', 'characters', 'string', 's']",1
481,Magical String,"['a', 'magical', 'string', 's', 'consists', 'obeys', 'following', 'the', 'string', 's', 'magical', 'concatenating', 'number', 'contiguous', 'occurrences', 'characters', 'generates', 'string', 's', 'the', 'first', 'elements', 'string', 's', 's', 'if', 'group', 'consecutive', 'occurrences', 'group', 'you', 'see', 'occurrence', 'sequence', 's', 'given', 'integer', 'n', 'return', 'number', 'first', 'n', 'number', 'magical', 'string', 'n', 'exceed', 'the', 'first', 'elements', 'magical', 'string', 's', 'contains', 'three', 'return']",2
480,Sliding Window Median,"['median', 'middle', 'value', 'ordered', 'integer', 'if', 'size', 'list', 'middle', 'so', 'median', 'mean', 'two', 'middle', 'median', 'median', 'given', 'array', 'sliding', 'window', 'size', 'k', 'moving', 'left', 'array', 'you', 'see', 'k', 'numbers', 'each', 'time', 'sliding', 'window', 'moves', 'right', 'one', 'your', 'job', 'output', 'median', 'array', 'window', 'original', 'for', 'given', 'nums', 'k', 'window', 'position', 'return', 'median', 'sliding', 'window', 'you', 'may', 'assume', 'k', 'always', 'k', 'always', 'smaller', 'input', 'size', 'sliding window']",3
479,Largest Palindrome Product,"['find', 'largest', 'palindrome', 'made', 'product', 'two', 'since', 'result', 'could', 'return', 'largest', 'palindrome', 'mod', 'x', 'the', 'range', 'n']",3
477,Total Hamming Distance,"['the', 'hamming', 'distance', 'two', 'integers', 'number', 'positions', 'corresponding', 'bits', 'now', 'job', 'find', 'total', 'hamming', 'distance', 'pairs', 'given', 'in', 'binary', 'showing', 'four', 'bits', 'relevant', 'so', 'answer', 'elements', 'given', 'array', 'range', 'length', 'array', 'exceed', 'bit manipulation']",2
476,Number Complement,"['given', 'positive', 'output', 'complement', 'the', 'complement', 'strategy', 'flip', 'bits', 'binary', 'the', 'given', 'integer', 'guaranteed', 'fit', 'within', 'range', 'signed', 'you', 'could', 'assume', 'leading', 'zero', 'bit', 'binary', 'the', 'binary', 'representation', 'leading', 'zero', 'complement', 'so', 'need', 'output', 'the', 'binary', 'representation', 'leading', 'zero', 'complement', 'so', 'need', 'output', 'bit manipulation']",1
475,Heaters,"['winter', 'your', 'first', 'job', 'contest', 'design', 'standard', 'heater', 'fixed', 'warm', 'radius', 'warm', 'given', 'positions', 'houses', 'heaters', 'horizontal', 'find', 'minimum', 'radius', 'heaters', 'houses', 'could', 'covered', 'input', 'positions', 'houses', 'heaters', 'expected', 'output', 'minimum', 'radius', 'standard', 'numbers', 'houses', 'heaters', 'given', 'exceed', 'positions', 'houses', 'heaters', 'given', 'exceed', 'as', 'long', 'house', 'warm', 'radius', 'all', 'heaters', 'follow', 'radius', 'standard', 'warm', 'radius', 'the', 'heater', 'placed', 'position', 'use', 'radius', 'houses', 'the', 'two', 'heater', 'placed', 'position', 'we', 'need', 'use', 'radius', 'houses', 'binary search']",1
474,Ones and Zeroes,"['in', 'computer', 'use', 'restricted', 'resource', 'generate', 'maximum', 'benefit', 'always', 'want', 'for', 'suppose', 'dominator', 'n', 'on', 'array', 'strings', 'consisting', 'now', 'task', 'find', 'maximum', 'number', 'strings', 'form', 'given', 'n', 'each', 'used', 'the', 'given', 'numbers', 'exceed', 'the', 'size', 'given', 'string', 'array', 'exceed', 'array', 'n', 'this', 'totally', 'strings', 'formed', 'using', 'array', 'n', 'you', 'could', 'form', 'nothing', 'better', 'form', 'dynamic programming']",2
473,Matchsticks to Square,"['remember', 'story', 'little', 'match', 'by', 'know', 'exactly', 'matchsticks', 'little', 'match', 'girl', 'please', 'find', 'way', 'make', 'one', 'square', 'using', 'you', 'break', 'link', 'matchstick', 'must', 'used', 'exactly', 'one', 'your', 'input', 'several', 'matchsticks', 'girl', 'represented', 'stick', 'your', 'output', 'either', 'true', 'represent', 'whether', 'could', 'make', 'one', 'square', 'using', 'matchsticks', 'little', 'match', 'girl', 'you', 'form', 'square', 'length', 'one', 'side', 'square', 'came', 'two', 'sticks', 'length', 'you', 'cannot', 'find', 'way', 'form', 'square', 'the', 'length', 'sum', 'given', 'matchsticks', 'range', 'the', 'length', 'given', 'matchstick', 'array', 'exceed', 'depth-first search']",2
472,Concatenated Words,"['given', 'list', 'words', 'please', 'write', 'program', 'returns', 'concatenated', 'words', 'given', 'list', 'a', 'concatenated', 'word', 'defined', 'string', 'comprised', 'entirely', 'least', 'two', 'shorter', 'words', 'given', 'concatenated', 'concatenated', 'concatenated', 'the', 'number', 'elements', 'given', 'array', 'exceed', 'the', 'length', 'sum', 'elements', 'given', 'array', 'exceed', 'all', 'input', 'string', 'include', 'lower', 'case', 'the', 'returned', 'elements', 'order', 'dynamic programming', 'depth-first search', 'trie']",3
468,Validate IP Address,"['write', 'function', 'check', 'whether', 'input', 'string', 'valid', 'address', 'address', 'addresses', 'canonically', 'represented', 'consists', 'four', 'decimal', 'ranging', 'separated', 'dots', 'leading', 'zeros', 'for', 'address', 'addresses', 'represented', 'eight', 'groups', 'four', 'hexadecimal', 'group', 'representing', 'the', 'groups', 'separated', 'colons', 'for', 'address', 'valid', 'could', 'omit', 'leading', 'zeros', 'among', 'four', 'hexadecimal', 'digits', 'characters', 'address', 'also', 'valid', 'leading', 'zeros', 'using', 'upper', 'replace', 'consecutive', 'group', 'zero', 'value', 'single', 'empty', 'group', 'using', 'two', 'consecutive', 'colons', 'pursue', 'for', 'invalid', 'extra', 'leading', 'zeros', 'also', 'for', 'address', 'you', 'may', 'assume', 'extra', 'space', 'special', 'characters', 'input', 'this', 'valid', 'return', 'this', 'valid', 'return', 'this', 'neither', 'address', 'string']",2
467,Unique Substrings in Wraparound String,"['consider', 'string', 'infinite', 'wraparound', 'string', 'look', 'like', 'now', 'another', 'string', 'your', 'job', 'find', 'many', 'unique', 'substrings', 'p', 'present', 'in', 'input', 'string', 'p', 'need', 'output', 'number', 'different', 'substrings', 'p', 'string', 'p', 'consists', 'lowercase', 'english', 'letters', 'size', 'p', 'might', 'only', 'substring', 'string', 'string', 'there', 'two', 'substrings', 'string', 'string', 'there', 'six', 'substrings', 'string', 'string', 'dynamic programming']",2
466,Count The Repetitions,"['define', 's', 'string', 's', 'consists', 'n', 'connected', 'strings', 'for', 'on', 'define', 'string', 'obtained', 'string', 'remove', 'characters', 'becomes', 'for', 'obtained', 'based', 'obtained', 'you', 'given', 'two', 'strings', 'characters', 'two', 'integers', 'now', 'consider', 'strings', 'find', 'maximum', 'integer', 'm', 'obtained', 'dynamic programming']",3
464,Can I Win,"['in', 'two', 'players', 'take', 'turns', 'running', 'integer', 'the', 'player', 'first', 'causes', 'running', 'total', 'reach', 'exceed', 'what', 'change', 'game', 'players', 'cannot', 'for', 'two', 'players', 'might', 'take', 'turns', 'drawing', 'common', 'pool', 'numbers', 'without', 'replacement', 'reach', 'total', 'given', 'integer', 'maxchoosableinteger', 'another', 'integer', 'determine', 'first', 'player', 'move', 'force', 'assuming', 'players', 'play', 'you', 'always', 'assume', 'maxchoosableinteger', 'larger', 'desiredtotal', 'larger', 'maxchoosableinteger', 'desiredtotal', 'no', 'matter', 'integer', 'first', 'player', 'first', 'player', 'the', 'first', 'player', 'choose', 'integer', 'if', 'first', 'player', 'choose', 'second', 'player', 'choose', 'integers', 'the', 'second', 'player', 'win', 'choosing', 'get', 'total', 'same', 'integers', 'chosen', 'first', 'second', 'player', 'always', 'dynamic programming', 'minimax']",2
463,Island Perimeter,"['you', 'given', 'map', 'form', 'integer', 'grid', 'represents', 'land', 'represents', 'grid', 'cells', 'connected', 'the', 'grid', 'completely', 'surrounded', 'exactly', 'one', 'island', 'one', 'connected', 'land', 'the', 'island', 'inside', 'connected', 'water', 'around', 'one', 'cell', 'square', 'side', 'length', 'the', 'grid', 'width', 'height', 'exceed', 'determine', 'perimeter', 'the', 'perimeter', 'yellow', 'stripes', 'image', 'hash table']",1
462,Minimum Moves to Equal Array Elements II,"['given', 'integer', 'find', 'minimum', 'number', 'moves', 'required', 'make', 'array', 'elements', 'move', 'incrementing', 'selected', 'element', 'decrementing', 'selected', 'element', 'you', 'may', 'assume', 'length', 'only', 'two', 'moves', 'needed', 'move', 'increments', 'decrements', 'one', 'math']",2
461,Hamming Distance,"['the', 'hamming', 'distance', 'two', 'integers', 'number', 'positions', 'corresponding', 'bits', 'given', 'two', 'integers', 'x', 'calculate', 'hamming', 'x', 'the', 'arrows', 'point', 'positions', 'corresponding', 'bits', 'bit manipulation']",1
460,LFU Cache,"['design', 'implement', 'data', 'structure', 'least', 'frequently', 'used', 'it', 'support', 'following', 'get', 'get', 'value', 'always', 'key', 'key', 'exists', 'otherwise', 'return', 'set', 'insert', 'value', 'key', 'already', 'when', 'cache', 'reaches', 'invalidate', 'least', 'frequently', 'used', 'item', 'inserting', 'new', 'for', 'purpose', 'tie', 'two', 'keys', 'least', 'recently', 'used', 'key', 'would', 'follow', 'could', 'operations', 'time', 'lfucache', 'cache', 'new', 'capacity', 'returns', 'evicts', 'key', 'returns', 'returns', 'evicts', 'key', 'returns', 'returns', 'returns', 'design']",3
459,Repeated Substring Pattern,"['given', 'string', 'check', 'constructed', 'taking', 'substring', 'appending', 'multiple', 'copies', 'substring', 'you', 'may', 'assume', 'given', 'string', 'consists', 'lowercase', 'english', 'letters', 'length', 'exceed', 'substring', 'substring', 'four', 'substring', 'string']",1
458,Poor Pigs,"['there', 'one', 'one', 'rest', 'filled', 'they', 'look', 'if', 'pig', 'drinks', 'poison', 'die', 'within', 'what', 'minimum', 'amount', 'pigs', 'need', 'figure', 'bucket', 'poisonous', 'within', 'one', 'answer', 'write', 'algorithm', 'general', 'general', 'if', 'n', 'buckets', 'pig', 'drinking', 'poison', 'die', 'within', 'many', 'pigs', 'need', 'figure', 'within', 'p', 'there', 'exactly', 'one', 'bucket', 'a', 'pig', 'allowed', 'drink', 'simultaneously', 'many', 'buckets', 'one', 'would', 'feeding', 'takes', 'after', 'pig', 'instantly', 'finished', 'drinking', 'cool', 'time', 'during', 'observation', 'allowed', 'feedings', 'any', 'given', 'bucket', 'sampled', 'infinite', 'number', 'times', 'unlimited', 'number', 'math']",3
457,Circular Array Loop,"['you', 'given', 'circular', 'array', 'nums', 'positive', 'negative', 'if', 'number', 'k', 'index', 'move', 'forward', 'k', 'negative', 'move', 'backward', 'since', 'array', 'may', 'assume', 'last', 'next', 'element', 'first', 'first', 'previous', 'element', 'last', 'determine', 'loop', 'a', 'cycle', 'must', 'start', 'end', 'index', 'length', 'movements', 'cycle', 'must', 'follow', 'single', 'in', 'cycle', 'must', 'consist', 'forward', 'backward', 'there', 'index', 'the', 'length', 'the', 'movement', 'index', 'length', 'by', 'definition', 'length', 'must', 'greater', 'the', 'movement', 'index', 'movement', 'index', 'forward', 'movement', 'index', 'backward', 'all', 'movements', 'cycle', 'must', 'follow', 'single', 'follow', 'could', 'solve', 'time', 'complexity', 'extra', 'space', 'array', 'two pointers']",2
456,132 Pattern,"['given', 'sequence', 'n', 'integers', 'pattern', 'subsequence', 'ak', 'j', 'k', 'ai', 'ak', 'design', 'algorithm', 'takes', 'list', 'n', 'numbers', 'input', 'checks', 'whether', 'pattern', 'n', 'less', 'there', 'pattern', 'there', 'pattern', 'there', 'three', 'patterns', 'stack']",2
455,Assign Cookies,"['assume', 'awesome', 'parent', 'want', 'give', 'children', 'give', 'child', 'one', 'each', 'child', 'greed', 'factor', 'minimum', 'size', 'cookie', 'child', 'content', 'cookie', 'j', 'size', 'if', 'sj', 'assign', 'cookie', 'j', 'child', 'child', 'your', 'goal', 'maximize', 'number', 'content', 'children', 'output', 'maximum', 'you', 'may', 'assume', 'greed', 'factor', 'always', 'you', 'cannot', 'assign', 'one', 'cookie', 'one', 'you', 'children', 'the', 'greed', 'factors', 'children', 'and', 'even', 'though', 'since', 'size', 'could', 'make', 'child', 'whose', 'greed', 'factor', 'you', 'need', 'output', 'you', 'children', 'the', 'greed', 'factors', 'children', 'you', 'cookies', 'sizes', 'big', 'enough', 'gratify', 'you', 'need', 'output', 'greedy']",1
454,4Sum II,"['given', 'four', 'lists', 'd', 'integer', 'compute', 'many', 'tuples', 'to', 'make', 'problem', 'bit', 'd', 'length', 'n', 'n', 'all', 'integers', 'range', 'result', 'guaranteed', 'a', 'b', 'c', 'd', 'the', 'two', 'tuples', 'hash table', 'binary search']",2
453,Minimum Moves to Equal Array Elements,"['given', 'integer', 'array', 'size', 'find', 'minimum', 'number', 'moves', 'required', 'make', 'array', 'elements', 'move', 'incrementing', 'n', 'elements', 'only', 'three', 'moves', 'needed', 'move', 'increments', 'two', 'math']",1
452,Minimum Number of Arrows to Burst Balloons,"['there', 'number', 'spherical', 'balloons', 'spread', 'for', 'provided', 'input', 'start', 'end', 'coordinates', 'horizontal', 'since', 'matter', 'hence', 'start', 'end', 'diameter', 'start', 'always', 'smaller', 'there', 'an', 'arrow', 'shot', 'exactly', 'vertically', 'different', 'points', 'along', 'a', 'balloon', 'xstart', 'xend', 'bursts', 'arrow', 'shot', 'x', 'xstart', 'x', 'there', 'limit', 'number', 'arrows', 'an', 'arrow', 'shot', 'keeps', 'travelling', 'the', 'problem', 'find', 'minimum', 'number', 'arrows', 'must', 'shot', 'burst', 'one', 'way', 'shoot', 'one', 'arrow', 'example', 'x', 'balloons', 'another', 'arrow', 'x', 'two', 'greedy']",2
451,Sort Characters By Frequency,"['given', 'sort', 'decreasing', 'order', 'based', 'frequency', 'appears', 'twice', 'appear', 'so', 'must', 'appear', 'therefore', 'also', 'valid', 'both', 'appear', 'three', 'also', 'valid', 'note', 'characters', 'must', 'also', 'valid', 'note', 'treated', 'two', 'different', 'hash table', 'heap']",2
450,Delete Node in a BST,"['given', 'root', 'node', 'reference', 'bst', 'delete', 'node', 'given', 'key', 'return', 'root', 'node', 'reference', 'deletion', 'divided', 'two', 'search', 'node', 'if', 'node', 'delete', 'time', 'complexity', 'root', 'key', 'given', 'key', 'delete', 'so', 'find', 'node', 'value', 'delete', 'one', 'valid', 'answer', 'shown', 'following', 'another', 'valid', 'answer', 'tree']",2
449,Serialize and Deserialize BST,"['serialization', 'process', 'converting', 'data', 'structure', 'object', 'sequence', 'bits', 'stored', 'file', 'memory', 'transmitted', 'across', 'network', 'connection', 'link', 'reconstructed', 'later', 'another', 'computer', 'design', 'algorithm', 'serialize', 'deserialize', 'binary', 'search', 'there', 'restriction', 'algorithm', 'you', 'need', 'ensure', 'binary', 'search', 'tree', 'serialized', 'string', 'string', 'deserialized', 'original', 'tree', 'the', 'encoded', 'string', 'compact', 'do', 'use', 'class', 'variables', 'store', 'your', 'serialize', 'deserialize', 'algorithms', 'tree']",2
448,Find All Numbers Disappeared in an Array,"['given', 'array', 'integers', 'n', 'size', 'elements', 'appear', 'twice', 'others', 'appear', 'find', 'elements', 'inclusive', 'appear', 'could', 'without', 'extra', 'space', 'you', 'may', 'assume', 'returned', 'list', 'count', 'extra', 'array']",1
447,Number of Boomerangs,"['given', 'n', 'points', 'plane', 'pairwise', 'tuple', 'points', 'distance', 'j', 'equals', 'distance', 'k', 'order', 'tuple', 'find', 'number', 'you', 'may', 'assume', 'n', 'coordinates', 'points', 'range', 'the', 'two', 'boomerangs', 'hash table']",1
446,Arithmetic Slices II - Subsequence,"['a', 'sequence', 'numbers', 'called', 'arithmetic', 'consists', 'least', 'three', 'elements', 'difference', 'two', 'consecutive', 'elements', 'for', 'arithmetic', 'the', 'following', 'sequence', 'a', 'array', 'a', 'consisting', 'n', 'numbers', 'a', 'subsequence', 'slice', 'array', 'sequence', 'integers', 'pk', 'a', 'subsequence', 'slice', 'array', 'a', 'called', 'arithmetic', 'sequence', 'in', 'means', 'k', 'the', 'function', 'return', 'number', 'arithmetic', 'subsequence', 'slices', 'array', 'the', 'input', 'contains', 'n', 'every', 'integer', 'range', 'n', 'the', 'output', 'guaranteed', 'less', 'all', 'arithmetic', 'subsequence', 'slices', 'dynamic programming']",3
445,Add Two Numbers II,"['you', 'given', 'two', 'linked', 'lists', 'representing', 'two', 'the', 'significant', 'digit', 'comes', 'first', 'nodes', 'contain', 'single', 'add', 'two', 'numbers', 'return', 'linked', 'you', 'may', 'assume', 'two', 'numbers', 'contain', 'leading', 'except', 'number', 'follow', 'what', 'cannot', 'modify', 'input', 'in', 'reversing', 'lists', 'linked list']",2
443,String Compression,"['given', 'array', 'compress', 'the', 'length', 'compression', 'must', 'always', 'smaller', 'equal', 'original', 'every', 'element', 'array', 'character', 'length', 'after', 'done', 'modifying', 'input', 'array', 'return', 'new', 'length', 'follow', 'could', 'solve', 'using', 'extra', 'return', 'first', 'characters', 'input', 'array', 'replaced', 'replaced', 'replaced', 'return', 'first', 'characters', 'input', 'array', 'nothing', 'return', 'first', 'characters', 'input', 'array', 'since', 'character', 'replaced', 'notice', 'digit', 'entry', 'all', 'characters', 'ascii', 'value', 'string']",1
442,Find All Duplicates in an Array,"['given', 'array', 'n', 'size', 'elements', 'appear', 'twice', 'others', 'appear', 'find', 'elements', 'appear', 'twice', 'could', 'without', 'extra', 'space', 'array']",2
441,Arranging Coins,"['you', 'total', 'n', 'coins', 'want', 'form', 'staircase', 'every', 'row', 'must', 'exactly', 'k', 'given', 'find', 'total', 'number', 'full', 'staircase', 'rows', 'n', 'integer', 'fits', 'within', 'range', 'signed', 'n', 'the', 'coins', 'form', 'following', 'because', 'row', 'return', 'n', 'the', 'coins', 'form', 'following', 'because', 'row', 'return', 'math', 'binary search']",1
440,K-th Smallest in Lexicographical Order,"['given', 'integers', 'n', 'find', 'lexicographically', 'smallest', 'integer', 'range', 'k', 'n', 'the', 'lexicographical', 'order', 'second', 'smallest', 'number']",3
438,Find All Anagrams in a String,"['given', 'string', 'string', 'find', 'start', 'indices', 'anagrams', 'strings', 'consists', 'lowercase', 'english', 'letters', 'length', 'strings', 'p', 'larger', 'the', 'order', 'output', 'the', 'substring', 'start', 'index', 'anagram', 'the', 'substring', 'start', 'index', 'anagram', 'the', 'substring', 'start', 'index', 'anagram', 'the', 'substring', 'start', 'index', 'anagram', 'the', 'substring', 'start', 'index', 'anagram', 'hash table']",1
437,Path Sum III,"['you', 'given', 'binary', 'tree', 'node', 'contains', 'integer', 'find', 'number', 'paths', 'sum', 'given', 'the', 'path', 'need', 'start', 'end', 'root', 'must', 'go', 'parent', 'nodes', 'child', 'the', 'tree', 'nodes', 'values', 'range', 'root', 'sum', 'return', 'the', 'paths', 'sum', 'tree']",1
436,Find Right Interval,"['given', 'set', 'interval', 'check', 'exists', 'interval', 'j', 'whose', 'start', 'point', 'bigger', 'equal', 'end', 'point', 'interval', 'called', 'j', 'for', 'interval', 'need', 'store', 'minimum', 'interval', 'means', 'interval', 'j', 'minimum', 'start', 'point', 'build', 'relationship', 'interval', 'if', 'interval', 'j', 'store', 'interval', 'need', 'output', 'stored', 'value', 'interval', 'you', 'may', 'assume', 'end', 'point', 'always', 'bigger', 'start', 'you', 'may', 'assume', 'none', 'intervals', 'start', 'there', 'one', 'interval', 'outputs', 'there', 'satisfied', 'interval', 'for', 'interval', 'start', 'for', 'interval', 'start', 'there', 'satisfied', 'interval', 'for', 'interval', 'start', 'types', 'changed', 'april', 'please', 'reset', 'default', 'code', 'definition', 'get', 'new', 'method', 'binary search']",2
435,Non-overlapping Intervals,"['given', 'collection', 'find', 'minimum', 'number', 'intervals', 'need', 'remove', 'make', 'rest', 'intervals', 'you', 'may', 'assume', 'end', 'point', 'always', 'bigger', 'start', 'intervals', 'like', 'borders', 'overlap', 'removed', 'rest', 'intervals', 'you', 'need', 'remove', 'two', 'make', 'rest', 'intervals', 'you', 'need', 'remove', 'intervals', 'since', 'already', 'types', 'changed', 'april', 'please', 'reset', 'default', 'code', 'definition', 'get', 'new', 'method', 'greedy']",2
434,Number of Segments in a String,"['count', 'number', 'segments', 'segment', 'defined', 'contiguous', 'sequence', 'please', 'note', 'string', 'contain', 'name', 'string']",1
433,Minimum Genetic Mutation,"['a', 'gene', 'string', 'represented', 'long', 'choices', 'suppose', 'need', 'investigate', 'mutation', 'one', 'mutation', 'defined', 'one', 'single', 'character', 'changed', 'gene', 'for', 'given', 'gene', 'records', 'valid', 'gene', 'a', 'gene', 'must', 'bank', 'make', 'valid', 'gene', 'given', 'things', 'task', 'determine', 'minimum', 'number', 'mutations', 'needed', 'mutate', 'if', 'return', 'starting', 'point', 'assumed', 'might', 'included', 'if', 'multiple', 'mutations', 'mutations', 'sequence', 'must', 'you', 'may', 'assume', 'start', 'end', 'string']",2
432,All O`one Data Structure,"['implement', 'data', 'structure', 'supporting', 'following', 'inserts', 'new', 'key', 'value', 'or', 'increments', 'existing', 'key', 'key', 'guaranteed', 'if', 'value', 'remove', 'data', 'otherwise', 'decrements', 'existing', 'key', 'if', 'key', 'function', 'key', 'guaranteed', 'returns', 'one', 'keys', 'maximal', 'if', 'element', 'return', 'empty', 'string', 'returns', 'one', 'keys', 'minimal', 'if', 'element', 'return', 'empty', 'string', 'perform', 'time', 'design']",3
424,Longest Repeating Character Replacement,"['given', 'string', 'consists', 'uppercase', 'english', 'replace', 'letter', 'string', 'another', 'letter', 'k', 'find', 'length', 'longest', 'substring', 'containing', 'repeating', 'letters', 'get', 'performing', 'both', 'length', 'k', 'exceed', 'k', 'replace', 'two', 'two', 'vice', 'k', 'replace', 'one', 'middle', 'form', 'the', 'substring', 'longest', 'repeating', 'two pointers', 'sliding window']",2
423,Reconstruct Original Digits from English,"['given', 'string', 'containing', 'english', 'representation', 'digits', 'output', 'digits', 'ascending', 'input', 'contains', 'lowercase', 'english', 'input', 'guaranteed', 'valid', 'transformed', 'original', 'that', 'means', 'invalid', 'inputs', 'input', 'length', 'less', 'math']",2
421,Maximum XOR of Two Numbers in an Array,"['given', 'array', 'ai', 'find', 'maximum', 'result', 'ai', 'xor', 'j', 'could', 'the', 'maximum', 'result', 'bit manipulation', 'trie']",2
420,Strong Password Checker,"['a', 'password', 'considered', 'strong', 'conditions', 'it', 'least', 'characters', 'it', 'must', 'contain', 'least', 'one', 'lowercase', 'least', 'one', 'uppercase', 'least', 'one', 'it', 'must', 'not', 'contain', 'three', 'repeating', 'characters', 'row', 'assuming', 'conditions', 'write', 'function', 'takes', 'string', 'return', 'minimum', 'change', 'required', 'make', 'strong', 'if', 'already', 'return', 'deletion', 'replace', 'one', 'character', 'considered', 'one']",3
419,Battleships in a Board,"['given', 'count', 'many', 'battleships', 'the', 'battleships', 'represented', 'empty', 'slots', 'represented', 'you', 'may', 'assume', 'following', 'you', 'receive', 'valid', 'made', 'battleships', 'empty', 'battleships', 'placed', 'horizontally', 'in', 'made', 'shape', 'n', 'n', 'at', 'least', 'one', 'horizontal', 'vertical', 'cell', 'separates', 'two', 'battleships', 'adjacent', 'in', 'board', 'invalid', 'this', 'invalid', 'board', 'receive', 'battleships', 'always', 'cell', 'separating', 'follow', 'using', 'extra', 'memory', 'without', 'modifying', 'value']",2
417,Pacific Atlantic Water Flow,"['given', 'x', 'n', 'matrix', 'integers', 'representing', 'height', 'unit', 'cell', 'touches', 'left', 'top', 'edges', 'matrix', 'touches', 'right', 'bottom', 'water', 'flow', 'four', 'directions', 'cell', 'another', 'one', 'height', 'equal', 'find', 'list', 'grid', 'coordinates', 'water', 'flow', 'pacific', 'atlantic', 'the', 'order', 'returned', 'grid', 'coordinates', 'both', 'n', 'less', 'given', 'following', 'pacific', 'parentheses', 'depth-first search', 'breadth-first search']",2
416,Partition Equal Subset Sum,"['given', 'array', 'containing', 'positive', 'find', 'array', 'partitioned', 'two', 'subsets', 'sum', 'elements', 'subsets', 'each', 'array', 'element', 'exceed', 'the', 'array', 'size', 'exceed', 'the', 'array', 'partitioned', 'the', 'array', 'cannot', 'partitioned', 'equal', 'sum', 'dynamic programming']",2
415,Add Strings,"['given', 'two', 'integers', 'represented', 'return', 'sum', 'the', 'length', 'both', 'contains', 'digits', 'both', 'contain', 'leading', 'you', 'must', 'use', 'biginteger', 'library', 'convert', 'inputs', 'integer', 'string']",1
414,Third Maximum Number,"['given', 'array', 'return', 'third', 'maximum', 'number', 'if', 'return', 'maximum', 'the', 'time', 'complexity', 'must', 'the', 'third', 'maximum', 'the', 'third', 'maximum', 'maximum', 'returned', 'note', 'third', 'maximum', 'means', 'third', 'maximum', 'distinct', 'both', 'numbers', 'value', 'considered', 'second', 'array']",1
413,Arithmetic Slices,"['a', 'sequence', 'number', 'called', 'arithmetic', 'consists', 'least', 'three', 'elements', 'difference', 'two', 'consecutive', 'elements', 'for', 'arithmetic', 'the', 'following', 'sequence', 'a', 'array', 'a', 'consisting', 'n', 'numbers', 'a', 'slice', 'array', 'pair', 'integers', 'p', 'q', 'a', 'slice', 'array', 'a', 'called', 'arithmetic', 'in', 'means', 'p', 'the', 'function', 'return', 'number', 'arithmetic', 'slices', 'array', 'a', 'arithmetic', 'slices', 'math', 'dynamic programming']",2
412,Fizz Buzz,"['write', 'program', 'outputs', 'string', 'representation', 'numbers', 'but', 'multiples', 'three', 'output', 'instead', 'number', 'multiples', 'five', 'output', 'for', 'numbers', 'multiples', 'three', 'five', 'output', 'n']",1
410,Split Array Largest Sum,"['given', 'array', 'consists', 'integers', 'integer', 'split', 'array', 'continuous', 'write', 'algorithm', 'minimize', 'largest', 'sum', 'among', 'if', 'n', 'length', 'assume', 'following', 'constraints', 'n', 'nums', 'there', 'four', 'ways', 'split', 'nums', 'two', 'the', 'best', 'way', 'split', 'largest', 'sum', 'among', 'two', 'subarrays', 'binary search', 'dynamic programming']",3
409,Longest Palindrome,"['given', 'string', 'consists', 'lowercase', 'uppercase', 'find', 'length', 'longest', 'palindromes', 'built', 'this', 'case', 'example', 'considered', 'palindrome', 'assume', 'length', 'given', 'string', 'exceed', 'one', 'longest', 'palindrome', 'built', 'whose', 'length', 'hash table']",1
407,Trapping Rain Water II,"['given', 'x', 'n', 'matrix', 'positive', 'integers', 'representing', 'height', 'unit', 'cell', 'elevation', 'compute', 'volume', 'water', 'able', 'trap', 'both', 'n', 'less', 'the', 'height', 'unit', 'cell', 'greater', 'less', 'given', 'following', 'height', 'return', 'the', 'image', 'represents', 'elevation', 'map', 'after', 'water', 'trapped', 'the', 'total', 'volume', 'water', 'trapped', 'heap', 'breadth-first search']",3
406,Queue Reconstruction by Height,"['suppose', 'random', 'list', 'people', 'standing', 'each', 'person', 'described', 'pair', 'integers', 'h', 'height', 'person', 'k', 'number', 'people', 'front', 'person', 'height', 'greater', 'equal', 'write', 'algorithm', 'reconstruct', 'the', 'number', 'people', 'less', 'greedy']",2
405,Convert a Number to Hexadecimal,"['given', 'write', 'algorithm', 'convert', 'for', 'negative', 'complement', 'method', 'all', 'letters', 'hexadecimal', 'must', 'the', 'hexadecimal', 'string', 'must', 'contain', 'extra', 'leading', 'if', 'number', 'represented', 'single', 'zero', 'character', 'first', 'character', 'hexadecimal', 'string', 'zero', 'the', 'given', 'number', 'guaranteed', 'fit', 'within', 'range', 'signed', 'you', 'must', 'use', 'method', 'provided', 'library', 'number', 'hex', 'bit manipulation']",1
404,Sum of Left Leaves,"['find', 'sum', 'left', 'leaves', 'given', 'binary', 'there', 'two', 'left', 'leaves', 'binary', 'values', 'return', 'tree']",1
403,Frog Jump,"['a', 'frog', 'crossing', 'the', 'river', 'divided', 'x', 'units', 'unit', 'may', 'may', 'exist', 'the', 'frog', 'jump', 'must', 'jump', 'given', 'list', 'positions', 'sorted', 'ascending', 'determine', 'frog', 'able', 'cross', 'river', 'landing', 'last', 'frog', 'first', 'stone', 'assume', 'first', 'jump', 'must', 'if', 'last', 'jump', 'k', 'next', 'jump', 'must', 'either', 'k', 'k', 'note', 'frog', 'jump', 'forward', 'the', 'number', 'stones', 'each', 'position', 'integer', 'the', 'first', 'position', 'always', 'there', 'total', 'the', 'first', 'stone', 'second', 'stone', 'third', 'stone', 'the', 'last', 'stone', 'return', 'the', 'frog', 'jump', 'last', 'stone', 'jumping', 'unit', 'units', 'units', 'units', 'units', 'units', 'return', 'there', 'way', 'jump', 'last', 'stone', 'gap', 'stone', 'dynamic programming']",3
402,Remove K Digits,"['given', 'integer', 'num', 'represented', 'remove', 'k', 'digits', 'number', 'new', 'number', 'smallest', 'the', 'length', 'num', 'less', 'the', 'given', 'num', 'contain', 'leading', 'num', 'k', 'remove', 'three', 'digits', 'form', 'new', 'number', 'num', 'k', 'remove', 'leading', 'number', 'note', 'output', 'must', 'contain', 'leading', 'num', 'k', 'remove', 'digits', 'number', 'left', 'nothing', 'stack', 'greedy']",2
401,Binary Watch,"['a', 'binary', 'watch', 'leds', 'top', 'represent', 'hours', 'leds', 'bottom', 'represent', 'minutes', 'each', 'led', 'represents', 'zero', 'least', 'significant', 'bit', 'for', 'binary', 'watch', 'reads', 'given', 'integer', 'n', 'represents', 'number', 'leds', 'currently', 'return', 'possible', 'times', 'watch', 'could', 'n', 'the', 'order', 'output', 'the', 'hour', 'must', 'contain', 'leading', 'example', 'the', 'minute', 'must', 'consist', 'two', 'digits', 'may', 'contain', 'leading', 'example', 'backtracking', 'bit manipulation']",1
400,Nth Digit,"['find', 'nth', 'digit', 'infinite', 'integer', 'sequence', 'n', 'positive', 'fit', 'within', 'range', 'signed', 'integer', 'the', 'digit', 'sequence', 'part', 'number', 'math']",1
399,Evaluate Division,"['equations', 'given', 'format', 'a', 'b', 'a', 'b', 'variables', 'represented', 'k', 'real', 'number', 'point', 'given', 'return', 'if', 'answer', 'return', 'given', 'b', 'b', 'c', 'queries', 'c', 'b', 'e', 'x', 'x', 'return', 'the', 'input', 'queries', 'values', 'this', 'represents', 'return', 'according', 'example', 'equations', 'values', 'queries', 'the', 'input', 'always', 'you', 'may', 'assume', 'evaluating', 'queries', 'result', 'division', 'zero', 'union find', 'graph']",2
398,Random Pick Index,"['given', 'array', 'integers', 'possible', 'randomly', 'output', 'index', 'given', 'target', 'you', 'assume', 'given', 'target', 'number', 'must', 'exist', 'the', 'array', 'size', 'solution', 'uses', 'much', 'extra', 'space', 'pass', 'nums', 'new', 'solution', 'solution', 'new', 'return', 'either', 'index', 'each', 'index', 'equal', 'probability', 'return', 'since', 'array', 'equal', 'reservoir sampling']",2
397,Integer Replacement,"['given', 'positive', 'integer', 'n', 'operations', 'if', 'n', 'replace', 'n', 'if', 'n', 'replace', 'n', 'either', 'n', 'n', 'what', 'minimum', 'number', 'replacements', 'needed', 'n', 'become', 'math', 'bit manipulation']",2
396,Rotate Function,"['given', 'array', 'integers', 'a', 'let', 'n', 'assume', 'bk', 'array', 'obtained', 'rotating', 'array', 'a', 'k', 'positions', 'define', 'f', 'a', 'calculate', 'maximum', 'value', 'n', 'guaranteed', 'less', 'a', 'so', 'maximum', 'value', 'math']",2
395,Longest Substring with At Least K Repeating Characters,"['find', 'length', 'longest', 'substring', 't', 'given', 'string', 'lowercase', 'letters', 'every', 'character', 't', 'appears', 'less', 'k', 'k', 'the', 'longest', 'substring', 'repeated', 'k', 'the', 'longest', 'substring', 'repeated', 'times', 'repeated']",2
394,Decode String,"['given', 'encoded', 'return', 'decoded', 'the', 'encoding', 'rule', 'inside', 'square', 'brackets', 'repeated', 'exactly', 'k', 'note', 'k', 'guaranteed', 'positive', 'you', 'may', 'assume', 'input', 'string', 'always', 'no', 'extra', 'white', 'square', 'brackets', 'may', 'assume', 'original', 'data', 'contain', 'digits', 'digits', 'repeat', 'for', 'input', 'like', 'return', 'return', 'return', 'stack', 'depth-first search']",2
393,UTF-8 Validation,"['a', 'character', 'bytes', 'subjected', 'following', 'for', 'first', 'bit', 'followed', 'unicode', 'for', 'first', 'bit', 'followed', 'bytes', 'significant', 'bits', 'this', 'encoding', 'would', 'number', 'range', 'octet', 'ffff', 'ffff', 'given', 'array', 'integers', 'representing', 'return', 'whether', 'valid', 'the', 'input', 'array', 'only', 'least', 'significant', 'bits', 'integer', 'used', 'store', 'this', 'means', 'integer', 'represents', 'byte', 'data', 'represents', 'octet', 'return', 'it', 'valid', 'encoding', 'character', 'followed', 'data', 'represented', 'octet', 'return', 'the', 'first', 'bits', 'bit', 'means', 'the', 'next', 'byte', 'continuation', 'byte', 'starts', 'but', 'second', 'continuation', 'byte', 'start', 'bit manipulation']",2
392,Is Subsequence,"['given', 'string', 'string', 'check', 'subsequence', 'you', 'may', 'assume', 'lower', 'case', 'english', 'letters', 'potentially', 'long', 'short', 'string', 'a', 'subsequence', 'string', 'new', 'string', 'formed', 'original', 'string', 'deleting', 'characters', 'without', 'disturbing', 'relative', 'positions', 'remaining', 'subsequence', 'return', 'return', 'follow', 'if', 'lots', 'incoming', 'say', 'sk', 'k', 'want', 'check', 'one', 'one', 'see', 't', 'in', 'would', 'change', 'thanks', 'adding', 'problem', 'creating', 'test', 'binary search', 'dynamic programming', 'greedy']",2
391,Perfect Rectangle,"['given', 'n', 'rectangles', 'n', 'determine', 'together', 'form', 'exact', 'cover', 'rectangular', 'each', 'rectangle', 'represented', 'point', 'for', 'unit', 'square', 'represented', 'point', 'point', 'rectangles', 'return', 'all', 'rectangles', 'together', 'form', 'exact', 'cover', 'rectangular', 'rectangles', 'return', 'because', 'gap', 'two', 'rectangular', 'rectangles', 'return', 'because', 'gap', 'top', 'rectangles', 'return', 'because', 'two', 'rectangles', 'overlap', 'line sweep']",3
390,Elimination Game,"['there', 'list', 'sorted', 'integers', 'starting', 'left', 'remove', 'first', 'number', 'every', 'number', 'afterward', 'reach', 'end', 'repeat', 'previous', 'step', 'time', 'right', 'remove', 'right', 'number', 'every', 'number', 'remaining', 'we', 'keep', 'repeating', 'steps', 'alternating', 'left', 'right', 'right', 'single', 'number', 'find', 'last', 'number', 'remains', 'starting', 'list', 'length', 'n']",2
389,Find the Difference,"['given', 'two', 'strings', 'consist', 'lowercase', 'string', 'generated', 'random', 'shuffling', 'string', 'add', 'one', 'letter', 'random', 'find', 'letter', 'added', 'letter', 'hash table', 'bit manipulation']",1
388,Longest Absolute File Path,"['suppose', 'abstract', 'file', 'system', 'string', 'following', 'the', 'string', 'the', 'directory', 'dir', 'contains', 'empty', 'containing', 'file', 'the', 'string', 'the', 'directory', 'dir', 'contains', 'two', 'contains', 'file', 'empty', 'contains', 'containing', 'file', 'we', 'interested', 'finding', 'longest', 'absolute', 'path', 'file', 'within', 'file', 'for', 'second', 'example', 'longest', 'absolute', 'path', 'length', 'including', 'double', 'given', 'string', 'representing', 'file', 'system', 'return', 'length', 'longest', 'absolute', 'path', 'file', 'abstracted', 'file', 'if', 'file', 'return', 'the', 'name', 'file', 'contains', 'least', 'the', 'name', 'directory', 'contain', 'time', 'complexity', 'n', 'size', 'input', 'notice', 'longest', 'file', 'another', 'path']",2
387,First Unique Character in a String,"['given', 'find', 'first', 'character', 'return', 'if', 'return', 'return', 'return', 'you', 'may', 'assume', 'string', 'contain', 'lowercase', 'hash table', 'string']",1
386,Lexicographical Numbers,"['given', 'integer', 'return', 'n', 'lexicographical', 'for', 'given', 'please', 'optimize', 'algorithm', 'use', 'less', 'time', 'the', 'input', 'size', 'may', 'large']",2
385,Mini Parser,"['given', 'nested', 'list', 'integers', 'represented', 'implement', 'parser', 'deserialize', 'each', 'element', 'either', 'list', 'whose', 'elements', 'may', 'also', 'integers', 'you', 'may', 'assume', 'string', 'string', 'string', 'contain', 'white', 'string', 'contains', 'digits', 'given', 'you', 'return', 'nestedinteger', 'object', 'contains', 'single', 'integer', 'given', 'return', 'nestedinteger', 'object', 'containing', 'nested', 'list', 'an', 'integer', 'containing', 'value', 'a', 'nested', 'list', 'containing', 'two', 'an', 'integer', 'containing', 'value', 'a', 'nested', 'list', 'one', 'an', 'integer', 'containing', 'value', 'string', 'stack']",2
384,Shuffle an Array,"['shuffle', 'set', 'numbers', 'without', 'init', 'array', 'set', 'nums', 'solution', 'solution', 'new', 'shuffle', 'array', 'return', 'any', 'permutation', 'must', 'equally', 'likely', 'resets', 'array', 'back', 'original', 'configuration', 'returns', 'random', 'shuffling', 'array']",2
383,Ransom Note,"['given', 'arbitrary', 'ransom', 'note', 'string', 'another', 'string', 'containing', 'letters', 'write', 'function', 'return', 'true', 'ransom', 'note', 'constructed', 'magazines', 'return', 'each', 'letter', 'magazine', 'string', 'used', 'ransom', 'you', 'may', 'assume', 'strings', 'contain', 'lowercase', 'string']",1
382,Linked List Random Node,"['given', 'singly', 'linked', 'return', 'random', 'value', 'linked', 'each', 'node', 'must', 'probability', 'follow', 'what', 'linked', 'list', 'extremely', 'large', 'length', 'unknown', 'could', 'solve', 'efficiently', 'without', 'using', 'extra', 'init', 'singly', 'linked', 'list', 'listnode', 'head', 'new', 'new', 'new', 'solution', 'solution', 'new', 'return', 'either', 'each', 'element', 'equal', 'probability', 'reservoir sampling']",2
381,Insert Delete GetRandom O(1) - Duplicates allowed,"['design', 'data', 'structure', 'supports', 'following', 'operations', 'average', 'duplicate', 'elements', 'inserts', 'item', 'val', 'removes', 'item', 'val', 'collection', 'returns', 'random', 'element', 'current', 'collection', 'the', 'probability', 'element', 'returned', 'linearly', 'related', 'number', 'value', 'collection', 'init', 'empty', 'randomizedcollection', 'collection', 'new', 'inserts', 'returns', 'true', 'collection', 'contain', 'inserts', 'another', 'returns', 'false', 'collection', 'contained', 'collection', 'contains', 'inserts', 'returns', 'collection', 'contains', 'getrandom', 'return', 'probability', 'returns', 'probability', 'removes', 'returns', 'collection', 'contains', 'getrandom', 'return', 'equally', 'array', 'hash table', 'design']",3
380,Insert Delete GetRandom O(1),"['design', 'data', 'structure', 'supports', 'following', 'operations', 'average', 'inserts', 'item', 'val', 'set', 'already', 'removes', 'item', 'val', 'set', 'returns', 'random', 'element', 'current', 'set', 'each', 'element', 'must', 'probability', 'init', 'empty', 'randomizedset', 'randomset', 'new', 'inserts', 'returns', 'true', 'inserted', 'returns', 'false', 'exist', 'inserts', 'returns', 'set', 'contains', 'getrandom', 'return', 'either', 'removes', 'returns', 'set', 'contains', 'already', 'return', 'since', 'number', 'getrandom', 'always', 'return', 'array', 'hash table', 'design']",2
378,Kth Smallest Element in a Sorted Matrix,"['given', 'n', 'x', 'n', 'matrix', 'rows', 'columns', 'sorted', 'ascending', 'find', 'kth', 'smallest', 'element', 'note', 'kth', 'smallest', 'element', 'sorted', 'kth', 'distinct', 'matrix', 'k', 'return', 'you', 'may', 'assume', 'k', 'always', 'k', 'binary search', 'heap']",2
377,Combination Sum IV,"['given', 'integer', 'array', 'positive', 'numbers', 'find', 'number', 'possible', 'combinations', 'add', 'positive', 'integer', 'nums', 'target', 'the', 'possible', 'combination', 'ways', 'note', 'different', 'sequences', 'counted', 'different', 'therefore', 'output', 'follow', 'what', 'negative', 'numbers', 'allowed', 'given', 'how', 'change', 'what', 'limitation', 'need', 'add', 'question', 'allow', 'negative', 'special', 'thanks', 'adding', 'problem', 'creating', 'test', 'dynamic programming']",2
376,Wiggle Subsequence,"['a', 'sequence', 'numbers', 'called', 'wiggle', 'sequence', 'differences', 'successive', 'numbers', 'strictly', 'alternate', 'positive', 'the', 'first', 'difference', 'one', 'may', 'either', 'positive', 'a', 'sequence', 'fewer', 'two', 'elements', 'trivially', 'wiggle', 'for', 'wiggle', 'sequence', 'differences', 'alternately', 'positive', 'in', 'wiggle', 'first', 'first', 'two', 'differences', 'positive', 'second', 'last', 'difference', 'given', 'sequence', 'return', 'length', 'longest', 'subsequence', 'wiggle', 'a', 'subsequence', 'obtained', 'deleting', 'number', 'elements', 'also', 'original', 'leaving', 'remaining', 'elements', 'original', 'the', 'entire', 'sequence', 'wiggle', 'there', 'several', 'subsequences', 'achieve', 'one', 'follow', 'can', 'dynamic programming', 'greedy']",2
375,Guess Number Higher or Lower II,"['we', 'playing', 'guess', 'the', 'game', 'i', 'pick', 'number', 'you', 'guess', 'number', 'i', 'every', 'time', 'guess', 'tell', 'whether', 'number', 'i', 'picked', 'higher', 'guess', 'particular', 'number', 'guess', 'pay', 'you', 'win', 'game', 'guess', 'number', 'i', 'n', 'i', 'pick', 'first', 'you', 'guess', 'i', 'tell', 'you', 'pay', 'second', 'you', 'guess', 'i', 'tell', 'you', 'pay', 'third', 'you', 'guess', 'i', 'tell', 'you', 'pay', 'game', 'number', 'i', 'you', 'end', 'paying', 'given', 'particular', 'n', 'find', 'much', 'money', 'need', 'guarantee', 'dynamic programming', 'minimax']",2
374,Guess Number Higher or Lower,"['we', 'playing', 'guess', 'the', 'game', 'i', 'pick', 'number', 'you', 'guess', 'number', 'i', 'every', 'time', 'guess', 'tell', 'whether', 'number', 'higher', 'you', 'call', 'api', 'returns', 'possible', 'results', 'my', 'number', 'my', 'number', 'you', 'got', 'n', 'pick', 'binary search']",1
373,Find K Pairs with Smallest Sums,"['you', 'given', 'two', 'integer', 'arrays', 'sorted', 'ascending', 'order', 'integer', 'define', 'pair', 'consists', 'one', 'element', 'first', 'array', 'one', 'element', 'second', 'find', 'k', 'pairs', 'smallest', 'k', 'the', 'first', 'pairs', 'returned', 'k', 'the', 'first', 'pairs', 'returned', 'k', 'all', 'possible', 'pairs', 'returned', 'heap']",2
372,Super Pow,"['your', 'task', 'calculate', 'ab', 'mod', 'positive', 'integer', 'b', 'extremely', 'large', 'positive', 'integer', 'given', 'form', 'b', 'b', 'math']",2
371,Sum of Two Integers,"['calculate', 'sum', 'two', 'integers', 'allowed', 'use', 'operator', 'b', 'b', 'bit manipulation']",1
368,Largest Divisible Subset,"['given', 'set', 'distinct', 'positive', 'find', 'largest', 'subset', 'every', 'pair', 'elements', 'subset', 'si', 'sj', 'sj', 'si', 'if', 'multiple', 'return', 'subset', 'also', 'math', 'dynamic programming']",2
367,Valid Perfect Square,"['given', 'positive', 'integer', 'write', 'function', 'returns', 'true', 'num', 'perfect', 'square', 'else', 'do', 'use', 'library', 'function', 'math', 'binary search']",1
365,Water and Jug Problem,"['you', 'given', 'two', 'jugs', 'capacities', 'x', 'there', 'infinite', 'amount', 'water', 'supply', 'you', 'need', 'determine', 'whether', 'possible', 'measure', 'exactly', 'z', 'litres', 'using', 'two', 'if', 'z', 'liters', 'water', 'must', 'z', 'liters', 'water', 'contained', 'within', 'one', 'buckets', 'operations', 'fill', 'jugs', 'completely', 'empty', 'pour', 'water', 'one', 'jug', 'another', 'till', 'jug', 'completely', 'full', 'first', 'jug', 'famous', 'x', 'z', 'x', 'z', 'math']",2
363,Max Sum of Rectangle No Larger Than K,"['given', 'matrix', 'matrix', 'integer', 'find', 'max', 'sum', 'rectangle', 'matrix', 'sum', 'larger', 'matrix', 'k', 'sum', 'rectangle', 'max', 'number', 'larger', 'k', 'the', 'rectangle', 'inside', 'matrix', 'must', 'area', 'what', 'number', 'rows', 'much', 'larger', 'number', 'binary search', 'dynamic programming', 'queue']",3
357,Count Numbers with Unique Digits,"['given', 'integer', 'count', 'numbers', 'unique', 'x', 'the', 'answer', 'total', 'numbers', 'range', 'x', 'excluding', 'math', 'dynamic programming', 'backtracking']",2
355,Design Twitter,"['design', 'simplified', 'version', 'twitter', 'users', 'post', 'another', 'user', 'able', 'see', 'recent', 'tweets', 'news', 'your', 'design', 'support', 'following', 'compose', 'new', 'retrieve', 'recent', 'tweet', 'ids', 'news', 'each', 'item', 'news', 'feed', 'must', 'posted', 'users', 'user', 'followed', 'user', 'tweets', 'must', 'ordered', 'recent', 'least', 'follower', 'follows', 'follower', 'unfollows', 'twitter', 'twitter', 'new', 'user', 'posts', 'new', 'tweet', 'user', 'news', 'feed', 'return', 'list', 'tweet', 'id', 'user', 'follows', 'user', 'user', 'posts', 'new', 'tweet', 'user', 'news', 'feed', 'return', 'list', 'tweet', 'ids', 'tweet', 'id', 'precede', 'tweet', 'id', 'posted', 'tweet', 'id', 'user', 'unfollows', 'user', 'user', 'news', 'feed', 'return', 'list', 'tweet', 'id', 'since', 'user', 'longer', 'following', 'user', 'hash table', 'heap', 'design']",2
354,Russian Doll Envelopes,"['you', 'number', 'envelopes', 'widths', 'heights', 'given', 'pair', 'integers', 'one', 'envelope', 'fit', 'another', 'width', 'height', 'one', 'envelope', 'greater', 'width', 'height', 'what', 'maximum', 'number', 'envelopes', 'russian', 'one', 'inside', 'rotation', 'the', 'maximum', 'number', 'envelopes', 'russian', 'doll', 'binary search', 'dynamic programming']",3
352,Data Stream as Disjoint Intervals,"['given', 'data', 'stream', 'input', 'integers', 'summarize', 'numbers', 'seen', 'far', 'list', 'disjoint', 'for', 'suppose', 'integers', 'data', 'stream', 'summary', 'follow', 'what', 'lots', 'merges', 'number', 'disjoint', 'intervals', 'small', 'compared', 'data', 'types', 'changed', 'april', 'please', 'reset', 'default', 'code', 'definition', 'get', 'new', 'method', 'binary search', 'ordered map']",3
350,Intersection of Two Arrays II,"['given', 'two', 'write', 'function', 'compute', 'each', 'element', 'result', 'appear', 'many', 'times', 'shows', 'the', 'result', 'follow', 'what', 'given', 'array', 'already', 'how', 'would', 'optimize', 'what', 'size', 'small', 'compared', 'which', 'algorithm', 'what', 'elements', 'stored', 'memory', 'limited', 'cannot', 'load', 'elements', 'memory', 'hash table', 'two pointers', 'binary search', 'sort']",1
349,Intersection of Two Arrays,"['given', 'two', 'write', 'function', 'compute', 'each', 'element', 'result', 'must', 'the', 'result', 'hash table', 'two pointers', 'binary search', 'sort']",1
347,Top K Frequent Elements,"['given', 'array', 'return', 'k', 'frequent', 'nums', 'k', 'nums', 'k', 'you', 'may', 'assume', 'k', 'always', 'k', 'number', 'unique', 'your', 'time', 'complexity', 'must', 'better', 'log', 'n', 'hash table', 'heap']",2
345,Reverse Vowels of a String,"['write', 'function', 'takes', 'string', 'input', 'reverse', 'vowels', 'the', 'vowels', 'include', 'letter', 'two pointers', 'string']",1
344,Reverse String,"['write', 'function', 'reverses', 'the', 'input', 'string', 'given', 'array', 'characters', 'do', 'allocate', 'extra', 'space', 'another', 'must', 'modifying', 'input', 'extra', 'you', 'may', 'assume', 'characters', 'consist', 'printable', 'ascii', 'two pointers', 'string']",1
343,Integer Break,"['given', 'positive', 'integer', 'break', 'sum', 'least', 'two', 'positive', 'integers', 'maximize', 'product', 'return', 'maximum', 'product', 'you', 'may', 'assume', 'n', 'less', 'larger', 'math', 'dynamic programming']",2
342,Power of Four,"['given', 'integer', 'write', 'function', 'check', 'whether', 'power', 'false', 'follow', 'could', 'solve', 'without', 'bit manipulation']",1
341,Flatten Nested List Iterator,"['given', 'nested', 'list', 'implement', 'iterator', 'flatten', 'each', 'element', 'either', 'list', 'whose', 'elements', 'may', 'also', 'integers', 'by', 'calling', 'next', 'repeatedly', 'hasnext', 'returns', 'order', 'elements', 'returned', 'next', 'by', 'calling', 'next', 'repeatedly', 'hasnext', 'returns', 'order', 'elements', 'returned', 'next', 'stack', 'design']",2
338,Counting Bits,"['given', 'non', 'negative', 'integer', 'number', 'for', 'every', 'numbers', 'range', 'num', 'calculate', 'number', 'binary', 'representation', 'return', 'follow', 'it', 'easy', 'come', 'solution', 'run', 'time', 'but', 'linear', 'time', 'single', 'space', 'complexity', 'can', 'like', 'do', 'without', 'using', 'builtin', 'function', 'like', 'dynamic programming', 'bit manipulation']",2
337,House Robber III,"['the', 'thief', 'found', 'new', 'place', 'thievery', 'there', 'one', 'entrance', 'called', 'besides', 'house', 'one', 'one', 'parent', 'after', 'smart', 'thief', 'realized', 'houses', 'place', 'forms', 'binary', 'it', 'automatically', 'contact', 'police', 'two', 'houses', 'broken', 'determine', 'maximum', 'amount', 'money', 'thief', 'rob', 'tonight', 'without', 'alerting', 'amount', 'money', 'thief', 'rob', 'amount', 'money', 'thief', 'rob', 'tree', 'depth-first search']",2
336,Palindrome Pairs,"['given', 'list', 'unique', 'find', 'pairs', 'distinct', 'indices', 'given', 'concatenation', 'two', 'the', 'palindromes', 'the', 'palindromes', 'hash table', 'string', 'trie']",3
335,Self Crossing,"['you', 'given', 'array', 'x', 'n', 'positive', 'you', 'start', 'point', 'moves', 'metres', 'metres', 'metres', 'metres', 'east', 'in', 'move', 'direction', 'changes', 'write', 'algorithm', 'extra', 'space', 'path', 'crosses', 'false', 'true', 'math']",3
334,Increasing Triplet Subsequence,"['given', 'unsorted', 'array', 'return', 'whether', 'increasing', 'subsequence', 'length', 'exists', 'formally', 'function', 'return', 'true', 'exists', 'k', 'given', 'j', 'k', 'else', 'return', 'your', 'algorithm', 'run', 'time', 'complexity', 'space']",2
332,Reconstruct Itinerary,"['given', 'list', 'airline', 'tickets', 'represented', 'pairs', 'departure', 'arrival', 'airports', 'reconstruct', 'itinerary', 'all', 'tickets', 'belong', 'man', 'departs', 'itinerary', 'must', 'begin', 'if', 'multiple', 'valid', 'return', 'itinerary', 'smallest', 'lexical', 'order', 'read', 'single', 'for', 'itinerary', 'smaller', 'lexical', 'order', 'all', 'airports', 'represented', 'three', 'capital', 'letters', 'you', 'may', 'assume', 'tickets', 'form', 'least', 'one', 'valid', 'another', 'possible', 'reconstruction', 'but', 'larger', 'lexical', 'depth-first search', 'graph']",2
331,Verify Preorder Serialization of a Binary Tree,"['one', 'way', 'serialize', 'binary', 'tree', 'use', 'when', 'encounter', 'record', 'if', 'null', 'record', 'using', 'sentinel', 'value', 'for', 'binary', 'tree', 'serialized', 'string', 'represents', 'null', 'given', 'string', 'comma', 'separated', 'verify', 'whether', 'correct', 'preorder', 'traversal', 'serialization', 'binary', 'find', 'algorithm', 'without', 'reconstructing', 'each', 'comma', 'separated', 'value', 'string', 'must', 'either', 'integer', 'character', 'representing', 'null', 'you', 'may', 'assume', 'input', 'format', 'always', 'example', 'could', 'never', 'contain', 'two', 'consecutive', 'commas', 'true', 'false', 'stack']",2
330,Patching Array,"['given', 'sorted', 'positive', 'integer', 'array', 'nums', 'integer', 'elements', 'array', 'number', 'range', 'inclusive', 'formed', 'sum', 'elements', 'return', 'minimum', 'number', 'patches', 'nums', 'n', 'combinations', 'nums', 'form', 'possible', 'sums', 'now', 'combinations', 'possible', 'sums', 'covers', 'range', 'so', 'need', 'nums', 'n', 'the', 'two', 'patches', 'nums', 'n', 'greedy']",3
329,Longest Increasing Path in a Matrix,"['given', 'integer', 'find', 'length', 'longest', 'increasing', 'from', 'either', 'move', 'four', 'you', 'may', 'not', 'move', 'diagonally', 'move', 'outside', 'boundary', 'nums', 'the', 'longest', 'increasing', 'path', 'nums', 'the', 'longest', 'increasing', 'path', 'moving', 'diagonally', 'depth-first search', 'topological sort', 'memoization']",3
328,Odd Even Linked List,"['given', 'singly', 'linked', 'group', 'odd', 'nodes', 'together', 'followed', 'even', 'please', 'note', 'talking', 'node', 'number', 'value', 'you', 'try', 'the', 'program', 'run', 'space', 'complexity', 'time', 'the', 'relative', 'order', 'inside', 'even', 'odd', 'groups', 'remain', 'the', 'first', 'node', 'considered', 'second', 'node', 'even', 'linked list']",2
327,Count of Range Sum,"['given', 'integer', 'array', 'return', 'number', 'range', 'sums', 'lie', 'range', 'sum', 'defined', 'sum', 'elements', 'nums', 'indices', 'j', 'a', 'naive', 'algorithm', 'you', 'must', 'better', 'nums', 'lower', 'upper', 'the', 'three', 'ranges', 'respective', 'sums', 'binary search', 'divide and conquer', 'sort', 'binary indexed tree', 'segment tree']",3
326,Power of Three,"['given', 'write', 'function', 'determine', 'power', 'false', 'true', 'false', 'follow', 'could', 'without', 'using', 'loop', 'math']",1
324,Wiggle Sort II,"['given', 'unsorted', 'array', 'reorder', 'nums', 'one', 'possible', 'answer', 'nums', 'one', 'possible', 'answer', 'you', 'may', 'assume', 'input', 'valid', 'follow', 'can', 'time', 'extra', 'sort']",2
322,Coin Change,"['you', 'given', 'coins', 'different', 'denominations', 'total', 'amount', 'money', 'write', 'function', 'compute', 'fewest', 'number', 'coins', 'need', 'make', 'if', 'amount', 'money', 'cannot', 'made', 'combination', 'return', 'coins', 'amount', 'coins', 'amount', 'you', 'may', 'assume', 'infinite', 'number', 'kind', 'dynamic programming']",2
321,Create Maximum Number,"['given', 'two', 'arrays', 'length', 'n', 'digits', 'representing', 'two', 'create', 'maximum', 'number', 'length', 'k', 'n', 'digits', 'the', 'relative', 'order', 'digits', 'array', 'must', 'return', 'array', 'k', 'you', 'try', 'optimize', 'time', 'space', 'k', 'k', 'k', 'dynamic programming', 'greedy']",3
319,Bulb Switcher,"['there', 'n', 'bulbs', 'initially', 'you', 'first', 'turn', 'turn', 'every', 'second', 'on', 'third', 'toggle', 'every', 'third', 'bulb', 'turning', 'for', 'toggle', 'every', 'for', 'toggle', 'last', 'find', 'many', 'bulbs', 'n', 'at', 'three', 'bulbs', 'after', 'first', 'three', 'bulbs', 'after', 'second', 'three', 'bulbs', 'after', 'third', 'three', 'bulbs', 'so', 'return', 'one', 'bulb', 'math', 'brainteaser']",2
318,Maximum Product of Word Lengths,"['given', 'string', 'array', 'find', 'maximum', 'value', 'two', 'words', 'share', 'common', 'you', 'may', 'assume', 'word', 'contain', 'lower', 'case', 'if', 'two', 'words', 'return', 'the', 'two', 'words', 'the', 'two', 'words', 'no', 'pair', 'bit manipulation']",2
316,Remove Duplicate Letters,"['given', 'string', 'contains', 'lowercase', 'remove', 'duplicate', 'letters', 'every', 'letter', 'appear', 'you', 'must', 'make', 'sure', 'result', 'smallest', 'lexicographical', 'order', 'among', 'possible', 'stack', 'greedy']",3
315,Count of Smaller Numbers After Self,"['you', 'given', 'integer', 'array', 'nums', 'return', 'new', 'counts', 'the', 'counts', 'array', 'property', 'number', 'smaller', 'elements', 'right', 'to', 'right', 'smaller', 'elements', 'to', 'right', 'smaller', 'element', 'to', 'right', 'smaller', 'element', 'to', 'right', 'smaller', 'binary search', 'divide and conquer', 'sort', 'binary indexed tree', 'segment tree']",3
313,Super Ugly Number,"['write', 'program', 'find', 'nth', 'super', 'ugly', 'super', 'ugly', 'numbers', 'positive', 'numbers', 'whose', 'prime', 'factors', 'given', 'prime', 'list', 'primes', 'size', 'n', 'primes', 'sequence', 'first', 'super', 'ugly', 'numbers', 'given', 'primes', 'size', 'super', 'ugly', 'number', 'given', 'the', 'given', 'numbers', 'primes', 'ascending', 'k', 'n', 'the', 'nth', 'super', 'ugly', 'number', 'guaranteed', 'fit', 'signed', 'math', 'heap']",2
312,Burst Balloons,"['given', 'n', 'indexed', 'each', 'balloon', 'painted', 'number', 'represented', 'array', 'you', 'asked', 'burst', 'if', 'burst', 'balloon', 'get', 'here', 'left', 'right', 'adjacent', 'indices', 'after', 'left', 'right', 'becomes', 'find', 'maximum', 'coins', 'collect', 'bursting', 'balloons', 'you', 'may', 'imagine', 'they', 'real', 'therefore', 'burst', 'n', 'nums', 'coins', 'divide and conquer', 'dynamic programming']",3
310,Minimum Height Trees,"['for', 'undirected', 'graph', 'tree', 'choose', 'node', 'the', 'result', 'graph', 'rooted', 'among', 'possible', 'rooted', 'minimum', 'height', 'called', 'minimum', 'height', 'trees', 'given', 'write', 'function', 'find', 'mhts', 'return', 'list', 'root', 'the', 'graph', 'contains', 'n', 'nodes', 'labeled', 'n', 'you', 'given', 'number', 'n', 'list', 'undirected', 'edges', 'edge', 'pair', 'you', 'assume', 'duplicate', 'edges', 'appear', 'since', 'edges', 'thus', 'appear', 'together', 'n', 'edges', 'n', 'edges', 'according', 'definition', 'tree', 'tree', 'undirected', 'graph', 'two', 'vertices', 'connected', 'exactly', 'one', 'in', 'connected', 'graph', 'without', 'simple', 'cycles', 'the', 'height', 'rooted', 'tree', 'number', 'edges', 'longest', 'downward', 'path', 'root', 'breadth-first search', 'graph']",2
309,Best Time to Buy and Sell Stock with Cooldown,"['say', 'array', 'ith', 'element', 'price', 'given', 'stock', 'day', 'design', 'algorithm', 'find', 'maximum', 'you', 'may', 'complete', 'many', 'transactions', 'like', 'buy', 'one', 'sell', 'one', 'share', 'stock', 'multiple', 'following', 'you', 'may', 'engage', 'multiple', 'transactions', 'time', 'must', 'sell', 'stock', 'buy', 'after', 'sell', 'cannot', 'buy', 'stock', 'next', 'cooldown', 'transactions', 'dynamic programming']",2
307,Range Sum Query - Mutable,"['given', 'integer', 'array', 'find', 'sum', 'elements', 'indices', 'j', 'the', 'function', 'modifies', 'nums', 'updating', 'element', 'index', 'given', 'nums', 'the', 'array', 'modifiable', 'update', 'you', 'may', 'assume', 'number', 'calls', 'update', 'sumrange', 'function', 'distributed', 'binary indexed tree', 'segment tree']",2
306,Additive Number,"['additive', 'number', 'string', 'whose', 'digits', 'form', 'additive', 'a', 'valid', 'additive', 'sequence', 'contain', 'least', 'three', 'except', 'first', 'two', 'subsequent', 'number', 'sequence', 'must', 'sum', 'preceding', 'given', 'string', 'containing', 'digits', 'write', 'function', 'determine', 'additive', 'numbers', 'additive', 'sequence', 'cannot', 'leading', 'sequence', 'true', 'the', 'digits', 'form', 'additive', 'true', 'the', 'additive', 'sequence', 'follow', 'how', 'would', 'handle', 'overflow', 'large', 'input', 'backtracking']",2
304,Range Sum Query 2D - Immutable,"['given', 'matrix', 'find', 'sum', 'elements', 'inside', 'rectangle', 'defined', 'upper', 'left', 'corner', 'lower', 'right', 'corner', 'the', 'rectangle', 'red', 'defined', 'contains', 'sum', 'given', 'matrix', 'you', 'may', 'assume', 'matrix', 'there', 'many', 'calls', 'sumregion', 'you', 'may', 'assume', 'dynamic programming']",2
303,Range Sum Query - Immutable,"['given', 'integer', 'array', 'find', 'sum', 'elements', 'indices', 'j', 'given', 'nums', 'you', 'may', 'assume', 'array', 'there', 'many', 'calls', 'sumrange', 'dynamic programming']",1
301,Remove Invalid Parentheses,"['remove', 'minimum', 'number', 'invalid', 'parentheses', 'order', 'make', 'input', 'string', 'return', 'possible', 'input', 'string', 'may', 'contain', 'letters', 'parentheses', 'depth-first search', 'breadth-first search']",3
300,Longest Increasing Subsequence,"['given', 'unsorted', 'array', 'find', 'length', 'longest', 'increasing', 'the', 'longest', 'increasing', 'subsequence', 'therefore', 'length', 'there', 'may', 'one', 'lis', 'necessary', 'return', 'your', 'algorithm', 'run', 'follow', 'could', 'improve', 'log', 'time', 'binary search', 'dynamic programming']",2
299,Bulls and Cows,"['you', 'playing', 'following', 'bulls', 'cows', 'game', 'you', 'write', 'number', 'ask', 'friend', 'guess', 'number', 'each', 'time', 'friend', 'makes', 'provide', 'hint', 'indicates', 'many', 'digits', 'said', 'guess', 'match', 'secret', 'number', 'exactly', 'digit', 'position', 'many', 'digits', 'match', 'secret', 'number', 'locate', 'wrong', 'position', 'your', 'friend', 'use', 'successive', 'guesses', 'hints', 'eventually', 'derive', 'secret', 'write', 'function', 'return', 'hint', 'according', 'secret', 'number', 'use', 'a', 'indicate', 'bulls', 'b', 'indicate', 'please', 'note', 'secret', 'number', 'guess', 'may', 'contain', 'duplicate', 'secret', 'guess', 'bull', 'the', 'bull', 'cows', 'secret', 'guess', 'the', 'guess', 'you', 'may', 'assume', 'secret', 'number', 'guess', 'contain', 'lengths', 'always', 'hash table']",2
297,Serialize and Deserialize Binary Tree,"['serialization', 'process', 'converting', 'data', 'structure', 'object', 'sequence', 'bits', 'stored', 'file', 'memory', 'transmitted', 'across', 'network', 'connection', 'link', 'reconstructed', 'later', 'another', 'computer', 'design', 'algorithm', 'serialize', 'deserialize', 'binary', 'there', 'restriction', 'algorithm', 'you', 'need', 'ensure', 'binary', 'tree', 'serialized', 'string', 'string', 'deserialized', 'original', 'tree', 'you', 'may', 'serialize', 'following', 'the', 'format', 'leetcode', 'serializes', 'binary', 'you', 'necessarily', 'need', 'follow', 'please', 'creative', 'come', 'different', 'approaches', 'use', 'class', 'variables', 'store', 'your', 'serialize', 'deserialize', 'algorithms', 'tree', 'design']",3
295,Find Median from Data Stream,"['median', 'middle', 'value', 'ordered', 'integer', 'if', 'size', 'list', 'middle', 'so', 'median', 'mean', 'two', 'middle', 'for', 'median', 'median', 'design', 'data', 'structure', 'supports', 'following', 'two', 'void', 'add', 'integer', 'number', 'data', 'stream', 'data', 'double', 'return', 'median', 'elements', 'follow', 'if', 'integer', 'numbers', 'stream', 'would', 'optimize', 'if', 'integer', 'numbers', 'stream', 'would', 'optimize', 'heap', 'design']",3
292,Nim Game,"['you', 'playing', 'following', 'nim', 'game', 'there', 'heap', 'stones', 'time', 'one', 'take', 'turns', 'remove', 'the', 'one', 'removes', 'last', 'stone', 'you', 'take', 'first', 'turn', 'remove', 'both', 'clever', 'optimal', 'strategies', 'write', 'function', 'determine', 'whether', 'win', 'game', 'given', 'number', 'stones', 'false', 'if', 'stones', 'never', 'win', 'no', 'matter', 'stones', 'last', 'stone', 'always', 'removed', 'brainteaser', 'minimax']",1
290,Word Pattern,"['given', 'pattern', 'string', 'find', 'str', 'follows', 'here', 'follow', 'means', 'full', 'bijection', 'letter', 'pattern', 'word', 'pattern', 'str', 'cat', 'cat', 'true', 'str', 'cat', 'cat', 'false', 'pattern', 'str', 'cat', 'cat', 'false', 'pattern', 'str', 'dog', 'dog', 'false', 'you', 'may', 'assume', 'pattern', 'contains', 'lowercase', 'str', 'contains', 'lowercase', 'letters', 'may', 'separated', 'single', 'hash table']",1
289,Game of Life,"['according', 'game', 'also', 'known', 'simply', 'cellular', 'automaton', 'devised', 'british', 'mathematician', 'john', 'horton', 'conway', 'given', 'board', 'n', 'cell', 'initial', 'state', 'live', 'dead', 'each', 'cell', 'interacts', 'eight', 'neighbors', 'using', 'following', 'four', 'rules', 'wikipedia', 'any', 'live', 'cell', 'fewer', 'two', 'live', 'neighbors', 'caused', 'any', 'live', 'cell', 'two', 'three', 'live', 'neighbors', 'lives', 'next', 'any', 'live', 'cell', 'three', 'live', 'neighbors', 'any', 'dead', 'cell', 'exactly', 'three', 'live', 'neighbors', 'becomes', 'live', 'write', 'function', 'compute', 'next', 'state', 'one', 'board', 'given', 'current', 'next', 'state', 'created', 'applying', 'rules', 'simultaneously', 'every', 'cell', 'current', 'deaths', 'occur', 'follow', 'could', 'solve', 'remember', 'board', 'needs', 'updated', 'you', 'cannot', 'update', 'cells', 'first', 'use', 'updated', 'values', 'update', 'in', 'represent', 'board', 'using', 'in', 'board', 'would', 'cause', 'problems', 'active', 'area', 'encroaches', 'border', 'how', 'would', 'address', 'array']",2
287,Find the Duplicate Number,"['given', 'array', 'nums', 'containing', 'n', 'integers', 'integer', 'n', 'prove', 'least', 'one', 'duplicate', 'number', 'must', 'assume', 'one', 'duplicate', 'find', 'duplicate', 'you', 'must', 'modify', 'array', 'array', 'read', 'you', 'must', 'use', 'extra', 'your', 'runtime', 'complexity', 'less', 'there', 'one', 'duplicate', 'number', 'could', 'repeated', 'array', 'two pointers', 'binary search']",2
284,Peeking Iterator,"['given', 'iterator', 'class', 'interface', 'design', 'implement', 'peekingiterator', 'support', 'operation', 'essentially', 'element', 'returned', 'next', 'call', 'assume', 'iterator', 'initialized', 'beginning', 'call', 'gets', 'first', 'element', 'now', 'call', 'returns', 'next', 'calling', 'still', 'return', 'you', 'call', 'final', 'time', 'returns', 'last', 'calling', 'return', 'follow', 'how', 'would', 'extend', 'design', 'generic', 'work', 'design']",2
283,Move Zeroes,"['given', 'array', 'write', 'function', 'move', 'end', 'maintaining', 'relative', 'order', 'you', 'must', 'without', 'making', 'copy', 'minimize', 'total', 'number', 'array', 'two pointers']",1
282,Expression Add Operators,"['given', 'string', 'contains', 'digits', 'target', 'return', 'possibilities', 'add', 'binary', 'operators', 'digits', 'evaluate', 'target', 'num', 'target', 'num', 'target', 'num', 'target', 'num', 'target', 'num', 'target', 'divide and conquer']",3
279,Perfect Squares,"['given', 'positive', 'integer', 'find', 'least', 'number', 'perfect', 'square', 'numbers', 'sum', 'n', 'n', 'math', 'dynamic programming', 'breadth-first search']",2
278,First Bad Version,"['you', 'product', 'manager', 'currently', 'leading', 'team', 'develop', 'new', 'latest', 'version', 'product', 'fails', 'quality', 'since', 'version', 'developed', 'based', 'previous', 'versions', 'bad', 'version', 'also', 'suppose', 'n', 'versions', 'want', 'find', 'first', 'bad', 'causes', 'following', 'ones', 'you', 'given', 'api', 'bool', 'return', 'whether', 'version', 'implement', 'function', 'find', 'first', 'bad', 'you', 'minimize', 'number', 'calls', 'given', 'n', 'version', 'first', 'bad', 'call', 'call', 'call', 'then', 'first', 'bad', 'binary search']",1
275,H-Index II,"['given', 'array', 'citations', 'ascending', 'order', 'citation', 'write', 'function', 'compute', 'according', 'scientist', 'citations', 'means', 'researcher', 'papers', 'total', 'received', 'citations', 'since', 'researcher', 'papers', 'least', 'citations', 'remaining', 'two', 'citations', 'if', 'several', 'possible', 'values', 'maximum', 'one', 'taken', 'follow', 'this', 'follow', 'problem', 'citations', 'guaranteed', 'sorted', 'ascending', 'could', 'solve', 'logarithmic', 'time', 'binary search']",2
274,H-Index,"['given', 'array', 'citations', 'citation', 'write', 'function', 'compute', 'according', 'definition', 'scientist', 'index', 'h', 'h', 'n', 'papers', 'least', 'h', 'citations', 'n', 'h', 'papers', 'h', 'citations', 'citations', 'means', 'researcher', 'papers', 'total', 'received', 'citations', 'since', 'researcher', 'papers', 'least', 'citations', 'remaining', 'two', 'citations', 'several', 'possible', 'values', 'maximum', 'one', 'taken', 'hash table', 'sort']",2
273,Integer to English Words,"['convert', 'integer', 'english', 'words', 'given', 'input', 'guaranteed', 'less', 'hundred', 'twenty', 'thousand', 'three', 'hundred', 'forty', 'million', 'two', 'hundred', 'thirty', 'four', 'thousand', 'five', 'hundred', 'sixty', 'billion', 'two', 'hundred', 'thirty', 'four', 'million', 'five', 'hundred', 'sixty', 'seven', 'thousand', 'eight', 'hundred', 'ninety', 'math', 'string']",3
268,Missing Number,"['given', 'array', 'containing', 'n', 'distinct', 'numbers', 'taken', 'find', 'one', 'missing', 'your', 'algorithm', 'run', 'linear', 'runtime', 'could', 'implement', 'using', 'constant', 'extra', 'space', 'array', 'math', 'bit manipulation']",1
264,Ugly Number II,"['write', 'program', 'find', 'ugly', 'ugly', 'numbers', 'positive', 'numbers', 'whose', 'prime', 'factors', 'include', 'n', 'sequence', 'first', 'ugly', 'typically', 'treated', 'ugly', 'n', 'exceed', 'math', 'dynamic programming', 'heap']",2
263,Ugly Number,"['write', 'program', 'check', 'whether', 'given', 'number', 'ugly', 'ugly', 'numbers', 'positive', 'numbers', 'whose', 'prime', 'factors', 'include', 'false', 'ugly', 'since', 'includes', 'another', 'prime', 'factor', 'typically', 'treated', 'ugly', 'input', 'within', 'signed', 'integer', 'math']",1
260,Single Number III,"['given', 'array', 'numbers', 'exactly', 'two', 'elements', 'appear', 'elements', 'appear', 'exactly', 'find', 'two', 'elements', 'appear', 'the', 'order', 'result', 'so', 'also', 'your', 'algorithm', 'run', 'linear', 'runtime', 'could', 'implement', 'using', 'constant', 'space', 'bit manipulation']",2
258,Add Digits,"['given', 'integer', 'repeatedly', 'add', 'digits', 'result', 'one', 'the', 'process', 'since', 'one', 'return', 'follow', 'could', 'without', 'math']",1
257,Binary Tree Paths,"['given', 'binary', 'return', 'leaf', 'node', 'all', 'paths', 'tree', 'depth-first search']",1
242,Valid Anagram,"['given', 'two', 'strings', 'write', 'function', 'determine', 'anagram', 'you', 'may', 'assume', 'string', 'contains', 'lowercase', 'follow', 'what', 'inputs', 'contain', 'unicode', 'how', 'would', 'adapt', 'solution', 'hash table', 'sort']",1
241,Different Ways to Add Parentheses,"['given', 'string', 'numbers', 'return', 'possible', 'results', 'computing', 'different', 'possible', 'ways', 'group', 'numbers', 'the', 'valid', 'operators', 'divide and conquer']",2
240,Search a 2D Matrix II,"['write', 'efficient', 'algorithm', 'searches', 'value', 'x', 'n', 'this', 'matrix', 'following', 'integers', 'row', 'sorted', 'ascending', 'left', 'integers', 'column', 'sorted', 'ascending', 'top', 'consider', 'following', 'binary search', 'divide and conquer']",2
239,Sliding Window Maximum,"['given', 'array', 'sliding', 'window', 'size', 'k', 'moving', 'left', 'array', 'you', 'see', 'k', 'numbers', 'each', 'time', 'sliding', 'window', 'moves', 'right', 'one', 'return', 'max', 'sliding', 'nums', 'k', 'window', 'position', 'you', 'may', 'assume', 'k', 'always', 'k', 'input', 'size', 'follow', 'could', 'solve', 'linear', 'heap', 'sliding window']",3
238,Product of Array Except Self,"['given', 'array', 'nums', 'n', 'integers', 'n', 'array', 'output', 'equal', 'product', 'elements', 'nums', 'except', 'please', 'solve', 'without', 'division', 'follow', 'could', 'solve', 'constant', 'space', 'output', 'array', 'count', 'extra', 'space', 'purpose', 'space', 'complexity', 'array']",2
237,Delete Node in a Linked List,"['write', 'function', 'delete', 'node', 'singly', 'linked', 'given', 'access', 'given', 'linked', 'list', 'looks', 'like', 'head', 'node', 'you', 'given', 'second', 'node', 'value', 'linked', 'list', 'become', 'calling', 'head', 'node', 'you', 'given', 'third', 'node', 'value', 'linked', 'list', 'become', 'calling', 'the', 'linked', 'list', 'least', 'two', 'all', 'values', 'the', 'given', 'tail', 'always', 'valid', 'node', 'linked', 'do', 'return', 'anything', 'linked list']",1
236,Lowest Common Ancestor of a Binary Tree,"['given', 'binary', 'find', 'lowest', 'common', 'ancestor', 'two', 'given', 'nodes', 'according', 'definition', 'lca', 'lowest', 'common', 'ancestor', 'defined', 'two', 'nodes', 'lowest', 'node', 't', 'descendants', 'allow', 'node', 'descendant', 'given', 'following', 'binary', 'root', 'root', 'p', 'q', 'the', 'lca', 'nodes', 'root', 'p', 'q', 'the', 'lca', 'nodes', 'since', 'node', 'descendant', 'according', 'lca', 'all', 'values', 'p', 'q', 'different', 'values', 'binary', 'tree']",2
235,Lowest Common Ancestor of a Binary Search Tree,"['given', 'binary', 'search', 'tree', 'find', 'lowest', 'common', 'ancestor', 'two', 'given', 'nodes', 'according', 'definition', 'lca', 'lowest', 'common', 'ancestor', 'defined', 'two', 'nodes', 'p', 'lowest', 'node', 't', 'p', 'descendants', 'allow', 'node', 'descendant', 'given', 'binary', 'search', 'root', 'root', 'p', 'q', 'the', 'lca', 'nodes', 'root', 'p', 'q', 'the', 'lca', 'nodes', 'since', 'node', 'descendant', 'according', 'lca', 'all', 'values', 'p', 'q', 'different', 'values', 'tree']",1
234,Palindrome Linked List,"['given', 'singly', 'linked', 'determine', 'false', 'true', 'follow', 'could', 'time', 'linked list', 'two pointers']",1
233,Number of Digit One,"['given', 'integer', 'count', 'total', 'number', 'digit', 'appearing', 'integers', 'less', 'equal', 'digit', 'occurred', 'following', 'math']",3
232,Implement Queue using Stacks,"['implement', 'following', 'operations', 'queue', 'using', 'push', 'element', 'x', 'back', 'removes', 'element', 'front', 'get', 'front', 'return', 'whether', 'queue', 'myqueue', 'queue', 'new', 'returns', 'returns', 'returns', 'false', 'you', 'must', 'use', 'standard', 'operations', 'stack', 'means', 'push', 'empty', 'operations', 'depending', 'stack', 'may', 'supported', 'you', 'may', 'simulate', 'stack', 'using', 'list', 'deque', 'long', 'use', 'standard', 'operations', 'you', 'may', 'assume', 'operations', 'valid', 'pop', 'peek', 'operations', 'called', 'empty', 'stack', 'design']",1
231,Power of Two,"['given', 'write', 'function', 'determine', 'power', 'true', 'false', 'math', 'bit manipulation']",1
230,Kth Smallest Element in a BST,"['given', 'binary', 'search', 'write', 'function', 'kthsmallest', 'find', 'kth', 'smallest', 'element', 'you', 'may', 'assume', 'k', 'always', 'k', 'total', 'root', 'k', 'root', 'k', 'follow', 'what', 'bst', 'modified', 'often', 'need', 'find', 'kth', 'smallest', 'how', 'would', 'optimize', 'kthsmallest', 'binary search', 'tree']",2
229,Majority Element II,"['given', 'integer', 'array', 'size', 'find', 'elements', 'appear', 'the', 'algorithm', 'run', 'linear', 'time', 'array']",2
228,Summary Ranges,"['given', 'sorted', 'integer', 'array', 'without', 'return', 'summary', 'form', 'continuous', 'form', 'continuous', 'form', 'continuous', 'form', 'continuous', 'array']",2
227,Basic Calculator II,"['implement', 'basic', 'calculator', 'evaluate', 'simple', 'expression', 'the', 'expression', 'string', 'contains', 'operators', 'empty', 'spaces', 'the', 'integer', 'division', 'truncate', 'toward', 'you', 'may', 'assume', 'given', 'expression', 'always', 'do', 'use', 'eval', 'library', 'string']",2
226,Invert Binary Tree,"['invert', 'binary', 'this', 'problem', 'inspired', 'original', 'tweet', 'max', 'engineers', 'use', 'software', 'wrote', 'invert', 'binary', 'tree', 'whiteboard', 'tree']",1
225,Implement Stack using Queues,"['implement', 'following', 'operations', 'stack', 'using', 'push', 'element', 'x', 'onto', 'removes', 'element', 'top', 'get', 'top', 'return', 'whether', 'stack', 'mystack', 'stack', 'new', 'returns', 'returns', 'returns', 'false', 'you', 'must', 'use', 'standard', 'operations', 'queue', 'means', 'push', 'empty', 'operations', 'depending', 'queue', 'may', 'supported', 'you', 'may', 'simulate', 'queue', 'using', 'list', 'deque', 'long', 'use', 'standard', 'operations', 'you', 'may', 'assume', 'operations', 'valid', 'pop', 'top', 'operations', 'called', 'empty', 'stack', 'design']",1
224,Basic Calculator,"['implement', 'basic', 'calculator', 'evaluate', 'simple', 'expression', 'the', 'expression', 'string', 'may', 'contain', 'open', 'closing', 'parentheses', 'plus', 'minus', 'sign', 'integers', 'empty', 'spaces', 'you', 'may', 'assume', 'given', 'expression', 'always', 'do', 'use', 'eval', 'library', 'math', 'stack']",3
223,Rectangle Area,"['find', 'total', 'area', 'covered', 'two', 'rectilinear', 'rectangles', 'each', 'rectangle', 'defined', 'bottom', 'left', 'corner', 'top', 'right', 'corner', 'shown', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'assume', 'total', 'area', 'never', 'beyond', 'maximum', 'possible', 'value', 'math']",2
222,Count Complete Tree Nodes,"['given', 'complete', 'binary', 'count', 'number', 'definition', 'complete', 'binary', 'tree', 'in', 'complete', 'binary', 'tree', 'every', 'except', 'possibly', 'completely', 'nodes', 'last', 'level', 'far', 'left', 'it', 'nodes', 'inclusive', 'last', 'level', 'binary search', 'tree']",2
221,Maximal Square,"['given', 'binary', 'matrix', 'filled', 'find', 'largest', 'square', 'containing', 'return', 'dynamic programming']",2
220,Contains Duplicate III,"['given', 'array', 'find', 'whether', 'two', 'distinct', 'indices', 'j', 'array', 'absolute', 'difference', 'absolute', 'difference', 'j', 'nums', 'k', 'nums', 'k', 'nums', 'k', 'sort', 'ordered map']",2
219,Contains Duplicate II,"['given', 'array', 'integers', 'integer', 'find', 'whether', 'two', 'distinct', 'indices', 'j', 'array', 'absolute', 'difference', 'j', 'nums', 'k', 'nums', 'k', 'nums', 'k', 'array', 'hash table']",1
218,The Skyline Problem,"['a', 'skyline', 'outer', 'contour', 'silhouette', 'formed', 'buildings', 'city', 'viewed', 'now', 'suppose', 'given', 'locations', 'height', 'buildings', 'shown', 'cityscape', 'photo', 'write', 'program', 'output', 'skyline', 'formed', 'buildings', 'collectively', 'the', 'geometric', 'information', 'building', 'represented', 'triplet', 'integers', 'li', 'ri', 'x', 'coordinates', 'left', 'right', 'edge', 'ith', 'hi', 'it', 'guaranteed', 'ri', 'hi', 'ri', 'li', 'you', 'may', 'assume', 'buildings', 'perfect', 'rectangles', 'grounded', 'absolutely', 'flat', 'surface', 'height', 'for', 'dimensions', 'buildings', 'figure', 'a', 'recorded', 'the', 'output', 'list', 'dots', 'figure', 'format', 'uniquely', 'defines', 'a', 'key', 'point', 'left', 'endpoint', 'horizontal', 'line', 'note', 'last', 'key', 'rightmost', 'building', 'merely', 'used', 'mark', 'termination', 'always', 'zero', 'ground', 'two', 'adjacent', 'buildings', 'considered', 'part', 'skyline', 'for', 'skyline', 'figure', 'b', 'represented', 'the', 'number', 'buildings', 'input', 'list', 'guaranteed', 'range', 'the', 'input', 'list', 'already', 'sorted', 'ascending', 'order', 'left', 'x', 'position', 'the', 'output', 'list', 'must', 'sorted', 'x', 'there', 'must', 'consecutive', 'horizontal', 'lines', 'equal', 'height', 'output', 'for', 'three', 'lines', 'height', 'merged', 'one', 'final', 'output', 'divide and conquer', 'heap', 'binary indexed tree', 'segment tree', 'line sweep']",3
217,Contains Duplicate,"['given', 'array', 'find', 'array', 'contains', 'your', 'function', 'return', 'true', 'value', 'appears', 'least', 'twice', 'return', 'false', 'every', 'element', 'true', 'false', 'true', 'array', 'hash table']",1
216,Combination Sum III,"['find', 'possible', 'combinations', 'k', 'numbers', 'add', 'number', 'given', 'numbers', 'used', 'combination', 'unique', 'set', 'all', 'numbers', 'positive', 'the', 'solution', 'set', 'must', 'contain', 'duplicate', 'k', 'n', 'k', 'n', 'array', 'backtracking']",2
215,Kth Largest Element in an Array,"['find', 'kth', 'largest', 'element', 'unsorted', 'note', 'kth', 'largest', 'element', 'sorted', 'kth', 'distinct', 'k', 'k', 'you', 'may', 'assume', 'k', 'always', 'k', 'divide and conquer', 'heap']",2
214,Shortest Palindrome,"['given', 'string', 'allowed', 'convert', 'palindrome', 'adding', 'characters', 'front', 'find', 'return', 'shortest', 'palindrome', 'find', 'performing', 'string']",3
213,House Robber II,"['you', 'professional', 'robber', 'planning', 'rob', 'houses', 'along', 'each', 'house', 'certain', 'amount', 'money', 'all', 'houses', 'place', 'arranged', 'that', 'means', 'first', 'house', 'neighbor', 'last', 'adjacent', 'houses', 'security', 'system', 'connected', 'automatically', 'contact', 'police', 'two', 'adjacent', 'houses', 'broken', 'given', 'list', 'integers', 'representing', 'amount', 'money', 'determine', 'maximum', 'amount', 'money', 'rob', 'tonight', 'without', 'alerting', 'you', 'cannot', 'rob', 'house', 'rob', 'house', 'adjacent', 'rob', 'house', 'rob', 'house', 'total', 'amount', 'rob', 'dynamic programming']",2
212,Word Search II,"['given', 'board', 'list', 'words', 'find', 'words', 'each', 'word', 'must', 'constructed', 'letters', 'sequentially', 'adjacent', 'cells', 'horizontally', 'vertically', 'the', 'letter', 'cell', 'may', 'used', 'board', 'words', 'all', 'inputs', 'consist', 'lowercase', 'letters', 'the', 'values', 'backtracking', 'trie']",3
211,Add and Search Word - Data structure design,"['design', 'data', 'structure', 'supports', 'following', 'two', 'void', 'bool', 'search', 'literal', 'word', 'regular', 'expression', 'string', 'containing', 'letters', 'a', 'means', 'represent', 'one', 'you', 'may', 'assume', 'words', 'consist', 'lowercase', 'letters', 'backtracking', 'design', 'trie']",2
210,Course Schedule II,"['there', 'total', 'n', 'courses', 'labeled', 'some', 'courses', 'may', 'example', 'take', 'course', 'first', 'take', 'course', 'expressed', 'given', 'total', 'number', 'courses', 'list', 'prerequisite', 'return', 'ordering', 'courses', 'take', 'finish', 'there', 'may', 'multiple', 'correct', 'need', 'return', 'one', 'if', 'impossible', 'finish', 'return', 'empty', 'total', 'courses', 'to', 'take', 'course', 'finished', 'course', 'so', 'correct', 'course', 'order', 'total', 'courses', 'to', 'take', 'course', 'finished', 'courses', 'both', 'courses', 'taken', 'finished', 'course', 'so', 'one', 'correct', 'course', 'order', 'another', 'correct', 'ordering', 'the', 'input', 'prerequisites', 'graph', 'represented', 'list', 'adjacency', 'read', 'graph', 'you', 'may', 'assume', 'duplicate', 'edges', 'input', 'depth-first search', 'breadth-first search', 'graph', 'topological sort']",2
209,Minimum Size Subarray Sum,"['given', 'array', 'n', 'positive', 'integers', 'positive', 'integer', 'find', 'minimal', 'length', 'contiguous', 'subarray', 'sum', 'if', 'return', 'nums', 'subarray', 'minimal', 'length', 'problem', 'follow', 'if', 'figured', 'try', 'coding', 'another', 'solution', 'time', 'complexity', 'log', 'array', 'two pointers', 'binary search']",2
208,Implement Trie (Prefix Tree),"['implement', 'trie', 'startswith', 'trie', 'trie', 'new', 'returns', 'returns', 'returns', 'returns', 'you', 'may', 'assume', 'inputs', 'consist', 'lowercase', 'letters', 'all', 'inputs', 'guaranteed', 'design', 'trie']",2
207,Course Schedule,"['there', 'total', 'n', 'courses', 'labeled', 'some', 'courses', 'may', 'example', 'take', 'course', 'first', 'take', 'course', 'expressed', 'given', 'total', 'number', 'courses', 'list', 'prerequisite', 'possible', 'finish', 'total', 'courses', 'to', 'take', 'course', 'finished', 'course', 'so', 'total', 'courses', 'to', 'take', 'course', 'finished', 'course', 'take', 'course', 'also', 'finished', 'course', 'so', 'the', 'input', 'prerequisites', 'graph', 'represented', 'list', 'adjacency', 'read', 'graph', 'you', 'may', 'assume', 'duplicate', 'edges', 'input', 'depth-first search', 'breadth-first search', 'graph', 'topological sort']",2
206,Reverse Linked List,"['reverse', 'singly', 'linked', 'follow', 'a', 'linked', 'list', 'reversed', 'either', 'iteratively', 'could', 'implement', 'linked list']",1
205,Isomorphic Strings,"['given', 'two', 'strings', 'determine', 'two', 'strings', 'isomorphic', 'characters', 'replaced', 'get', 'all', 'occurrences', 'character', 'must', 'replaced', 'another', 'character', 'preserving', 'order', 'no', 'two', 'characters', 'may', 'map', 'character', 'character', 'may', 'map', 'false', 'true', 'you', 'may', 'assume', 'hash table']",1
204,Count Primes,"['count', 'number', 'prime', 'numbers', 'less', 'there', 'prime', 'numbers', 'less', 'hash table', 'math']",1
203,Remove Linked List Elements,"['remove', 'elements', 'linked', 'list', 'integers', 'value', 'val', 'linked list']",1
202,Happy Number,"['write', 'algorithm', 'determine', 'number', 'a', 'happy', 'number', 'number', 'defined', 'following', 'starting', 'positive', 'replace', 'number', 'sum', 'squares', 'repeat', 'process', 'number', 'equals', 'loops', 'endlessly', 'cycle', 'include', 'those', 'numbers', 'process', 'ends', 'happy', 'hash table', 'math']",1
201,Bitwise AND of Numbers Range,"['given', 'range', 'n', 'return', 'bitwise', 'and', 'numbers', 'bit manipulation']",2
200,Number of Islands,"['given', 'grid', 'map', 'count', 'number', 'an', 'island', 'surrounded', 'water', 'formed', 'connecting', 'adjacent', 'lands', 'horizontally', 'you', 'may', 'assume', 'four', 'edges', 'grid', 'surrounded', 'depth-first search', 'breadth-first search', 'union find']",2
199,Binary Tree Right Side View,"['given', 'binary', 'imagine', 'standing', 'right', 'side', 'return', 'values', 'nodes', 'see', 'ordered', 'top', 'tree', 'depth-first search', 'breadth-first search']",2
198,House Robber,"['you', 'professional', 'robber', 'planning', 'rob', 'houses', 'along', 'each', 'house', 'certain', 'amount', 'money', 'constraint', 'stopping', 'robbing', 'adjacent', 'houses', 'security', 'system', 'connected', 'automatically', 'contact', 'police', 'two', 'adjacent', 'houses', 'broken', 'given', 'list', 'integers', 'representing', 'amount', 'money', 'determine', 'maximum', 'amount', 'money', 'rob', 'tonight', 'without', 'alerting', 'rob', 'house', 'rob', 'house', 'total', 'amount', 'rob', 'rob', 'house', 'rob', 'house', 'rob', 'house', 'total', 'amount', 'rob', 'dynamic programming']",1
191,Number of 1 Bits,"['write', 'function', 'takes', 'unsigned', 'integer', 'number', 'known', 'hamming', 'the', 'input', 'binary', 'string', 'total', 'three', 'the', 'input', 'binary', 'string', 'total', 'one', 'the', 'input', 'binary', 'string', 'total', 'thirty', 'one', 'note', 'languages', 'unsigned', 'integer', 'in', 'input', 'given', 'signed', 'integer', 'type', 'affect', 'internal', 'binary', 'representation', 'integer', 'whether', 'signed', 'in', 'compiler', 'represents', 'signed', 'integers', 'using', 'complement', 'input', 'represents', 'signed', 'integer', 'follow', 'if', 'function', 'called', 'many', 'would', 'optimize', 'bit manipulation']",1
190,Reverse Bits,"['reverse', 'bits', 'given', 'bits', 'unsigned', 'the', 'input', 'binary', 'string', 'represents', 'unsigned', 'integer', 'return', 'binary', 'representation', 'the', 'input', 'binary', 'string', 'represents', 'unsigned', 'integer', 'return', 'binary', 'representation', 'note', 'languages', 'unsigned', 'integer', 'in', 'input', 'output', 'given', 'signed', 'integer', 'type', 'affect', 'internal', 'binary', 'representation', 'integer', 'whether', 'signed', 'in', 'compiler', 'represents', 'signed', 'integers', 'using', 'complement', 'input', 'represents', 'signed', 'integer', 'output', 'represents', 'signed', 'integer', 'follow', 'if', 'function', 'called', 'many', 'would', 'optimize', 'bit manipulation']",1
189,Rotate Array,"['given', 'rotate', 'array', 'right', 'k', 'k', 'rotate', 'steps', 'rotate', 'steps', 'rotate', 'steps', 'k', 'rotate', 'steps', 'rotate', 'steps', 'try', 'come', 'many', 'solutions', 'least', 'different', 'ways', 'solve', 'could', 'extra', 'array']",1
188,Best Time to Buy and Sell Stock IV,"['say', 'array', 'ith', 'element', 'price', 'given', 'stock', 'day', 'design', 'algorithm', 'find', 'maximum', 'you', 'may', 'complete', 'k', 'you', 'may', 'engage', 'multiple', 'transactions', 'time', 'must', 'sell', 'stock', 'buy', 'k', 'buy', 'day', 'sell', 'day', 'profit', 'k', 'buy', 'day', 'sell', 'day', 'profit', 'then', 'buy', 'day', 'sell', 'day', 'profit', 'dynamic programming']",3
187,Repeated DNA Sequences,"['all', 'dna', 'composed', 'series', 'nucleotides', 'abbreviated', 'when', 'studying', 'sometimes', 'useful', 'identify', 'repeated', 'sequences', 'within', 'write', 'function', 'find', 'sequences', 'occur', 'dna', 'hash table', 'bit manipulation']",2
179,Largest Number,"['given', 'list', 'non', 'negative', 'arrange', 'form', 'largest', 'the', 'result', 'may', 'need', 'return', 'string', 'instead', 'sort']",2
174,Dungeon Game,"['td', 'solid', 'td', 'the', 'demons', 'captured', 'princess', 'imprisoned', 'corner', 'the', 'dungeon', 'consists', 'm', 'x', 'n', 'rooms', 'laid', 'our', 'valiant', 'knight', 'initially', 'positioned', 'room', 'must', 'fight', 'way', 'dungeon', 'rescue', 'the', 'knight', 'initial', 'health', 'point', 'represented', 'positive', 'if', 'point', 'health', 'point', 'drops', 'dies', 'some', 'rooms', 'guarded', 'knight', 'loses', 'health', 'upon', 'entering', 'rooms', 'either', 'empty', 'contain', 'magic', 'orbs', 'increase', 'health', 'in', 'order', 'reach', 'princess', 'quickly', 'knight', 'decides', 'move', 'rightward', 'downward', 'write', 'function', 'determine', 'minimum', 'initial', 'health', 'able', 'rescue', 'for', 'given', 'dungeon', 'initial', 'health', 'knight', 'must', 'least', 'follows', 'optimal', 'path', 'right', 'down', 'the', 'health', 'upper', 'any', 'room', 'contain', 'threats', 'even', 'first', 'room', 'knight', 'enters', 'room', 'princess', 'binary search', 'dynamic programming']",3
173,Binary Search Tree Iterator,"['implement', 'iterator', 'binary', 'search', 'tree', 'your', 'iterator', 'initialized', 'root', 'node', 'calling', 'return', 'next', 'smallest', 'number', 'bstiterator', 'iterator', 'new', 'return', 'return', 'return', 'return', 'return', 'return', 'return', 'return', 'return', 'run', 'average', 'time', 'uses', 'h', 'height', 'you', 'may', 'assume', 'always', 'least', 'next', 'smallest', 'number', 'bst', 'stack', 'tree', 'design']",2
172,Factorial Trailing Zeroes,"['given', 'integer', 'return', 'number', 'trailing', 'zeroes', 'trailing', 'one', 'trailing', 'your', 'solution', 'logarithmic', 'time', 'math']",1
171,Excel Sheet Column Number,"['given', 'column', 'title', 'appear', 'excel', 'return', 'corresponding', 'column', 'for', 'a', 'b', 'c', 'z', 'aa', 'ab', 'math']",1
169,Majority Element,"['given', 'array', 'size', 'find', 'majority', 'the', 'majority', 'element', 'element', 'appears', 'you', 'may', 'assume', 'array', 'majority', 'element', 'always', 'exist', 'array', 'divide and conquer', 'bit manipulation']",1
168,Excel Sheet Column Title,"['given', 'positive', 'return', 'corresponding', 'column', 'title', 'appear', 'excel', 'for', 'ab', 'math']",1
167,Two Sum II - Input array is sorted,"['given', 'array', 'integers', 'already', 'sorted', 'ascending', 'find', 'two', 'numbers', 'add', 'specific', 'target', 'the', 'function', 'twosum', 'return', 'indices', 'two', 'numbers', 'add', 'must', 'less', 'your', 'returned', 'answers', 'you', 'may', 'assume', 'input', 'would', 'exactly', 'one', 'solution', 'may', 'use', 'element', 'numbers', 'target', 'the', 'sum', 'therefore', 'array', 'two pointers', 'binary search']",1
166,Fraction to Recurring Decimal,"['given', 'two', 'integers', 'representing', 'numerator', 'denominator', 'return', 'fraction', 'string', 'if', 'fractional', 'part', 'enclose', 'repeating', 'part', 'numerator', 'denominator', 'numerator', 'denominator', 'numerator', 'denominator', 'hash table', 'math']",2
165,Compare Version Numbers,"['compare', 'two', 'version', 'numbers', 'if', 'return', 'return', 'return', 'you', 'may', 'assume', 'version', 'strings', 'contain', 'digits', 'the', 'character', 'represent', 'decimal', 'point', 'used', 'separate', 'number', 'for', 'way', 'version', 'fifth', 'revision', 'second', 'you', 'may', 'assume', 'default', 'revision', 'number', 'level', 'version', 'number', 'for', 'version', 'number', 'revision', 'number', 'first', 'second', 'level', 'revision', 'its', 'third', 'fourth', 'level', 'revision', 'number', 'ignoring', 'leading', 'represent', 'number', 'the', 'first', 'version', 'number', 'third', 'level', 'revision', 'means', 'third', 'level', 'revision', 'number', 'default', 'version', 'strings', 'composed', 'numeric', 'strings', 'separated', 'dots', 'numeric', 'strings', 'may', 'leading', 'version', 'strings', 'start', 'end', 'two', 'consecutive', 'string']",2
164,Maximum Gap,"['given', 'unsorted', 'find', 'maximum', 'difference', 'successive', 'elements', 'sorted', 'return', 'array', 'contains', 'less', 'the', 'sorted', 'form', 'array', 'maximum', 'difference', 'the', 'array', 'contains', 'less', 'therefore', 'return', 'you', 'may', 'assume', 'elements', 'array', 'integers', 'fit', 'signed', 'integer', 'try', 'solve', 'linear', 'sort']",3
162,Find Peak Element,"['a', 'peak', 'element', 'element', 'greater', 'given', 'input', 'array', 'find', 'peak', 'element', 'return', 'the', 'array', 'may', 'contain', 'multiple', 'case', 'return', 'index', 'one', 'peaks', 'you', 'may', 'imagine', 'nums', 'peak', 'element', 'function', 'return', 'index', 'number', 'nums', 'your', 'function', 'return', 'either', 'index', 'number', 'peak', 'element', 'index', 'number', 'peak', 'element', 'your', 'solution', 'logarithmic', 'array', 'binary search']",2
160,Intersection of Two Linked Lists,"['write', 'program', 'find', 'node', 'intersection', 'two', 'singly', 'linked', 'lists', 'for', 'following', 'two', 'linked', 'begin', 'intersect', 'node', 'intersectval', 'lista', 'listb', 'skipa', 'skipb', 'reference', 'node', 'value', 'input', 'the', 'intersected', 'value', 'must', 'two', 'lists', 'from', 'head', 'reads', 'from', 'head', 'reads', 'there', 'nodes', 'intersected', 'node', 'there', 'nodes', 'intersected', 'node', 'lista', 'listb', 'skipa', 'skipb', 'reference', 'node', 'value', 'input', 'intersected', 'value', 'must', 'two', 'lists', 'from', 'head', 'reads', 'from', 'head', 'reads', 'there', 'nodes', 'intersected', 'node', 'there', 'node', 'intersected', 'node', 'intersectval', 'lista', 'listb', 'skipa', 'skipb', 'input', 'from', 'head', 'reads', 'from', 'head', 'reads', 'since', 'two', 'lists', 'intersectval', 'must', 'skipa', 'skipb', 'arbitrary', 'the', 'two', 'lists', 'return', 'if', 'two', 'linked', 'lists', 'intersection', 'return', 'the', 'linked', 'lists', 'must', 'retain', 'original', 'structure', 'function', 'you', 'may', 'assume', 'cycles', 'anywhere', 'entire', 'linked', 'your', 'code', 'preferably', 'run', 'time', 'use', 'linked list']",1
155,Min Stack,"['design', 'stack', 'supports', 'retrieving', 'minimum', 'element', 'constant', 'push', 'element', 'x', 'onto', 'removes', 'element', 'top', 'get', 'top', 'retrieve', 'minimum', 'element', 'minstack', 'minstack', 'new', 'returns', 'returns', 'returns', 'stack', 'design']",1
154,Find Minimum in Rotated Sorted Array II,"['suppose', 'array', 'sorted', 'ascending', 'order', 'rotated', 'pivot', 'unknown', 'become', 'find', 'minimum', 'the', 'array', 'may', 'contain', 'this', 'follow', 'problem', 'minimum', 'rotated', 'sorted', 'would', 'allow', 'duplicates', 'affect', 'how', 'array', 'binary search']",3
153,Find Minimum in Rotated Sorted Array,"['suppose', 'array', 'sorted', 'ascending', 'order', 'rotated', 'pivot', 'unknown', 'become', 'find', 'minimum', 'you', 'may', 'assume', 'duplicate', 'exists', 'array', 'binary search']",2
152,Maximum Product Subarray,"['given', 'integer', 'find', 'contiguous', 'subarray', 'within', 'array', 'least', 'one', 'largest', 'largest', 'product', 'result', 'cannot', 'array', 'dynamic programming']",2
151,Reverse Words in a String,"['given', 'input', 'reverse', 'string', 'word', 'sky', 'sky', 'your', 'reversed', 'string', 'contain', 'leading', 'trailing', 'good', 'good', 'you', 'need', 'reduce', 'multiple', 'spaces', 'two', 'words', 'single', 'space', 'reversed', 'a', 'word', 'defined', 'sequence', 'input', 'string', 'may', 'contain', 'leading', 'trailing', 'reversed', 'string', 'contain', 'leading', 'trailing', 'you', 'need', 'reduce', 'multiple', 'spaces', 'two', 'words', 'single', 'space', 'reversed', 'follow', 'for', 'c', 'try', 'solve', 'extra', 'string']",2
150,Evaluate Reverse Polish Notation,"['evaluate', 'value', 'arithmetic', 'expression', 'reverse', 'polish', 'valid', 'operators', 'each', 'operand', 'may', 'integer', 'another', 'division', 'two', 'integers', 'truncate', 'toward', 'the', 'given', 'rpn', 'expression', 'always', 'that', 'means', 'expression', 'would', 'always', 'evaluate', 'result', 'zero', 'stack']",2
149,Max Points on a Line,"['given', 'n', 'points', 'find', 'maximum', 'number', 'points', 'lie', 'straight', 'types', 'changed', 'april', 'please', 'reset', 'default', 'code', 'definition', 'get', 'new', 'method', 'hash table', 'math']",3
148,Sort List,"['sort', 'linked', 'list', 'log', 'time', 'using', 'constant', 'space', 'linked list', 'sort']",2
147,Insertion Sort List,"['sort', 'linked', 'list', 'using', 'insertion', 'a', 'graphical', 'example', 'insertion', 'the', 'partial', 'sorted', 'list', 'initially', 'contains', 'first', 'element', 'with', 'iteration', 'one', 'element', 'removed', 'input', 'data', 'inserted', 'sorted', 'algorithm', 'insertion', 'insertion', 'sort', 'consuming', 'one', 'input', 'element', 'growing', 'sorted', 'output', 'at', 'insertion', 'sort', 'removes', 'one', 'element', 'input', 'finds', 'location', 'belongs', 'within', 'sorted', 'inserts', 'it', 'repeats', 'input', 'elements', 'linked list', 'sort']",2
146,LRU Cache,"['design', 'implement', 'data', 'structure', 'least', 'recently', 'used', 'it', 'support', 'following', 'get', 'get', 'value', 'always', 'key', 'key', 'exists', 'otherwise', 'return', 'set', 'insert', 'value', 'key', 'already', 'when', 'cache', 'reached', 'invalidate', 'least', 'recently', 'used', 'item', 'inserting', 'new', 'the', 'cache', 'initialized', 'positive', 'follow', 'could', 'operations', 'time', 'lrucache', 'cache', 'new', 'capacity', 'returns', 'evicts', 'key', 'returns', 'evicts', 'key', 'returns', 'returns', 'returns', 'design']",2
145,Binary Tree Postorder Traversal,"['given', 'binary', 'return', 'postorder', 'traversal', 'follow', 'recursive', 'solution', 'could', 'stack', 'tree']",3
144,Binary Tree Preorder Traversal,"['given', 'binary', 'return', 'preorder', 'traversal', 'follow', 'recursive', 'solution', 'could', 'stack', 'tree']",2
143,Reorder List,"['given', 'singly', 'linked', 'list', 'reorder', 'you', 'may', 'modify', 'values', 'nodes', 'may', 'given', 'reorder', 'given', 'reorder', 'linked list']",2
142,Linked List Cycle II,"['given', 'linked', 'return', 'node', 'cycle', 'if', 'return', 'to', 'represent', 'cycle', 'given', 'linked', 'use', 'integer', 'pos', 'represents', 'position', 'linked', 'list', 'tail', 'connects', 'if', 'pos', 'cycle', 'linked', 'do', 'modify', 'linked', 'head', 'pos', 'tail', 'connects', 'node', 'index', 'there', 'cycle', 'linked', 'tail', 'connects', 'second', 'head', 'pos', 'tail', 'connects', 'node', 'index', 'there', 'cycle', 'linked', 'tail', 'connects', 'first', 'head', 'pos', 'cycle', 'there', 'cycle', 'linked', 'can', 'solve', 'without', 'using', 'extra', 'linked list', 'two pointers']",2
141,Linked List Cycle,"['given', 'linked', 'determine', 'cycle', 'to', 'represent', 'cycle', 'given', 'linked', 'use', 'integer', 'pos', 'represents', 'position', 'linked', 'list', 'tail', 'connects', 'if', 'pos', 'cycle', 'linked', 'head', 'pos', 'there', 'cycle', 'linked', 'tail', 'connects', 'second', 'head', 'pos', 'there', 'cycle', 'linked', 'tail', 'connects', 'first', 'head', 'pos', 'there', 'cycle', 'linked', 'follow', 'can', 'solve', 'using', 'linked list', 'two pointers']",1
140,Word Break II,"['given', 'string', 'dictionary', 'worddict', 'containing', 'list', 'add', 'spaces', 'construct', 'sentence', 'word', 'valid', 'dictionary', 'possible', 'the', 'word', 'dictionary', 'may', 'reused', 'multiple', 'times', 'you', 'may', 'assume', 'dictionary', 'contain', 'duplicate', 'worddict', 'sand', 'worddict', 'apple', 'pen', 'pen', 'applepen', 'note', 'allowed', 'reuse', 'dictionary', 'worddict', 'dynamic programming', 'backtracking']",3
139,Word Break,"['given', 'string', 'dictionary', 'worddict', 'containing', 'list', 'determine', 'segmented', 'sequence', 'one', 'dictionary', 'the', 'word', 'dictionary', 'may', 'reused', 'multiple', 'times', 'you', 'may', 'assume', 'dictionary', 'contain', 'duplicate', 'worddict', 'return', 'true', 'segmented', 'worddict', 'return', 'true', 'segmented', 'pen', 'note', 'allowed', 'reuse', 'dictionary', 'worddict', 'dynamic programming']",2
138,Copy List with Random Pointer,"['a', 'linked', 'list', 'given', 'node', 'contains', 'additional', 'random', 'pointer', 'could', 'point', 'node', 'list', 'return', 'deep', 'copy', 'node', 'value', 'next', 'random', 'pointer', 'points', 'node', 'node', 'value', 'next', 'pointer', 'points', 'null', 'random', 'pointer', 'points', 'you', 'must', 'return', 'copy', 'given', 'reference', 'cloned', 'hash table', 'linked list']",2
137,Single Number II,"['given', 'every', 'element', 'appears', 'three', 'times', 'except', 'appears', 'exactly', 'find', 'single', 'your', 'algorithm', 'linear', 'runtime', 'could', 'implement', 'without', 'using', 'extra', 'bit manipulation']",2
136,Single Number,"['given', 'every', 'element', 'appears', 'twice', 'except', 'find', 'single', 'your', 'algorithm', 'linear', 'runtime', 'could', 'implement', 'without', 'using', 'extra', 'hash table', 'bit manipulation']",1
135,Candy,"['there', 'n', 'children', 'standing', 'each', 'child', 'assigned', 'rating', 'you', 'giving', 'candies', 'children', 'subjected', 'following', 'each', 'child', 'must', 'least', 'one', 'children', 'higher', 'rating', 'get', 'candies', 'what', 'minimum', 'candies', 'must', 'you', 'allocate', 'second', 'third', 'child', 'candies', 'you', 'allocate', 'second', 'third', 'child', 'candies', 'the', 'third', 'child', 'gets', 'candy', 'satisfies', 'two', 'greedy']",3
134,Gas Station,"['there', 'n', 'gas', 'stations', 'along', 'circular', 'amount', 'gas', 'station', 'you', 'car', 'unlimited', 'gas', 'tank', 'costs', 'gas', 'travel', 'station', 'next', 'station', 'you', 'begin', 'journey', 'empty', 'tank', 'one', 'gas', 'return', 'starting', 'gas', 'index', 'travel', 'around', 'circuit', 'clockwise', 'otherwise', 'return', 'if', 'exists', 'guaranteed', 'both', 'input', 'arrays', 'each', 'element', 'input', 'arrays', 'gas', 'cost', 'start', 'station', 'fill', 'unit', 'your', 'tank', 'travel', 'station', 'your', 'tank', 'travel', 'station', 'your', 'tank', 'travel', 'station', 'your', 'tank', 'travel', 'station', 'your', 'tank', 'travel', 'station', 'the', 'cost', 'your', 'gas', 'enough', 'travel', 'back', 'station', 'return', 'starting', 'gas', 'cost', 'you', 'start', 'station', 'enough', 'gas', 'travel', 'next', 'start', 'station', 'fill', 'unit', 'your', 'tank', 'travel', 'station', 'your', 'tank', 'travel', 'station', 'your', 'tank', 'you', 'cannot', 'travel', 'back', 'station', 'requires', 'unit', 'gas', 'travel', 'around', 'circuit', 'matter', 'greedy']",2
133,Clone Graph,"['reference', 'node', 'return', 'deep', 'copy', 'each', 'node', 'graph', 'contains', 'val', 'list', 'node', 'value', 'two', 'node', 'node', 'value', 'two', 'node', 'node', 'value', 'two', 'node', 'node', 'value', 'two', 'node', 'the', 'number', 'nodes', 'the', 'simple', 'means', 'repeated', 'edges', 'since', 'graph', 'node', 'node', 'node', 'node', 'neighbor', 'you', 'must', 'return', 'copy', 'given', 'node', 'reference', 'cloned', 'depth-first search', 'breadth-first search', 'graph']",2
132,Palindrome Partitioning II,"['given', 'string', 'partition', 'every', 'substring', 'partition', 'return', 'minimum', 'cuts', 'needed', 'palindrome', 'partitioning', 'the', 'palindrome', 'partitioning', 'could', 'produced', 'using', 'dynamic programming']",3
131,Palindrome Partitioning,"['given', 'string', 'partition', 'every', 'substring', 'partition', 'return', 'possible', 'palindrome', 'partitioning', 'backtracking']",2
130,Surrounded Regions,"['given', 'board', 'containing', 'letter', 'capture', 'regions', 'surrounded', 'a', 'region', 'captured', 'flipping', 'surrounded', 'x', 'x', 'x', 'x', 'o', 'o', 'x', 'x', 'o', 'x', 'o', 'x', 'after', 'running', 'board', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'o', 'x', 'surrounded', 'regions', 'means', 'border', 'board', 'flipped', 'any', 'border', 'connected', 'border', 'flipped', 'two', 'cells', 'connected', 'adjacent', 'cells', 'connected', 'horizontally', 'depth-first search', 'breadth-first search', 'union find']",2
129,Sum Root to Leaf Numbers,"['given', 'binary', 'tree', 'containing', 'digits', 'path', 'could', 'represent', 'an', 'example', 'path', 'represents', 'number', 'find', 'total', 'sum', 'leaf', 'node', 'the', 'path', 'represents', 'number', 'the', 'path', 'represents', 'number', 'sum', 'the', 'path', 'represents', 'number', 'the', 'path', 'represents', 'number', 'the', 'path', 'represents', 'number', 'sum', 'tree', 'depth-first search']",2
128,Longest Consecutive Sequence,"['given', 'unsorted', 'array', 'find', 'length', 'longest', 'consecutive', 'elements', 'your', 'algorithm', 'run', 'the', 'longest', 'consecutive', 'elements', 'sequence', 'therefore', 'length', 'array', 'union find']",3
127,Word Ladder,"['given', 'two', 'words', 'word', 'find', 'length', 'shortest', 'transformation', 'sequence', 'beginword', 'only', 'one', 'letter', 'changed', 'each', 'transformed', 'word', 'must', 'exist', 'word', 'note', 'beginword', 'transformed', 'return', 'transformation', 'all', 'words', 'all', 'words', 'contain', 'lowercase', 'alphabetic', 'you', 'may', 'assume', 'duplicates', 'word', 'you', 'may', 'assume', 'beginword', 'endword', 'beginword', 'endword', 'wordlist', 'as', 'one', 'shortest', 'transformation', 'return', 'length', 'beginword', 'endword', 'wordlist', 'endword', 'therefore', 'breadth-first search']",2
126,Word Ladder II,"['given', 'two', 'words', 'word', 'find', 'shortest', 'transformation', 'beginword', 'only', 'one', 'letter', 'changed', 'time', 'each', 'transformed', 'word', 'must', 'exist', 'word', 'note', 'beginword', 'transformed', 'return', 'empty', 'list', 'transformation', 'all', 'words', 'all', 'words', 'contain', 'lowercase', 'alphabetic', 'you', 'may', 'assume', 'duplicates', 'word', 'you', 'may', 'assume', 'beginword', 'endword', 'beginword', 'endword', 'wordlist', 'beginword', 'endword', 'wordlist', 'endword', 'therefore', 'array', 'string', 'backtracking', 'breadth-first search']",3
125,Valid Palindrome,"['given', 'determine', 'considering', 'alphanumeric', 'characters', 'ignoring', 'purpose', 'define', 'empty', 'string', 'valid', 'two pointers', 'string']",1
124,Binary Tree Maximum Path Sum,"['given', 'binary', 'find', 'maximum', 'path', 'for', 'path', 'defined', 'sequence', 'nodes', 'starting', 'node', 'node', 'tree', 'along', 'the', 'path', 'must', 'contain', 'least', 'one', 'node', 'need', 'go', 'tree', 'depth-first search']",3
123,Best Time to Buy and Sell Stock III,"['say', 'array', 'ith', 'element', 'price', 'given', 'stock', 'day', 'design', 'algorithm', 'find', 'maximum', 'you', 'may', 'complete', 'two', 'may', 'engage', 'multiple', 'transactions', 'time', 'must', 'sell', 'stock', 'buy', 'buy', 'day', 'sell', 'day', 'profit', 'then', 'buy', 'day', 'sell', 'day', 'profit', 'buy', 'day', 'sell', 'day', 'profit', 'note', 'cannot', 'buy', 'day', 'buy', 'day', 'sell', 'engaging', 'multiple', 'transactions', 'you', 'must', 'sell', 'buying', 'in', 'transaction', 'max', 'profit', 'array', 'dynamic programming']",3
122,Best Time to Buy and Sell Stock II,"['say', 'array', 'ith', 'element', 'price', 'given', 'stock', 'day', 'design', 'algorithm', 'find', 'maximum', 'you', 'may', 'complete', 'many', 'transactions', 'like', 'buy', 'one', 'sell', 'one', 'share', 'stock', 'multiple', 'you', 'may', 'engage', 'multiple', 'transactions', 'time', 'must', 'sell', 'stock', 'buy', 'buy', 'day', 'sell', 'day', 'profit', 'then', 'buy', 'day', 'sell', 'day', 'profit', 'buy', 'day', 'sell', 'day', 'profit', 'note', 'cannot', 'buy', 'day', 'buy', 'day', 'sell', 'engaging', 'multiple', 'transactions', 'you', 'must', 'sell', 'buying', 'in', 'transaction', 'max', 'profit', 'array', 'greedy']",1
121,Best Time to Buy and Sell Stock,"['say', 'array', 'ith', 'element', 'price', 'given', 'stock', 'day', 'if', 'permitted', 'complete', 'one', 'transaction', 'buy', 'one', 'sell', 'one', 'share', 'design', 'algorithm', 'find', 'maximum', 'note', 'cannot', 'sell', 'stock', 'buy', 'buy', 'day', 'sell', 'day', 'profit', 'not', 'selling', 'price', 'needs', 'larger', 'buying', 'in', 'transaction', 'max', 'profit', 'array', 'dynamic programming']",1
120,Triangle,"['given', 'find', 'minimum', 'path', 'sum', 'top', 'each', 'step', 'may', 'move', 'adjacent', 'numbers', 'row', 'for', 'given', 'following', 'triangle', 'the', 'minimum', 'path', 'sum', 'top', 'bottom', 'bonus', 'point', 'able', 'using', 'extra', 'n', 'total', 'number', 'rows', 'array', 'dynamic programming']",2
119,Pascal's Triangle II,"['given', 'k', 'return', 'row', 'note', 'row', 'index', 'starts', 'in', 'number', 'sum', 'two', 'numbers', 'directly', 'follow', 'could', 'optimize', 'algorithm', 'use', 'extra', 'array']",1
118,Pascal's Triangle,"['given', 'generate', 'first', 'numrows', 'in', 'number', 'sum', 'two', 'numbers', 'directly', 'array']",1
117,Populating Next Right Pointers in Each Node II,"['given', 'binary', 'tree', 'struct', 'node', 'int', 'node', 'node', 'node', 'populate', 'next', 'pointer', 'point', 'next', 'right', 'if', 'next', 'right', 'next', 'pointer', 'set', 'next', 'pointers', 'set', 'given', 'binary', 'tree', 'function', 'populate', 'next', 'pointer', 'point', 'next', 'right', 'like', 'figure', 'you', 'may', 'use', 'constant', 'extra', 'recursive', 'approach', 'implicit', 'stack', 'space', 'count', 'extra', 'space', 'tree', 'depth-first search']",2
116,Populating Next Right Pointers in Each Node,"['you', 'given', 'perfect', 'binary', 'leaves', 'every', 'parent', 'two', 'the', 'binary', 'tree', 'following', 'struct', 'node', 'int', 'node', 'node', 'node', 'populate', 'next', 'pointer', 'point', 'next', 'right', 'if', 'next', 'right', 'next', 'pointer', 'set', 'next', 'pointers', 'set', 'given', 'perfect', 'binary', 'tree', 'function', 'populate', 'next', 'pointer', 'point', 'next', 'right', 'like', 'figure', 'you', 'may', 'use', 'constant', 'extra', 'recursive', 'approach', 'implicit', 'stack', 'space', 'count', 'extra', 'space', 'tree', 'depth-first search']",2
115,Distinct Subsequences,"['given', 'string', 's', 'string', 'count', 'number', 'distinct', 'subsequences', 's', 'equals', 'a', 'subsequence', 'string', 'new', 'string', 'formed', 'original', 'string', 'deleting', 'characters', 'without', 'disturbing', 'relative', 'positions', 'remaining', 'subsequence', 's', 't', 'as', 'shown', 'ways', 'generate', 'caret', 'symbol', 'means', 'chosen', 's', 't', 'as', 'shown', 'ways', 'generate', 'caret', 'symbol', 'means', 'chosen', 'string', 'dynamic programming']",3
114,Flatten Binary Tree to Linked List,"['given', 'binary', 'flatten', 'linked', 'list', 'for', 'given', 'following', 'the', 'flattened', 'tree', 'look', 'tree', 'depth-first search']",2
113,Path Sum II,"['given', 'binary', 'tree', 'find', 'paths', 'sum', 'equals', 'given', 'leaf', 'node', 'given', 'binary', 'tree', 'sum', 'tree', 'depth-first search']",2
112,Path Sum,"['given', 'binary', 'tree', 'determine', 'tree', 'path', 'adding', 'values', 'along', 'path', 'equals', 'given', 'leaf', 'node', 'given', 'binary', 'tree', 'sum', 'return', 'exist', 'path', 'sum', 'tree', 'depth-first search']",1
111,Minimum Depth of Binary Tree,"['given', 'binary', 'find', 'minimum', 'the', 'minimum', 'depth', 'number', 'nodes', 'along', 'shortest', 'path', 'root', 'node', 'nearest', 'leaf', 'leaf', 'node', 'given', 'binary', 'tree', 'return', 'tree', 'depth-first search', 'breadth-first search']",1
110,Balanced Binary Tree,"['given', 'binary', 'determine', 'for', 'binary', 'tree', 'defined', 'binary', 'tree', 'depth', 'two', 'subtrees', 'every', 'node', 'never', 'differ', 'given', 'following', 'tree', 'return', 'given', 'following', 'tree', 'return', 'tree', 'depth-first search']",1
109,Convert Sorted List to Binary Search Tree,"['given', 'singly', 'linked', 'list', 'elements', 'sorted', 'ascending', 'convert', 'height', 'balanced', 'for', 'binary', 'tree', 'defined', 'binary', 'tree', 'depth', 'two', 'subtrees', 'every', 'node', 'never', 'differ', 'given', 'sorted', 'linked', 'one', 'possible', 'answer', 'represents', 'following', 'height', 'balanced', 'linked list', 'depth-first search']",2
108,Convert Sorted Array to Binary Search Tree,"['given', 'array', 'elements', 'sorted', 'ascending', 'convert', 'height', 'balanced', 'for', 'binary', 'tree', 'defined', 'binary', 'tree', 'depth', 'two', 'subtrees', 'every', 'node', 'never', 'differ', 'given', 'sorted', 'one', 'possible', 'answer', 'represents', 'following', 'height', 'balanced', 'tree', 'depth-first search']",1
107,Binary Tree Level Order Traversal II,"['given', 'binary', 'return', 'level', 'order', 'traversal', 'left', 'level', 'level', 'leaf', 'for', 'given', 'binary', 'tree', 'return', 'level', 'order', 'traversal', 'tree', 'breadth-first search']",1
106,Construct Binary Tree from Inorder and Postorder Traversal,"['given', 'inorder', 'postorder', 'traversal', 'construct', 'binary', 'you', 'may', 'assume', 'duplicates', 'exist', 'for', 'given', 'inorder', 'postorder', 'return', 'following', 'binary', 'array', 'tree', 'depth-first search']",2
105,Construct Binary Tree from Preorder and Inorder Traversal,"['given', 'preorder', 'inorder', 'traversal', 'construct', 'binary', 'you', 'may', 'assume', 'duplicates', 'exist', 'for', 'given', 'preorder', 'inorder', 'return', 'following', 'binary', 'array', 'tree', 'depth-first search']",2
104,Maximum Depth of Binary Tree,"['given', 'binary', 'find', 'maximum', 'the', 'maximum', 'depth', 'number', 'nodes', 'along', 'longest', 'path', 'root', 'node', 'farthest', 'leaf', 'leaf', 'node', 'given', 'binary', 'tree', 'return', 'depth', 'tree', 'depth-first search']",1
103,Binary Tree Zigzag Level Order Traversal,"['given', 'binary', 'return', 'zigzag', 'level', 'order', 'traversal', 'left', 'right', 'left', 'next', 'level', 'alternate', 'for', 'given', 'binary', 'tree', 'return', 'zigzag', 'level', 'order', 'traversal', 'stack', 'tree', 'breadth-first search']",2
102,Binary Tree Level Order Traversal,"['given', 'binary', 'return', 'level', 'order', 'traversal', 'left', 'level', 'for', 'given', 'binary', 'tree', 'return', 'level', 'order', 'traversal', 'tree', 'breadth-first search']",2
101,Symmetric Tree,"['given', 'binary', 'check', 'whether', 'mirror', 'symmetric', 'around', 'for', 'binary', 'tree', 'but', 'following', 'bonus', 'points', 'could', 'solve', 'recursively', 'tree', 'depth-first search', 'breadth-first search']",1
100,Same Tree,"['given', 'two', 'binary', 'write', 'function', 'check', 'two', 'binary', 'trees', 'considered', 'structurally', 'identical', 'nodes', 'tree', 'depth-first search']",1
99,Recover Binary Search Tree,"['two', 'elements', 'binary', 'search', 'tree', 'swapped', 'recover', 'tree', 'without', 'changing', 'follow', 'a', 'solution', 'using', 'space', 'pretty', 'straight', 'could', 'devise', 'constant', 'space', 'tree', 'depth-first search']",3
98,Validate Binary Search Tree,"['given', 'binary', 'determine', 'valid', 'binary', 'search', 'tree', 'assume', 'bst', 'defined', 'the', 'left', 'subtree', 'node', 'contains', 'nodes', 'keys', 'less', 'the', 'right', 'subtree', 'node', 'contains', 'nodes', 'keys', 'greater', 'both', 'left', 'right', 'subtrees', 'must', 'also', 'binary', 'search', 'the', 'root', 'value', 'right', 'value', 'tree', 'depth-first search']",2
97,Interleaving String,"['given', 'find', 'whether', 'formed', 'interleaving', 'string', 'dynamic programming']",3
96,Unique Binary Search Trees,"['given', 'many', 'structurally', 'unique', 'search', 'store', 'values', 'given', 'n', 'total', 'unique', 'dynamic programming', 'tree']",2
95,Unique Binary Search Trees II,"['given', 'integer', 'generate', 'structurally', 'unique', 'search', 'store', 'values', 'the', 'output', 'corresponds', 'unique', 'shown', 'dynamic programming', 'tree']",2
94,Binary Tree Inorder Traversal,"['given', 'binary', 'return', 'inorder', 'traversal', 'follow', 'recursive', 'solution', 'could', 'hash table', 'stack', 'tree']",2
93,Restore IP Addresses,"['given', 'string', 'containing', 'restore', 'returning', 'possible', 'valid', 'ip', 'address', 'string', 'backtracking']",2
92,Reverse Linked List II,"['reverse', 'linked', 'list', 'position', 'do', 'n', 'length', 'n', 'linked list']",2
91,Decode Ways,"['a', 'message', 'containing', 'letters', 'encoded', 'numbers', 'using', 'following', 'given', 'string', 'containing', 'determine', 'total', 'number', 'ways', 'decode', 'could', 'decoded', 'could', 'decoded', 'string', 'dynamic programming']",2
90,Subsets II,"['given', 'collection', 'integers', 'might', 'contain', 'return', 'possible', 'subsets', 'power', 'the', 'solution', 'set', 'must', 'contain', 'duplicate', 'array', 'backtracking']",2
89,Gray Code,"['the', 'gray', 'code', 'binary', 'numeral', 'system', 'two', 'successive', 'values', 'differ', 'one', 'given', 'integer', 'n', 'representing', 'total', 'number', 'bits', 'print', 'sequence', 'gray', 'a', 'gray', 'code', 'sequence', 'must', 'begin', 'for', 'gray', 'code', 'sequence', 'may', 'uniquely', 'for', 'also', 'valid', 'gray', 'code', 'we', 'define', 'gray', 'code', 'sequence', 'begin', 'a', 'gray', 'code', 'sequence', 'n', 'size', 'n', 'size', 'n', 'gray', 'code', 'sequence', 'backtracking']",2
88,Merge Sorted Array,"['given', 'two', 'sorted', 'integer', 'arrays', 'merge', 'one', 'sorted', 'the', 'number', 'elements', 'initialized', 'n', 'you', 'may', 'assume', 'enough', 'space', 'greater', 'equal', 'hold', 'additional', 'elements', 'n', 'array', 'two pointers']",1
87,Scramble String,"['given', 'string', 'may', 'represent', 'binary', 'tree', 'partitioning', 'two', 'substrings', 'below', 'one', 'possible', 'representation', 'gr', 'g', 'r', 'e', 'to', 'scramble', 'may', 'choose', 'node', 'swap', 'two', 'for', 'choose', 'node', 'swap', 'two', 'produces', 'scrambled', 'string', 'rg', 'r', 'g', 'e', 'we', 'say', 'scrambled', 'string', 'continue', 'swap', 'children', 'nodes', 'produces', 'scrambled', 'string', 'rg', 'r', 'g', 'ta', 'we', 'say', 'scrambled', 'string', 'given', 'two', 'strings', 'determine', 'scrambled', 'string', 'false', 'string', 'dynamic programming']",3
86,Partition List,"['given', 'linked', 'list', 'value', 'partition', 'nodes', 'less', 'x', 'come', 'nodes', 'greater', 'equal', 'you', 'preserve', 'original', 'relative', 'order', 'nodes', 'two', 'head', 'x', 'linked list', 'two pointers']",2
85,Maximal Rectangle,"['given', 'binary', 'matrix', 'filled', 'find', 'largest', 'rectangle', 'containing', 'return', 'array', 'hash table', 'dynamic programming', 'stack']",3
84,Largest Rectangle in Histogram,"['given', 'n', 'integers', 'representing', 'bar', 'height', 'width', 'bar', 'find', 'area', 'largest', 'rectangle', 'above', 'histogram', 'width', 'bar', 'given', 'height', 'the', 'largest', 'rectangle', 'shown', 'shaded', 'area', 'array', 'stack']",3
83,Remove Duplicates from Sorted List,"['given', 'sorted', 'linked', 'delete', 'duplicates', 'element', 'appear', 'linked list']",1
82,Remove Duplicates from Sorted List II,"['given', 'sorted', 'linked', 'delete', 'nodes', 'duplicate', 'leaving', 'distinct', 'numbers', 'original', 'linked list']",2
81,Search in Rotated Sorted Array II,"['suppose', 'array', 'sorted', 'ascending', 'order', 'rotated', 'pivot', 'unknown', 'might', 'become', 'you', 'given', 'target', 'value', 'if', 'found', 'array', 'return', 'otherwise', 'return', 'nums', 'target', 'nums', 'target', 'false', 'follow', 'this', 'follow', 'problem', 'rotated', 'sorted', 'nums', 'may', 'contain', 'would', 'affect', 'how', 'array', 'binary search']",2
80,Remove Duplicates from Sorted Array II,"['given', 'sorted', 'array', 'remove', 'duplicates', 'duplicates', 'appeared', 'return', 'new', 'do', 'allocate', 'extra', 'space', 'another', 'must', 'modifying', 'input', 'array', 'extra', 'given', 'nums', 'your', 'function', 'return', 'length', 'first', 'five', 'elements', 'nums', 'it', 'matter', 'leave', 'beyond', 'returned', 'given', 'nums', 'your', 'function', 'return', 'length', 'first', 'seven', 'elements', 'nums', 'modified', 'it', 'matter', 'values', 'set', 'returned', 'confused', 'returned', 'value', 'integer', 'answer', 'note', 'input', 'array', 'passed', 'means', 'modification', 'input', 'array', 'known', 'caller', 'internally', 'think', 'nums', 'passed', 'without', 'making', 'int', 'len', 'modification', 'nums', 'function', 'would', 'known', 'using', 'length', 'returned', 'prints', 'first', 'len', 'array', 'two pointers']",2
79,Word Search,"['given', 'board', 'find', 'word', 'exists', 'the', 'word', 'constructed', 'letters', 'sequentially', 'adjacent', 'cells', 'horizontally', 'vertically', 'the', 'letter', 'cell', 'may', 'used', 'board', 'given', 'word', 'return', 'given', 'word', 'return', 'given', 'word', 'return', 'array', 'backtracking']",2
78,Subsets,"['given', 'set', 'distinct', 'return', 'possible', 'subsets', 'power', 'the', 'solution', 'set', 'must', 'contain', 'duplicate', 'nums', 'array', 'backtracking', 'bit manipulation']",2
77,Combinations,"['given', 'two', 'integers', 'n', 'return', 'possible', 'combinations', 'k', 'numbers', 'k', 'backtracking']",2
76,Minimum Window Substring,"['given', 'string', 's', 'string', 'find', 'minimum', 'window', 's', 'contain', 'characters', 't', 'complexity', 's', 't', 'if', 'window', 's', 'covers', 'characters', 'return', 'empty', 'string', 'if', 'guaranteed', 'always', 'one', 'unique', 'minimum', 'window', 'hash table', 'two pointers', 'string', 'sliding window']",3
75,Sort Colors,"['given', 'array', 'n', 'objects', 'colored', 'white', 'sort', 'objects', 'color', 'colors', 'order', 'white', 'use', 'integers', 'represent', 'color', 'blue', 'suppose', 'use', 'sort', 'function', 'follow', 'a', 'rather', 'straight', 'forward', 'solution', 'algorithm', 'using', 'counting', 'iterate', 'array', 'counting', 'number', 'overwrite', 'array', 'total', 'number', 'followed', 'could', 'come', 'algorithm', 'using', 'constant', 'array', 'two pointers', 'sort']",2
74,Search a 2D Matrix,"['write', 'efficient', 'algorithm', 'searches', 'value', 'x', 'n', 'this', 'matrix', 'following', 'integers', 'row', 'sorted', 'left', 'the', 'first', 'integer', 'row', 'greater', 'last', 'integer', 'previous', 'matrix', 'target', 'matrix', 'target', 'false', 'array', 'binary search']",2
73,Set Matrix Zeroes,"['given', 'x', 'n', 'element', 'set', 'entire', 'row', 'column', 'do', 'follow', 'a', 'straight', 'forward', 'solution', 'using', 'space', 'probably', 'bad', 'a', 'simple', 'improvement', 'uses', 'still', 'best', 'could', 'devise', 'constant', 'space', 'array']",2
72,Edit Distance,"['given', 'two', 'words', 'find', 'minimum', 'number', 'operations', 'required', 'convert', 'you', 'following', 'operations', 'permitted', 'insert', 'character', 'delete', 'character', 'replace', 'character', 'horse', 'rorse', 'rorse', 'rose', 'rose', 'ros', 'intention', 'inention', 'inention', 'enention', 'enention', 'exention', 'exention', 'exection', 'exection', 'execution', 'string', 'dynamic programming']",3
71,Simplify Path,"['given', 'absolute', 'path', 'file', 'simplify', 'or', 'convert', 'canonical', 'in', 'file', 'period', 'current', 'double', 'period', 'directory', 'for', 'note', 'returned', 'canonical', 'path', 'must', 'always', 'slash', 'must', 'single', 'slash', 'two', 'directory', 'last', 'directory', 'name', 'must', 'trailing', 'canonical', 'path', 'must', 'shortest', 'absolute', 'note', 'trailing', 'slash', 'last', 'directory', 'going', 'one', 'level', 'root', 'directory', 'root', 'level', 'highest', 'level', 'in', 'canonical', 'multiple', 'consecutive', 'slashes', 'replaced', 'single', 'string', 'stack']",2
70,Climbing Stairs,"['you', 'climbing', 'stair', 'it', 'takes', 'n', 'steps', 'reach', 'each', 'time', 'either', 'climb', 'in', 'many', 'distinct', 'ways', 'climb', 'given', 'n', 'positive', 'there', 'two', 'ways', 'climb', 'step', 'there', 'three', 'ways', 'climb', 'step', 'step', 'step', 'steps', 'dynamic programming']",1
69,Sqrt(x),"['implement', 'int', 'compute', 'return', 'square', 'root', 'guaranteed', 'since', 'return', 'decimal', 'digits', 'truncated', 'integer', 'part', 'the', 'square', 'root', 'since', 'decimal', 'part', 'math', 'binary search']",1
68,Text Justification,"['given', 'array', 'words', 'format', 'text', 'line', 'exactly', 'maxwidth', 'characters', 'fully', 'you', 'pack', 'words', 'greedy', 'pack', 'many', 'words', 'pad', 'extra', 'spaces', 'necessary', 'line', 'exactly', 'maxwidth', 'extra', 'spaces', 'words', 'distributed', 'evenly', 'if', 'number', 'spaces', 'line', 'divide', 'evenly', 'empty', 'slots', 'left', 'assigned', 'spaces', 'slots', 'for', 'last', 'line', 'left', 'justified', 'extra', 'space', 'inserted', 'a', 'word', 'defined', 'character', 'sequence', 'characters', 'each', 'length', 'greater', 'exceed', 'the', 'input', 'array', 'least', 'one', 'words', 'maxwidth', 'words', 'maxwidth', 'must', 'note', 'last', 'line', 'instead', 'last', 'line', 'must', 'instead', 'note', 'second', 'line', 'also', 'becase', 'contains', 'one', 'words', 'maxwidth', 'explain', 'string']",3
67,Add Binary,"['given', 'two', 'binary', 'return', 'sum', 'binary', 'the', 'input', 'strings', 'contains', 'characters', 'b', 'b', 'math', 'string']",1
66,Plus One,"['given', 'array', 'plus', 'one', 'the', 'digits', 'stored', 'significant', 'digit', 'head', 'element', 'array', 'contain', 'single', 'you', 'may', 'assume', 'integer', 'contain', 'leading', 'except', 'number', 'the', 'array', 'represents', 'integer', 'the', 'array', 'represents', 'integer', 'array']",1
65,Valid Number,"['validate', 'given', 'string', 'interpreted', 'decimal', 'some', 'true', 'true', 'false', 'false', 'true', 'true', 'false', 'false', 'true', 'false', 'true', 'false', 'false', 'false', 'it', 'intended', 'problem', 'statement', 'you', 'gather', 'requirements', 'front', 'implementing', 'list', 'characters', 'valid', 'decimal', 'numbers', 'exponent', 'sign', 'decimal', 'point', 'of', 'context', 'characters', 'also', 'matters', 'update', 'the', 'signature', 'function', 'if', 'still', 'see', 'function', 'signature', 'accepts', 'const', 'char', 'please', 'click', 'reload', 'button', 'reset', 'code', 'math', 'string']",3
64,Minimum Path Sum,"['given', 'x', 'n', 'grid', 'filled', 'find', 'path', 'top', 'left', 'bottom', 'right', 'minimizes', 'sum', 'numbers', 'along', 'you', 'move', 'either', 'right', 'point', 'because', 'path', 'minimizes', 'array', 'dynamic programming']",2
63,Unique Paths II,"['a', 'robot', 'located', 'corner', 'x', 'n', 'grid', 'diagram', 'the', 'robot', 'move', 'either', 'right', 'point', 'the', 'robot', 'trying', 'reach', 'corner', 'grid', 'diagram', 'now', 'consider', 'obstacles', 'added', 'how', 'many', 'unique', 'paths', 'would', 'an', 'obstacle', 'empty', 'space', 'marked', 'respectively', 'n', 'there', 'one', 'obstacle', 'middle', 'grid', 'there', 'two', 'ways', 'reach', 'right', 'right', 'down', 'down', 'down', 'right', 'array', 'dynamic programming']",2
62,Unique Paths,"['a', 'robot', 'located', 'corner', 'x', 'n', 'grid', 'diagram', 'the', 'robot', 'move', 'either', 'right', 'point', 'the', 'robot', 'trying', 'reach', 'corner', 'grid', 'diagram', 'how', 'many', 'possible', 'unique', 'paths', 'above', 'x', 'how', 'many', 'possible', 'unique', 'paths', 'n', 'n', 'from', 'total', 'ways', 'reach', 'right', 'right', 'right', 'down', 'down', 'right', 'n', 'array', 'dynamic programming']",2
61,Rotate List,"['given', 'rotate', 'list', 'right', 'k', 'k', 'k', 'rotate', 'steps', 'rotate', 'steps', 'k', 'rotate', 'steps', 'rotate', 'steps', 'rotate', 'steps', 'rotate', 'steps', 'linked list', 'two pointers']",2
60,Permutation Sequence,"['the', 'set', 'contains', 'total', 'unique', 'by', 'listing', 'labeling', 'permutations', 'get', 'following', 'sequence', 'n', 'given', 'n', 'return', 'kth', 'permutation', 'given', 'n', 'n', 'k', 'n', 'k', 'math', 'backtracking']",2
59,Spiral Matrix II,"['given', 'positive', 'integer', 'generate', 'square', 'matrix', 'filled', 'elements', 'spiral', 'array']",2
58,Length of Last Word,"['given', 'string', 'consists', 'alphabets', 'empty', 'space', 'characters', 'return', 'length', 'last', 'word', 'if', 'last', 'word', 'return', 'a', 'word', 'defined', 'character', 'sequence', 'consists', 'characters', 'string']",1
57,Insert Interval,"['given', 'set', 'insert', 'new', 'interval', 'intervals', 'you', 'may', 'assume', 'intervals', 'initially', 'sorted', 'according', 'start', 'intervals', 'newinterval', 'intervals', 'newinterval', 'because', 'new', 'interval', 'overlaps', 'types', 'changed', 'april', 'please', 'reset', 'default', 'code', 'definition', 'get', 'new', 'method', 'array', 'sort']",3
56,Merge Intervals,"['given', 'collection', 'merge', 'overlapping', 'since', 'intervals', 'merge', 'intervals', 'considered', 'types', 'changed', 'april', 'please', 'reset', 'default', 'code', 'definition', 'get', 'new', 'method', 'array', 'sort']",2
55,Jump Game,"['given', 'array', 'initially', 'positioned', 'first', 'index', 'each', 'element', 'array', 'represents', 'maximum', 'jump', 'length', 'determine', 'able', 'reach', 'last', 'jump', 'step', 'index', 'steps', 'last', 'you', 'always', 'arrive', 'index', 'matter', 'its', 'jump', 'length', 'makes', 'impossible', 'reach', 'last', 'array', 'greedy']",2
54,Spiral Matrix,"['given', 'matrix', 'x', 'n', 'elements', 'n', 'return', 'elements', 'matrix', 'spiral', 'array']",2
53,Maximum Subarray,"['given', 'integer', 'array', 'find', 'contiguous', 'least', 'one', 'largest', 'sum', 'return', 'largest', 'sum', 'follow', 'if', 'figured', 'try', 'coding', 'another', 'solution', 'using', 'divide', 'conquer', 'array', 'divide and conquer', 'dynamic programming']",1
52,N-Queens II,"['the', 'puzzle', 'problem', 'placing', 'n', 'queens', 'chessboard', 'two', 'queens', 'attack', 'given', 'return', 'number', 'solutions', 'there', 'two', 'distinct', 'solutions', 'puzzle', 'shown', 'solution', 'solution', 'backtracking']",3
51,N-Queens,"['the', 'puzzle', 'problem', 'placing', 'n', 'queens', 'chessboard', 'two', 'queens', 'attack', 'given', 'integer', 'return', 'distinct', 'solutions', 'each', 'solution', 'contains', 'distinct', 'board', 'configuration', 'indicate', 'queen', 'empty', 'space', 'solution', 'solution', 'there', 'exist', 'two', 'distinct', 'solutions', 'puzzle', 'shown', 'backtracking']",3
50,"Pow(x, n)","['implement', 'raised', 'power', 'n', 'x', 'n', 'signed', 'within', 'math', 'binary search']",2
49,Group Anagrams,"['given', 'array', 'group', 'anagrams', 'all', 'inputs', 'the', 'order', 'output', 'hash table', 'string']",2
48,Rotate Image,"['you', 'given', 'n', 'x', 'n', 'matrix', 'representing', 'rotate', 'image', 'degrees', 'you', 'rotate', 'image', 'means', 'modify', 'input', 'matrix', 'do', 'not', 'allocate', 'another', 'matrix', 'given', 'input', 'matrix', 'rotate', 'input', 'matrix', 'given', 'input', 'matrix', 'rotate', 'input', 'matrix', 'array']",2
47,Permutations II,"['given', 'collection', 'numbers', 'might', 'contain', 'return', 'possible', 'unique', 'backtracking']",2
46,Permutations,"['given', 'collection', 'distinct', 'return', 'possible', 'backtracking']",2
45,Jump Game II,"['given', 'array', 'initially', 'positioned', 'first', 'index', 'each', 'element', 'array', 'represents', 'maximum', 'jump', 'length', 'your', 'goal', 'reach', 'last', 'index', 'minimum', 'number', 'the', 'minimum', 'number', 'jumps', 'reach', 'last', 'index', 'jump', 'step', 'index', 'steps', 'last', 'you', 'assume', 'always', 'reach', 'last', 'array', 'greedy']",3
44,Wildcard Matching,"['given', 'input', 'string', 'pattern', 'implement', 'wildcard', 'pattern', 'matching', 'support', 'matches', 'single', 'matches', 'sequence', 'characters', 'empty', 'the', 'matching', 'cover', 'entire', 'input', 'string', 'empty', 'contains', 'lowercase', 'letters', 'p', 'could', 'empty', 'contains', 'lowercase', 'letters', 'characters', 'like', 'p', 'match', 'entire', 'string', 'p', 'matches', 'p', 'matches', 'second', 'letter', 'match', 'p', 'first', 'matches', 'empty', 'second', 'matches', 'substring', 'p', 'string', 'dynamic programming', 'backtracking', 'greedy']",3
43,Multiply Strings,"['given', 'two', 'integers', 'represented', 'return', 'product', 'also', 'represented', 'the', 'length', 'both', 'digits', 'both', 'contain', 'leading', 'except', 'number', 'you', 'must', 'use', 'biginteger', 'library', 'convert', 'inputs', 'integer', 'math', 'string']",2
42,Trapping Rain Water,"['given', 'n', 'integers', 'representing', 'elevation', 'map', 'width', 'bar', 'compute', 'much', 'water', 'able', 'trap', 'the', 'elevation', 'map', 'represented', 'array', 'in', 'units', 'rain', 'water', 'thanks', 'marcos', 'contributing', 'array', 'two pointers', 'stack']",3
41,First Missing Positive,"['given', 'unsorted', 'integer', 'find', 'smallest', 'your', 'algorithm', 'run', 'time', 'uses', 'constant', 'extra', 'array']",3
40,Combination Sum II,"['given', 'collection', 'candidate', 'numbers', 'target', 'number', 'find', 'unique', 'combinations', 'candidate', 'numbers', 'sums', 'each', 'number', 'used', 'all', 'numbers', 'positive', 'the', 'solution', 'set', 'must', 'contain', 'duplicate', 'candidates', 'target', 'a', 'solution', 'set', 'candidates', 'target', 'a', 'solution', 'set', 'array', 'backtracking']",2
39,Combination Sum,"['given', 'set', 'candidate', 'numbers', 'target', 'number', 'find', 'unique', 'combinations', 'candidate', 'numbers', 'sums', 'the', 'repeated', 'number', 'may', 'chosen', 'number', 'all', 'numbers', 'positive', 'the', 'solution', 'set', 'must', 'contain', 'duplicate', 'candidates', 'target', 'a', 'solution', 'set', 'candidates', 'target', 'a', 'solution', 'set', 'array', 'backtracking']",2
38,Count and Say,"['the', 'sequence', 'sequence', 'integers', 'first', 'five', 'terms', 'read', 'read', 'read', 'one', 'given', 'integer', 'n', 'generate', 'nth', 'term', 'each', 'term', 'sequence', 'integers', 'represented', 'string']",1
37,Sudoku Solver,"['write', 'program', 'solve', 'sudoku', 'puzzle', 'filling', 'empty', 'solution', 'must', 'satisfy', 'following', 'each', 'must', 'occur', 'each', 'each', 'must', 'occur', 'exactly', 'empty', 'cells', 'indicated', 'character', 'a', 'sudoku', 'solution', 'numbers', 'marked', 'the', 'given', 'digits', 'character', 'you', 'may', 'assume', 'given', 'sudoku', 'puzzle', 'single', 'unique', 'the', 'given', 'board', 'size', 'always', 'hash table', 'backtracking']",3
36,Valid Sudoku,"['determine', 'sudoku', 'filled', 'cells', 'need', 'following', 'each', 'contain', 'without', 'each', 'column', 'must', 'contain', 'each', 'grid', 'must', 'contain', 'a', 'partially', 'filled', 'sudoku', 'the', 'sudoku', 'board', 'could', 'partially', 'empty', 'cells', 'filled', 'character', 'same', 'except', 'top', 'left', 'corner', 'modified', 'since', 'two', 'top', 'left', 'a', 'sudoku', 'board', 'could', 'valid', 'necessarily', 'only', 'filled', 'cells', 'need', 'validated', 'according', 'the', 'given', 'digits', 'character', 'the', 'given', 'board', 'size', 'always', 'hash table']",2
35,Search Insert Position,"['given', 'sorted', 'array', 'target', 'return', 'index', 'target', 'if', 'return', 'index', 'would', 'inserted', 'you', 'may', 'assume', 'duplicates', 'array', 'binary search']",1
34,Find First and Last Position of Element in Sorted Array,"['given', 'array', 'integers', 'nums', 'sorted', 'ascending', 'find', 'starting', 'ending', 'position', 'given', 'target', 'your', 'runtime', 'complexity', 'must', 'order', 'if', 'target', 'found', 'return', 'nums', 'target', 'nums', 'target', 'array', 'binary search']",2
33,Search in Rotated Sorted Array,"['suppose', 'array', 'sorted', 'ascending', 'order', 'rotated', 'pivot', 'unknown', 'might', 'become', 'you', 'given', 'target', 'value', 'if', 'found', 'array', 'return', 'otherwise', 'return', 'you', 'may', 'assume', 'duplicate', 'exists', 'your', 'runtime', 'complexity', 'must', 'order', 'nums', 'target', 'nums', 'target', 'array', 'binary search']",2
32,Longest Valid Parentheses,"['given', 'string', 'containing', 'characters', 'find', 'length', 'longest', 'valid', 'parentheses', 'the', 'longest', 'valid', 'parentheses', 'substring', 'the', 'longest', 'valid', 'parentheses', 'substring', 'string', 'dynamic programming']",3
31,Next Permutation,"['implement', 'next', 'rearranges', 'numbers', 'lexicographically', 'next', 'greater', 'permutation', 'if', 'arrangement', 'must', 'rearrange', 'lowest', 'possible', 'order', 'sorted', 'ascending', 'the', 'replacement', 'must', 'use', 'here', 'inputs', 'column', 'corresponding', 'outputs', 'array']",2
30,Substring with Concatenation of All Words,"['you', 'given', 'list', 'find', 'starting', 'indices', 'concatenation', 'word', 'words', 'exactly', 'without', 'intervening', 'words', 'substrings', 'starting', 'index', 'the', 'output', 'order', 'returning', 'fine', 'words', 'hash table', 'two pointers', 'string']",3
29,Divide Two Integers,"['given', 'two', 'integers', 'dividend', 'divide', 'two', 'integers', 'without', 'using', 'division', 'mod', 'return', 'quotient', 'dividing', 'dividend', 'the', 'integer', 'division', 'truncate', 'toward', 'dividend', 'divisor', 'dividend', 'divisor', 'both', 'dividend', 'the', 'divisor', 'never', 'assume', 'dealing', 'environment', 'could', 'store', 'integers', 'within', 'signed', 'integer', 'for', 'purpose', 'assume', 'function', 'returns', 'division', 'math', 'binary search']",2
28,Implement strStr(),"['implement', 'return', 'index', 'first', 'occurrence', 'needle', 'needle', 'part', 'haystack', 'needle', 'haystack', 'needle', 'what', 'return', 'needle', 'empty', 'this', 'great', 'question', 'ask', 'for', 'purpose', 'return', 'needle', 'empty', 'this', 'consistent', 'two pointers', 'string']",1
27,Remove Element,"['given', 'array', 'nums', 'value', 'remove', 'instances', 'value', 'return', 'new', 'do', 'allocate', 'extra', 'space', 'another', 'must', 'modifying', 'input', 'array', 'extra', 'the', 'order', 'elements', 'it', 'matter', 'leave', 'beyond', 'new', 'given', 'nums', 'val', 'your', 'function', 'return', 'length', 'first', 'two', 'elements', 'nums', 'it', 'matter', 'leave', 'beyond', 'returned', 'given', 'nums', 'val', 'your', 'function', 'return', 'length', 'first', 'five', 'elements', 'nums', 'note', 'order', 'five', 'elements', 'it', 'matter', 'values', 'set', 'returned', 'confused', 'returned', 'value', 'integer', 'answer', 'note', 'input', 'array', 'passed', 'means', 'modification', 'input', 'array', 'known', 'caller', 'internally', 'think', 'nums', 'passed', 'without', 'making', 'int', 'len', 'modification', 'nums', 'function', 'would', 'known', 'using', 'length', 'returned', 'prints', 'first', 'len', 'array', 'two pointers']",1
26,Remove Duplicates from Sorted Array,"['given', 'sorted', 'array', 'remove', 'duplicates', 'element', 'appear', 'return', 'new', 'do', 'allocate', 'extra', 'space', 'another', 'must', 'modifying', 'input', 'array', 'extra', 'given', 'nums', 'your', 'function', 'return', 'length', 'first', 'two', 'elements', 'nums', 'it', 'matter', 'leave', 'beyond', 'returned', 'given', 'nums', 'your', 'function', 'return', 'length', 'first', 'five', 'elements', 'nums', 'modified', 'it', 'matter', 'values', 'set', 'returned', 'confused', 'returned', 'value', 'integer', 'answer', 'note', 'input', 'array', 'passed', 'means', 'modification', 'input', 'array', 'known', 'caller', 'internally', 'think', 'nums', 'passed', 'without', 'making', 'int', 'len', 'modification', 'nums', 'function', 'would', 'known', 'using', 'length', 'returned', 'prints', 'first', 'len', 'array', 'two pointers']",1
25,Reverse Nodes in k-Group,"['given', 'linked', 'reverse', 'nodes', 'linked', 'list', 'k', 'time', 'return', 'modified', 'k', 'positive', 'integer', 'less', 'equal', 'length', 'linked', 'if', 'number', 'nodes', 'multiple', 'k', 'nodes', 'end', 'remain', 'given', 'linked', 'for', 'k', 'for', 'k', 'only', 'constant', 'extra', 'memory', 'you', 'may', 'alter', 'values', 'nodes', 'may', 'linked list']",3
24,Swap Nodes in Pairs,"['given', 'swap', 'every', 'two', 'adjacent', 'nodes', 'return', 'you', 'may', 'modify', 'values', 'nodes', 'may', 'given', 'return', 'list', 'linked list']",2
23,Merge k Sorted Lists,"['merge', 'k', 'sorted', 'linked', 'lists', 'return', 'one', 'sorted', 'analyze', 'describe', 'linked list', 'divide and conquer', 'heap']",3
22,Generate Parentheses,"['given', 'n', 'pairs', 'write', 'function', 'generate', 'combinations', 'for', 'given', 'n', 'solution', 'set', 'string', 'backtracking']",2
21,Merge Two Sorted Lists,"['merge', 'two', 'sorted', 'linked', 'lists', 'return', 'new', 'the', 'new', 'list', 'made', 'splicing', 'together', 'nodes', 'first', 'two', 'linked list']",1
20,Valid Parentheses,"['given', 'string', 'containing', 'characters', 'determine', 'input', 'string', 'an', 'input', 'string', 'valid', 'open', 'brackets', 'must', 'closed', 'type', 'open', 'brackets', 'must', 'closed', 'correct', 'note', 'empty', 'string', 'considered', 'string', 'stack']",1
19,Remove Nth Node From End of List,"['given', 'linked', 'remove', 'node', 'end', 'list', 'return', 'given', 'linked', 'n', 'after', 'removing', 'second', 'node', 'linked', 'list', 'becomes', 'given', 'n', 'always', 'follow', 'could', 'one', 'linked list', 'two pointers']",2
18,4Sum,"['given', 'array', 'nums', 'n', 'integers', 'integer', 'elements', 'nums', 'b', 'c', 'find', 'unique', 'quadruplets', 'array', 'gives', 'sum', 'the', 'solution', 'set', 'must', 'contain', 'duplicate', 'given', 'array', 'nums', 'target', 'a', 'solution', 'set', 'array', 'hash table', 'two pointers']",2
17,Letter Combinations of a Phone Number,"['given', 'string', 'containing', 'digits', 'return', 'possible', 'letter', 'combinations', 'number', 'could', 'a', 'mapping', 'digit', 'letters', 'like', 'telephone', 'given', 'note', 'map', 'although', 'answer', 'lexicographical', 'answer', 'could', 'order', 'string', 'backtracking']",2
16,3Sum Closest,"['given', 'array', 'nums', 'n', 'integers', 'integer', 'find', 'three', 'integers', 'sum', 'closest', 'return', 'sum', 'three', 'you', 'may', 'assume', 'input', 'would', 'exactly', 'one', 'given', 'array', 'nums', 'target', 'the', 'sum', 'closest', 'target', 'array', 'two pointers']",2
15,3Sum,"['given', 'array', 'nums', 'n', 'elements', 'c', 'nums', 'b', 'c', 'find', 'unique', 'triplets', 'array', 'gives', 'sum', 'the', 'solution', 'set', 'must', 'contain', 'duplicate', 'given', 'array', 'nums', 'a', 'solution', 'set', 'array', 'two pointers']",2
14,Longest Common Prefix,"['write', 'function', 'find', 'longest', 'common', 'prefix', 'string', 'amongst', 'array', 'if', 'common', 'return', 'empty', 'string', 'there', 'common', 'prefix', 'among', 'input', 'all', 'given', 'inputs', 'lowercase', 'letters', 'string']",1
13,Roman to Integer,"['roman', 'numerals', 'represented', 'seven', 'different', 'd', 'symbol', 'i', 'v', 'x', 'l', 'c', 'd', 'm', 'for', 'written', 'roman', 'two', 'added', 'twelve', 'written', 'simply', 'x', 'the', 'number', 'twenty', 'seven', 'written', 'xx', 'v', 'roman', 'numerals', 'usually', 'written', 'largest', 'smallest', 'left', 'numeral', 'four', 'number', 'four', 'written', 'because', 'one', 'five', 'subtract', 'making', 'the', 'principle', 'applies', 'number', 'written', 'there', 'six', 'instances', 'subtraction', 'i', 'placed', 'v', 'x', 'make', 'x', 'placed', 'l', 'c', 'make', 'c', 'placed', 'd', 'm', 'make', 'given', 'roman', 'convert', 'input', 'guaranteed', 'within', 'range', 'l', 'iii', 'm', 'cm', 'xc', 'iv', 'math', 'string']",1
12,Integer to Roman,"['roman', 'numerals', 'represented', 'seven', 'different', 'd', 'symbol', 'i', 'v', 'x', 'l', 'c', 'd', 'm', 'for', 'written', 'roman', 'two', 'added', 'twelve', 'written', 'simply', 'x', 'the', 'number', 'twenty', 'seven', 'written', 'xx', 'v', 'roman', 'numerals', 'usually', 'written', 'largest', 'smallest', 'left', 'numeral', 'four', 'number', 'four', 'written', 'because', 'one', 'five', 'subtract', 'making', 'the', 'principle', 'applies', 'number', 'written', 'there', 'six', 'instances', 'subtraction', 'i', 'placed', 'v', 'x', 'make', 'x', 'placed', 'l', 'c', 'make', 'c', 'placed', 'd', 'm', 'make', 'given', 'convert', 'roman', 'input', 'guaranteed', 'within', 'range', 'l', 'v', 'iii', 'm', 'cm', 'xc', 'iv', 'math', 'string']",2
11,Container With Most Water,"['given', 'n', 'integers', 'represents', 'point', 'coordinate', 'n', 'vertical', 'lines', 'drawn', 'two', 'endpoints', 'line', 'find', 'two', 'together', 'forms', 'container', 'contains', 'may', 'slant', 'container', 'n', 'least', 'the', 'vertical', 'lines', 'represented', 'array', 'in', 'max', 'area', 'water', 'container', 'array', 'two pointers']",2
10,Regular Expression Matching,"['given', 'input', 'string', 'pattern', 'implement', 'regular', 'expression', 'matching', 'support', 'matches', 'single', 'matches', 'zero', 'preceding', 'the', 'matching', 'cover', 'entire', 'input', 'string', 'empty', 'contains', 'lowercase', 'letters', 'p', 'could', 'empty', 'contains', 'lowercase', 'letters', 'characters', 'p', 'match', 'entire', 'string', 'p', 'means', 'zero', 'repeating', 'becomes', 'p', 'means', 'character', 'p', 'repeated', 'repeated', 'therefore', 'matches', 'p', 'string', 'dynamic programming', 'backtracking']",3
9,Palindrome Number,"['determine', 'whether', 'integer', 'an', 'backward', 'from', 'left', 'reads', 'from', 'right', 'becomes', 'therefore', 'reads', 'right', 'therefore', 'follow', 'coud', 'without', 'converting', 'integer', 'math']",1
8,String to Integer (atoi),"['implement', 'atoi', 'string', 'the', 'function', 'first', 'discards', 'many', 'whitespace', 'characters', 'necessary', 'first', 'character', 'starting', 'takes', 'optional', 'initial', 'plus', 'minus', 'sign', 'followed', 'many', 'numerical', 'digits', 'interprets', 'numerical', 'the', 'string', 'contain', 'additional', 'characters', 'form', 'integral', 'ignored', 'effect', 'behavior', 'if', 'first', 'sequence', 'characters', 'str', 'valid', 'integral', 'sequence', 'exists', 'either', 'str', 'empty', 'contains', 'whitespace', 'conversion', 'if', 'valid', 'conversion', 'could', 'zero', 'value', 'only', 'space', 'character', 'considered', 'whitespace', 'assume', 'dealing', 'environment', 'could', 'store', 'integers', 'within', 'signed', 'integer', 'if', 'numerical', 'value', 'range', 'representable', 'the', 'first', 'character', 'minus', 'then', 'take', 'many', 'numerical', 'digits', 'gets', 'conversion', 'stops', 'digit', 'next', 'character', 'numerical', 'the', 'first', 'character', 'numerical', 'digit', 'therefore', 'valid', 'conversion', 'could', 'the', 'number', 'range', 'signed', 'thefore', 'math', 'string']",2
7,Reverse Integer,"['given', 'signed', 'reverse', 'digits', 'assume', 'dealing', 'environment', 'could', 'store', 'integers', 'within', 'signed', 'integer', 'for', 'purpose', 'assume', 'function', 'returns', 'reversed', 'integer', 'math']",1
6,ZigZag Conversion,"['the', 'string', 'written', 'zigzag', 'pattern', 'given', 'number', 'rows', 'like', 'may', 'want', 'display', 'pattern', 'fixed', 'font', 'better', 'p', 'a', 'h', 'a', 'p', 'l', 's', 'i', 'i', 'y', 'i', 'and', 'read', 'line', 'write', 'code', 'take', 'string', 'make', 'conversion', 'given', 'number', 'string', 'int', 'numrows', 'numrows', 'p', 'i', 'a', 'l', 's', 'i', 'y', 'a', 'h', 'p', 'i', 'string']",2
5,Longest Palindromic Substring,"['given', 'string', 'find', 'longest', 'palindromic', 'substring', 'you', 'may', 'assume', 'maximum', 'length', 'also', 'valid', 'string', 'dynamic programming']",2
4,Median of Two Sorted Arrays,"['there', 'two', 'sorted', 'arrays', 'size', 'n', 'find', 'median', 'two', 'sorted', 'the', 'overall', 'run', 'time', 'complexity', 'you', 'may', 'assume', 'the', 'median', 'the', 'median', 'array', 'binary search', 'divide and conquer']",3
3,Longest Substring Without Repeating Characters,"['given', 'find', 'length', 'longest', 'substring', 'without', 'repeating', 'the', 'answer', 'length', 'the', 'answer', 'length', 'the', 'answer', 'length', 'note', 'answer', 'must', 'subsequence', 'hash table', 'two pointers', 'string', 'sliding window']",2
2,Add Two Numbers,"['you', 'given', 'two', 'linked', 'lists', 'representing', 'two', 'the', 'digits', 'stored', 'reverse', 'order', 'nodes', 'contain', 'single', 'add', 'two', 'numbers', 'return', 'linked', 'you', 'may', 'assume', 'two', 'numbers', 'contain', 'leading', 'except', 'number', 'linked list', 'math']",2
1,Two Sum,"['given', 'array', 'return', 'indices', 'two', 'numbers', 'add', 'specific', 'you', 'may', 'assume', 'input', 'would', 'exactly', 'one', 'may', 'use', 'element', 'given', 'nums', 'target', 'because', 'return', 'array', 'hash table']",1
